import unittest
from binascii import unhexlify
from ctypes import cast, POINTER

from virgil_crypto.foundation import RsaPrivateKey, RsaPublicKey
from virgil_crypto.foundation._c_bridge import *



class RsaPrivateKeyTest(unittest.TestCase):
    PCKS1_2048_PRIVATE_KEY = unhexlify("308204A202010002820100537CC7E8FB4B0975739F3FF613D01A98D5039EB859C0FD8B01DF72A63673EFAD121C33746F2A1C1BE43999CFC545FAB897569131AE7EB76013E87AC32707A9C910F13AA798CFA05E78711B716BB5C8F3A70BADD37E9375ACF752C1D096A9EFBAED8484721E9EBB0865FD0C5547094617D713F86F92A32F43D6FD3B52D5855C7384504AAD7FDF95CEFFEF806AED6B75EBD650B733EEEEEA53479EF38F59C5F68290724A62EDD013DBB6EEA566FD5CB44E7ACDC027E48F7DB620DE7ECAB187C314987BADE4CBE1D19DD43B0C86EFF900EB4EE1F793E8D033D9459B146AAFF9971DC1C727408E9722A91D27AE3BB3151E97AEC7F3605622A0E38B8BB4EA46E610EB02030100010282010048A0A077F943C9B2B726AE49AFEAB57886B6637913FB63956DC7A8C11755BC06DF5E5114D52FD8CC1ABA51280201629EFA68805EABE1E83C589541564BB9CAE5F32B274F6D0C12029CDC28777EAFE164B4C8E02AC04E1F6C9CAB0D981BB931A777C07447A2838B493F0FE78EB801454CAFF9DB81941B099F0683BCFBCE6BF984347FC0F3B693A4A355687FD464AA7289D34C5B866895DD41AABB54D0B340747567469CEAA36F3920DF1C393C9B8FCA824E2BE741A094D792259D5CB71A981EED7127181E61B9147F2573982D7A31C705B089C3881DD285AB0E8DC775249CE3AFCCC19CE1FBA4676B84DD79057AA2B0E872A5EEC98357E31B0B58DCCBF601D22102818100A379B8FDB31D795325613B14722C91C2DF5B4B1D7968FA1803DC574493F0727AFEA82A1A83763532B4A4484971D7898A179BAFF921996C74DD920B5A011957451C3C5EE0178A0E5B5673C56D560EC54FCB1E18D6A8BD0B1215F020CB1DEF12DB0325F9337F4039A79FCAAE335E069423675A000F1F7337FC861F0A246355A0DD0281810082BD6F58F121E6C8DCA3D62C2079AE7DADD8D9F18C678A36E1D97EBA58D7392D5C641B23EF4F172EF645027F6DF8EAD0EBDA154B723B98212DD1BF7C4B90AA8AAD06FEABEEAA3F8CBBE02EB8D0E5B819356BCE6C0F559E259FF4FF11C45BEA46DFABF7983D059AB6AE28C2BC64E5D3335E96B2A446371CF31917A370F02A38670281807021791383FDAE8FAAAF23D025748ED2C5542094EA0768AC7A517406951733DF4BB7DB916E24F1DE82EBC0ADA809B8CCE0DEA878D164247190DDB12D9E5D5C700A2B1AC4C940A8125C9D728949A33E123A77BD7FD8243B68BF658388EF52627399983D73E6500E7BFCEE104929B08782354D15874A02451FD07B90005FA6877D0281804A9F93D1A178E74098E78F148AC8C97704E6B4A771AB9BB16DC1F5DAA960D74AF3E453B5741FA1ACF5763851C1D4853B1093DEF9BC4F15AB427AE9202A057DC23FB6B160338ECB4D29E370E79E9CB032FB51F875A75F08309397848B8097B22617FF1108BD33D8B612BC4342C318872F57FB0E2643C9AB657A5A0AB928EC005B02818100946945F81BD813FD29F99DA0EE71D994CC3025FC781AC9A31D734951A5D765C9A3F76D35A518B6804E5C7A1CC95C2DF4DEFC6900850A2C8BADEC1C1AA4516A8A47BBBE739BE793FB635ECDE6928AEF688420A833B54FCA49265473AECA518B64A77A3C020A7667EA76DCCF1F85C567EBBD944808BB175227D828213993E80301")
    PKCS1_2048_PUBLIC_KEY = unhexlify("3082010902820100537CC7E8FB4B0975739F3FF613D01A98D5039EB859C0FD8B01DF72A63673EFAD121C33746F2A1C1BE43999CFC545FAB897569131AE7EB76013E87AC32707A9C910F13AA798CFA05E78711B716BB5C8F3A70BADD37E9375ACF752C1D096A9EFBAED8484721E9EBB0865FD0C5547094617D713F86F92A32F43D6FD3B52D5855C7384504AAD7FDF95CEFFEF806AED6B75EBD650B733EEEEEA53479EF38F59C5F68290724A62EDD013DBB6EEA566FD5CB44E7ACDC027E48F7DB620DE7ECAB187C314987BADE4CBE1D19DD43B0C86EFF900EB4EE1F793E8D033D9459B146AAFF9971DC1C727408E9722A91D27AE3BB3151E97AEC7F3605622A0E38B8BB4EA46E610EB0203010001")

    def test_rsa_private_key_len_imported_2048_private_key_pkcs1_returns_256(self):
        private_key = RsaPrivateKey()
        private_key.setup_defaults()
        private_key.import_private_key(self.PCKS1_2048_PRIVATE_KEY)
        self.assertEqual(256, private_key.key_len())

    def test_rsa_private_key_from_imported_2048_private_key_pkcs1_equal(self):
        private_key = RsaPrivateKey()
        private_key.setup_defaults()

        private_key.import_private_key(self.PCKS1_2048_PRIVATE_KEY)

        exported_key = private_key.export_private_key()

        self.assertEqual(len(self.PCKS1_2048_PRIVATE_KEY), len(exported_key))
        self.assertEqual(self.PCKS1_2048_PRIVATE_KEY, exported_key)

    def test_rsa_private_key_extract_public_key_from_imported_2048_private_key_pkcs1_when_exported_equals_2048_public_key_pkcs1(self):
        private_key = RsaPrivateKey()
        private_key.setup_defaults()

        private_key.import_private_key(self.PCKS1_2048_PRIVATE_KEY)

        public_key = private_key.extract_public_key()
        exported_public_key = public_key.export_public_key()

        self.assertEqual(len(self.PKCS1_2048_PUBLIC_KEY), len(exported_public_key))
        self.assertEqual(self.PKCS1_2048_PUBLIC_KEY, exported_public_key)
