#   @license
#   -------------------------------------------------------------------------
#   Copyright (C) 2015-2020 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
#   -------------------------------------------------------------------------

#   @warning
#   -------------------------------------------------------------------------
#   This file is fully generated by script 'wasm_codegen.gsl'.
#   It can be changed temporary for debug purposes only.
#   -------------------------------------------------------------------------
#   @end


cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(virgil_crypto_core_sdk_wasm VERSION ${virgil_crypto_VERSION} LANGUAGES C)

# ---------------------------------------------------------------------------
#   Check dependencies
# ---------------------------------------------------------------------------
if(NOT VIRGIL_LIB_CORE_SDK)
    message(STATUS "Skip building the WebAssembly wrapper for library core_sdk, which is not built.")
    return()
endif()

# ---------------------------------------------------------------------------
#   Find utils
# ---------------------------------------------------------------------------
find_host_program(WASM2WAT wasm2wat)

# ---------------------------------------------------------------------------
#   Common steps for all WebAssembly libraries.
# ---------------------------------------------------------------------------
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/fake.c" "")

function(wasm_add_common_wasm_options target)
    target_sources(${target} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
    target_sources(${target} PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
    target_link_libraries(${target}
            "-s WASM=1"
            "-s ALLOW_MEMORY_GROWTH=1"
            "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
            "-s MODULARIZE=1"
            "-s EXPORT_NAME=CoreSdkModule"
            "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1>"
            "$<$<CONFIG:Debug>:--emrun>"
            vsc::core_sdk
            )
endfunction()

function(wasm_add_common_asmjs_options target)
    target_sources(${target} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
    target_sources(${target} PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
    target_link_libraries(${target}
            "-s WASM=0"
            "-s SINGLE_FILE=1"
            "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
            "-s MODULARIZE=1"
            "-s EXPORT_NAME=CoreSdkModule"
            "$<$<CONFIG:Release>:--llvm-lto 1 -O0>"
            "$<$<CONFIG:Debug>:--emrun>"
            vsc::core_sdk
            )
endfunction()

# ---------------------------------------------------------------------------
#   Create WebAssembly library
# ---------------------------------------------------------------------------
add_executable(libcore_sdk)
wasm_add_common_wasm_options(libcore_sdk)
target_link_libraries(libcore_sdk
        "-s ENVIRONMENT=node"
        )

add_executable(libcore_sdk.browser)
wasm_add_common_wasm_options(libcore_sdk.browser)
target_link_libraries(libcore_sdk.browser
        "-s ENVIRONMENT=web"
        )

add_executable(libcore_sdk.worker)
wasm_add_common_wasm_options(libcore_sdk.worker)
target_link_libraries(libcore_sdk.worker
        "-s ENVIRONMENT=worker"
        )

add_executable(libcore_sdk.asmjs)
wasm_add_common_asmjs_options(libcore_sdk.asmjs)
target_link_libraries(libcore_sdk.asmjs
        "-s ENVIRONMENT=node"
        )

add_executable(libcore_sdk.browser.asmjs)
wasm_add_common_asmjs_options(libcore_sdk.browser.asmjs)
target_link_libraries(libcore_sdk.browser.asmjs
        "-s ENVIRONMENT=web"
        )

add_executable(libcore_sdk.worker.asmjs)
wasm_add_common_asmjs_options(libcore_sdk.worker.asmjs)
target_link_libraries(libcore_sdk.worker.asmjs
        "-s ENVIRONMENT=worker"
        )

add_custom_command(TARGET libcore_sdk POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_LIST_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}"
        )

if(WASM2WAT)
    add_custom_command(TARGET libcore_sdk POST_BUILD
            COMMAND "${WASM2WAT}"
                    libcore_sdk.wasm
                    -o libcore_sdk.wat
            COMMENT "Create WAT from libcore_sdk.wasm"
            )
endif()
