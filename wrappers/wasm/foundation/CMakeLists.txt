#   @license
#   -------------------------------------------------------------------------
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
#   -------------------------------------------------------------------------

#   @warning
#   -------------------------------------------------------------------------
#   This file is fully generated by script 'wasm_codegen.gsl'.
#   It can be changed temporary for debug purposes only.
#   -------------------------------------------------------------------------
#   @end


cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

project(virgil_crypto_foundation_wasm VERSION ${virgil_crypto_VERSION} LANGUAGES C)

# ---------------------------------------------------------------------------
#   Check dependencies
# ---------------------------------------------------------------------------
if(NOT VIRGIL_LIB_FOUNDATION)
    message(STATUS "Skip building the WebAssembly wrapper for library foundation, which is not built.")
    return()
endif()

# ---------------------------------------------------------------------------
#   Find utils
# ---------------------------------------------------------------------------
find_host_program(WASM2WAT wasm2wat)

# ---------------------------------------------------------------------------
#   Create WebAssembly library
# ---------------------------------------------------------------------------
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/fake.c" "")
add_executable(libfoundation "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation
        "-s ENVIRONMENT=node"
        "-s WASM=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )
add_executable(libfoundation.browser "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation.browser PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation.browser
        "-s ENVIRONMENT=web"
        "-s WASM=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )
add_executable(libfoundation.worker "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation.worker PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation.worker
        "-s ENVIRONMENT=worker"
        "-s WASM=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )
add_executable(libfoundation.asmjs "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation.asmjs PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation.asmjs
        "-s ENVIRONMENT=node"
        "-s WASM=0"
        "-s SINGLE_FILE=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )
add_executable(libfoundation.browser.asmjs "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation.browser.asmjs PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation.browser.asmjs
        "-s ENVIRONMENT=web"
        "-s WASM=0"
        "-s SINGLE_FILE=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )
add_executable(libfoundation.worker.asmjs "${CMAKE_CURRENT_BINARY_DIR}/fake.c")
target_sources(libfoundation.worker.asmjs PRIVATE "${CMAKE_CURRENT_LIST_DIR}/exported_functions.json")
target_link_libraries(libfoundation.worker.asmjs
        "-s ENVIRONMENT=worker"
        "-s WASM=0"
        "-s SINGLE_FILE=1"
        "-s EXPORTED_FUNCTIONS=\"@${CMAKE_CURRENT_LIST_DIR}/exported_functions.json\""
        "-s MODULARIZE=1"
        "-s EXPORT_NAME=FoundationModule"
        "$<$<CONFIG:Release>:--llvm-lto 1 -Os --closure 1 -s USE_CLOSURE_COMPILER=1>"
        "$<$<CONFIG:Debug>:--emrun>"
        vsc::foundation
        )


add_custom_command(TARGET libfoundation POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_LIST_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}"
        )

if(WASM2WAT)
    add_custom_command(TARGET libfoundation POST_BUILD
            COMMAND "${WASM2WAT}"
                    libfoundation.wasm
                    -o libfoundation.wat
            COMMENT "Create WAT from libfoundation.wasm"
            )
endif()
