#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(round5-reference VERSION 0.0.1 LANGUAGES C)

include(GNUInstallDirs)

# ---------------------------------------------------------------------------
#   Define sources.
# ---------------------------------------------------------------------------
add_library(round5-reference)
target_sources(round5-reference
        PRIVATE
            # Headers
            ${CMAKE_CURRENT_LIST_DIR}/src/xef.h
            ${CMAKE_CURRENT_LIST_DIR}/src/a_random.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_core.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cpa_kem.h
            ${CMAKE_CURRENT_LIST_DIR}/src/pack.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cpa_pke.h
            ${CMAKE_CURRENT_LIST_DIR}/src/a_fixed.h
            ${CMAKE_CURRENT_LIST_DIR}/src/misc.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_dem.h
            ${CMAKE_CURRENT_LIST_DIR}/src/little_endian.h
            ${CMAKE_CURRENT_LIST_DIR}/src/rng.h
            ${CMAKE_CURRENT_LIST_DIR}/src/cca_encrypt.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_memory.h
            ${CMAKE_CURRENT_LIST_DIR}/src/parameters.h
            ${CMAKE_CURRENT_LIST_DIR}/src/cpa_kem.h
            ${CMAKE_CURRENT_LIST_DIR}/src/shake.h
            ${CMAKE_CURRENT_LIST_DIR}/src/drbg.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cca_kem.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_hash.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_parameter_sets.h
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cca_pke.h

            # Sources
            ${CMAKE_CURRENT_LIST_DIR}/src/cpa_kem.c
            ${CMAKE_CURRENT_LIST_DIR}/src/shake.c
            ${CMAKE_CURRENT_LIST_DIR}/src/parameters.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_memory.c
            ${CMAKE_CURRENT_LIST_DIR}/src/drbg.c
            ${CMAKE_CURRENT_LIST_DIR}/src/xef_ref.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cca_kem.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cca_pke.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_hash.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_parameter_sets.c
            ${CMAKE_CURRENT_LIST_DIR}/src/pack.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_core.c
            ${CMAKE_CURRENT_LIST_DIR}/src/a_random.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cpa_kem.c
            ${CMAKE_CURRENT_LIST_DIR}/src/r5_cpa_pke.c
            ${CMAKE_CURRENT_LIST_DIR}/src/a_fixed.c
            ${CMAKE_CURRENT_LIST_DIR}/src/examples/example.c
            ${CMAKE_CURRENT_LIST_DIR}/src/little_endian.c
            ${CMAKE_CURRENT_LIST_DIR}/src/misc.c
            ${CMAKE_CURRENT_LIST_DIR}/src/cca_encrypt.c
        )

if(CRYPTO_ENGINE_MBEDTLS)
    target_sources(round5-reference PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src/r5_dem_mbedtls.c)
else()
    target_sources(round5-reference PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src/r5_dem.c)
endif()

if(NIST_KAT_GENERATION)
    if(NOT CRYPTO_ENGINE_OPENSSL)
        message(FATAL_ERROR "NIST_KAT_GENERATION requires CRYPTO_ENGINE_OPENSSL to be enabled")
    endif()
    target_sources(round5-reference PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src/rng/nist_rng.c)
else()
    target_sources(round5-reference PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src/rng/true_rng.c)
endif()

target_include_directories(round5-reference
        PUBLIC
            $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
        )

target_compile_features(round5-reference PUBLIC c_std_99)

set_target_properties(round5-reference PROPERTIES OUTPUT_NAME "round5")

# ---------------------------------------------------------------------------
#   Define definitions.
# ---------------------------------------------------------------------------
target_compile_definitions(round5-reference PUBLIC ${ALG})

if(NIST_KAT_GENERATION)
    target_compile_definitions(round5-reference PUBLIC NIST_KAT_GENERATION)
endif()

if(TAU)
    target_compile_definitions(round5-reference PUBLIC ROUND5_API_TAU=${TAU})
endif()

if(TAU_LEN)
    target_compile_definitions(round5-reference PUBLIC ROUND5_API_TAU2_LEN=${TAU2_LEN})
endif()

if(NO_OPENSSL_SHAKE)
    target_compile_definitions(round5-reference PUBLIC NO_OPENSSL_SHAKE)
endif()

if(USE_AES_DRBG)
    target_compile_definitions(round5-reference PUBLIC USE_AES_DRBG)
endif()

# ---------------------------------------------------------------------------
#   Define compilation flags.
# ---------------------------------------------------------------------------
target_compile_options(round5-reference
        PRIVATE
            $<$<OR:$<C_COMPILER_ID:GNU>,$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>>:
                    -pedantic -Wall -Wextra -Wconversion -Wcast-qual -Wcast-align>
        )

target_link_libraries(round5-reference
        PUBLIC
            XKCP::keccak
            $<$<BOOL:${CRYPTO_ENGINE_OPENSSL}>:OpenSSL::Crypto>
            $<$<BOOL:${CRYPTO_ENGINE_MBEDTLS}>:mbed::crypto>
            $<$<OR:$<C_COMPILER_ID:GNU>,$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>>:-lm>
        )

# ---------------------------------------------------------------------------
#   Install library.
# ---------------------------------------------------------------------------
#
# Install headers.
#
install(
        DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/src/"
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/round5"
        FILES_MATCHING PATTERN "*.h"
        )

#
# Install libraries.
#
install(
        TARGETS round5-reference
        EXPORT round5Targets
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        FRAMEWORK DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
        )

# ---------------------------------------------------------------------------
#   Build examples.
# ---------------------------------------------------------------------------
if(BUILD_EXAMPLES)
    add_executable(example "${CMAKE_CURRENT_LIST_DIR}/src/examples/example.c")
    target_link_libraries(example round5-reference)

    add_executable(createAfixed "${CMAKE_CURRENT_LIST_DIR}/src/createAfixed/createAfixed.c")
    target_link_libraries(createAfixed round5-reference)

    install(
            TARGETS example createAfixed
            RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
            )
endif()

if(BUILD_SPEEDTEST)
    add_executable(speedtest)
    target_sources(speedtest
            PRIVATE
                "${CMAKE_CURRENT_LIST_DIR}/../speedtest/src/speedtest.c"
                "${CMAKE_CURRENT_LIST_DIR}/../speedtest/src/test_utils.c"
            )
    target_link_libraries(speedtest round5-reference)

    install(
            TARGETS speedtest
            RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
            )
endif()
