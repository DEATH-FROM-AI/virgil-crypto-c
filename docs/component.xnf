<?xml version="1.0"?>
<!--
    Copyright (C) 2015-2018 Virgil Security Inc.

    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

        (1) Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        (2) Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in
        the documentation and/or other materials provided with the
        distribution.

        (3) Neither the name of the copyright holder nor the names of its
        contributors may be used to endorse or promote products derived from
        this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
-->


 <entity name="lineage">
    Keep hierarchical information about parents.
    Lower component is a child relative to the upper component.

    <allow entity="ancestor" occurs="1+"/>
</entity>


<entity name="ancestor">
    Handles information about component ancestor.

    <attr name="id" required="1">
        Ancestor component name
    </attr>

    <attr name="name" required="1">
        Ancestor name
    </attr>
</entity>


<entity name="uid" abstract="1">
    <attr name="uid">
        Unique component identifier represents name that uniquely identifies
        component within modules hierarchy.
    </attr>
</entity>

<entity name="c_prefix" abstract="1">
    <attr name="c_prefix">
        Prefix that is used for C name resolution.
    </attr>
</entity>


<entity name="component" abstract="1">
    Groups common attributes for the component.

    <inherit entity="scope"/>
    <inherit entity="uid"/>
    <inherit entity="class"/>
    <inherit entity="c_prefix"/>
</entity>


<entity name="instance" abstract="1">
    Defines attributes that related to the instance type.

    <attr name="type">
        Defines instance primitive type.

        <restrict value="nothing">
            The same as a C void type.
        </restrict>

        <restrict value="boolean">
            True / False type.
        </restrict>

        <restrict value="integer">
            Signed integral type.
        </restrict>

        <restrict value="size">
            Unsigned integral type for size definition.
        </restrict>

        <restrict value="byte">
            Unsigned 8-bit integral type.
        </restrict>

        <restrict value="data">
            Shortcut for the byte array.
            Note, 'size' attribute is interpreted as an 'array.size' attribute.
        </restrict>
    </attr>

    <attr name="class">
        Defines instance class.

        Possible values are:
            * any    - Defines instance of any class.
            * string - String class. Have a special meaning in the C context,
                       it is represented a null-terminated array of characters.
            * buffer - Special class "buffer" that is used as an output byte array.
            * impl   - Universal implementation class.

        If value differs from the listed above then next algorithm applied:
            1. If value in a format .(uid), then it treated as a reference to
               the in-project class and will be substituted during context
               resolution step.
            2. Any other value will be used as-is. So one third party type
               can be used.

        Note, for class 'string' attribute 'size' is interpreted as an 'array.size' attribute.
    </attr>

    <attr name="enum">
        Defines enumeration type.

        1. If value in a format .(uid), then it treated as a reference to
           the in-project enumeration and will be substituted during context
           resolution step.
        2. Any other value will be used as-is. So one third party type
           can be used.
    </attr>

    <attr name="callback">
        Defines instance as a callback.

        1. If value in a format .(uid), then it treated as a reference to
           the in-project callback and will be substituted during context
           resolution step.
        2. Any other value will be used as-is. So one third party type
           can be used.
    </attr>

    <inherit entity="access"/>
    <inherit entity="size"/>
    <allow entity="array"/>
</entity>


<entity name="access">
    <attr name="access">
        Defines access rights to the instance and/or array of instances.

        <restrict value="readonly">
            Value of the given type is can be modified.
        </restrict>

        <restrict value="writeonly">
            Value of the given type will be modified.
        </restrict>

        <restrict value="readwrite">
            Value of the given type can be read and then modified.
        </restrict>

        <restrict value="disown">
            Ownership of the given class object is transferred.

            If object is passed via argument to method, then client can not
            use object after method return.

            If object is returned from method, then client is responsible for
            object destruction.

            Note, primitive type can not be disowned.
        </restrict>
    </attr>
</entity>


<entity name="size">
    <attr name="size">
        Define possible size types for instances and array of instances.

        <!-- For primitive type and enumeration -->
        <!-- CURRENTLY IS NOT SUPPORTED -->
        <restrict value="1">
            Size of the type is one byte.
        </restrict>

        <restrict value="2">
            Size of the type is two bytes.
        </restrict>

        <restrict value="4">
            Size of the type is three bytes.
        </restrict>

        <restrict value="8">
            Size of the type is four bytes.
        </restrict>

        <!-- For string and array -->
        <restrict value="null_terminated">
            String size or array size is defined by distance from the first
            to the termination symbol.
        </restrict>

        <restrict value="given">
            String size or array size is defined by the client.
        </restrict>

        <restrict value="known">
            Array size is known at compile time or during runtime, so it can
            be obtained by the client side and passed to the method as argument.
        </restrict>

        <restrict value="fixed">
            Array size is known at compile time so it can be checked.
        </restrict>

        <restrict value="derived">
            Array size can be statically derived during array initialization.
        </restrict>
    </attr>
</entity>


<entity name="array">
    Defines parent instance as an array.

    <attr name="size">
        For fixed size array it defines number of elements as integral constant.
    </attr>

    <inherit entity="access"/>
</entity>


<entity name="require">
    Defines module that current module depends on.

    <attr name="module" required="1">
        Module name that current module depends on.
    </attr>

    <inherit entity="scope"/>
</entity>


<entity name="constant">
    Defines integral constant.

    <attr name="name" required="1">
        Constant name.
    </attr>

    <attr name="value" required="1">
        Constant value.
    </attr>

    <inherit entity="component"/>
</entity>


<entity name="variable">
    Defines global variable.

    <attr name="name" required="1">
        Object name.
    </attr>

    <inherit entity="component"/>
    <inherit entity="visibility"/>
    <inherit entity="definition"/>
    <inherit entity="instance"/>

    <!-- Bracer initializer is used for multiple variable_value's -->
    <allow entity="variable_value" occurs="1+" />
</entity>


<entity name="variable_value">
    Initialization variable value.

    <attr name="value" required="1">
        Initialization value.
    </attr>

    <inherit entity="uid"/>
</entity>


<entity name="enum">
    Defines enumeration type.

    <attr name="name">
        Object name.
    </attr>

    <inherit entity="component"/>
    <inherit entity="visibility"/>
    <inherit entity="definition"/>

    <allow entity="enum_value" occurs="0+"/>
</entity>


<entity name="enum_value">
    Defines enumeration value.

    <attr name="name" required="1">
        Enumeration value name.
    </attr>

    <attr name="value">
        Enumeration value constant.
    </attr>

    <inherit entity="component"/>
</entity>


<entity name="struct">
    Defines struct type.

    <attr name="name" required="1">
        Structure name.
    </attr>

    <inherit entity="component"/>
    <inherit entity="visibility"/>
    <inherit entity="definition"/>

    <allow entity="property"/>
</entity>


<entity name="property">
    Defines struct property.

    <attr name="name" required="1">
        Property name.
    </attr>

    <inherit entity="instance"/>
    <inherit entity="uid"/>

    <allow entity="argument"/>
    <allow entity="return"/>
</entity>


<entity name="method">
    Defines the method signature and optionally implementation.

    <attr name="name" required="1">
        Method name.
    </attr>

    <inherit entity="component"/>
    <inherit entity="visibility"/>
    <inherit entity="definition"/>

    <allow entity="return" occurs="0/1"/>
    <allow entity="argument" occurs="0+"/>
    <allow entity="c_implementation" occurs="0/1"/>
</entity>


<entity name="callback">
    Defines the callback signature.

    <attr name="name" required="1">
        Method name.
    </attr>

    <inherit entity="component"/>

    <allow entity="return" occurs="0/1"/>
    <allow entity="argument" occurs="0+"/>
</entity>


<entity name="argument">
    Defines argument as name, type, and usage information.

    <attr name="name" required="1">
        Argument name.
    </attr>

    <inherit entity="instance"/>
    <inherit entity="uid"/>
</entity>


<entity name="return">
    Defines return type.

    <inherit entity="instance"/>
</entity>


<entity name="macros">
    Defines the macros name and optionally implementation.

    <attr name="name" required="1">
        Macros name.
    </attr>

    <inherit entity="component"/>

    <allow entity="c_implementation" occurs="0/1"/>
</entity>
