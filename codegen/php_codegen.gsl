.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Functions for PHP primitives generation: protocol, class, enum, etc.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Generate project files.
# ---------------------------------------------------------------------------
function php_generate_project (wrapper_project)
endfunction

# ---------------------------------------------------------------------------
#   Generate source files from <php_module/> entities.
# ---------------------------------------------------------------------------
function php_generate_sources (php_project)
    check_arguments (my, "php_project", my)

    if -1 = directory.create (my.php_project.source_dir)
        echo_fatal ("Can not create directory: $(my.wrapper.source_dir:)")
    endif

    for my.php_project.php_module as php_module0 where string_in (php_module0.type, "class, interface, implementation")
        php_generate_source_php (php_module0)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_generate_source_php (in_php_module)
    check_arguments (my, "in_php_module", my)

    if defined (my.in_php_module.source_dir)
        if -1 = directory.create (my.in_php_module.source_dir)
            echo_fatal ("Can not create directory: $(my.in_php_module.source_dir:)")
        endif
    endif

    echo_trace ("Generate PHP $(my.in_php_module.type:) $(my.in_php_module.name:)", my)

    output my.in_php_module.source_file_path

    #php_insert_code ("<?php", 0)
    #php_insert_description (my.in_php_module->php_license)
    #newline()
    #php_insert_code_from_model (my.in_php_module)
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_insert_code_from_model (in_php_module)
    check_arguments (my, "in_php_module", my)
    assert_attributes (my.in_php_module, "type, name")

    my._module_type = my.in_php_module.type
    my._module_name = my.in_php_module.name

    my._s = my.in_php_module->php_entity->high_level->signature.

    php_insert_code("$(my._s:)", 0)

    php_insert_code("{", 0)

    for my.in_php_module->php_entity->high_level.php_method as php_method0
        newline()
        php_insert_code(php_method0->docblock., 1)

        my._signature = php_method0->signature.

        if my._module_type = "interface"
            my._signature += ";"
        endif

        php_insert_code(my._signature, 1)

        if defined (php_method0->body.)
            php_insert_code("{", 1)
            php_insert_code(php_method0->body., 2)
            php_insert_code("}", 1)
        endif

    endfor

    php_insert_code("}",0)
endfunction

.endtemplate
