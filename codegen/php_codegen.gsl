.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Functions for PHP primitives generation: protocol, class, enum, etc.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Generate project files.
# ---------------------------------------------------------------------------
function php_generate_project (wrapper_project)
    check_arguments (my, "wrapper_project", my)
endfunction

# ---------------------------------------------------------------------------
#   Generate source files from <php_module/> entities.
# ---------------------------------------------------------------------------
function php_generate_sources (wrapper_project)
    check_arguments (my, "wrapper_project", my)

    assert_attribute (my.wrapper_project, "source_dir", my)

    if -1 = directory.create (my.wrapper_project.source_dir)
        echo_fatal ("Can not create directory: $(my.wrapper.source_dir:)")
    endif

    for my.wrapper_project.php_module

        if defined (php_module.source_dir)
            if -1 = directory.create (php_module.source_dir)
                echo_fatal ("Can not create directory: $(php_module.source_dir:)")
            endif
        endif

        output php_module.source_file_path

        echo_trace ("Generate PHP files from <$(name (php_module)) name = \"$(c_module.name:)\"/>", my)

        php_insert_php_open_tag()
        php_insert_prologue (php_module)
        newline ()
            
#        for php_module.php_import
#            newline_if (first ())
#            php_insert_import (php_import)
#        endfor

#        for php_module.php_code
#            newline_if (first ())
#            php_insert_code (php_code)
#        endfor

#        for php_module.php_enum
#            newline ()
#            php_insert_enum (php_enum)
#        endfor

#        for php_module.php_abstract_class
#            newline ()
#            php_insert_abstract_class (php_abstract_class)
#        endfor

        for php_module.php_class
            newline_if (first ())
            php_insert_class (php_class)
        endfor

#        for php_module.php_struct
#            newline ()
#            php_insert_struct (php_struct)
#        endfor

#        for php_module.php_extension
#            newline ()
#            php_insert_extension (php_extension)
#        endfor
    endfor

    for my.wrapper_project.json_module
        echo_trace("Generate JSON files from <$(name(json_module)) name=\"$(json_module.name:)\"/>", my)

        output json_module.source_file_path

        for json_module.code
            php_insert_code(code.)
        endfor
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class
# ---------------------------------------------------------------------------
function php_insert_class (php_class)
    check_arguments (my, "php_class", my)

    echo_trace ("Generate PHP class: " + my.php_class.name, my)

    assert_attributes (my.php_class, "name", my)

    newline ()
    php_insert_description(my.php_class, 0)
    php_insert_code("class $(my.php_class.name:Pascal)")
    php_insert_code("{",0)

#    if is_true (python_class.is_abstract)
#        python_insert_code(terminator + format_left("__metaclass__ = ABCMeta"), 1)
#    endif

#    for my.python_class.python_constant
#       newline_if (first ())
#       python_insert_class_constant (python_constant)
#    endfor

    for my.php_class.php_constructor
        php_insert_constructor(php_constructor)
    endfor

    for my.php_class.php_destructor
        newline ()
        php_insert_destructor (php_destructor)
   endfor

    for my.php_class.php_method by is_false (php_method.is_specific_method)
        newline ()
        php_insert_class_method (php_method)
    endfor

#    for my.python_class.python_property
#        newline ()
#        python_insert_class_property (python_property)
#    endfor

#    for my.python_class.python_code
#        if is_true(python_code.leadeing_new_line)
#            newline ()
#        endif
#        python_insert_code(python_code., 1)
#    endfor

    php_insert_code("}",0)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: constructor / init
# ---------------------------------------------------------------------------
function php_insert_constructor (php_constructor)
    check_arguments (my, "php_constructor", my)

    assert_item (my.php_constructor, "php_code", my)

    my.method_args = php_format_argument_list(my.php_constructor) ?
    my.method_args = string.search_replace (my.method_args, "self, ", "") ?
    
    php_insert_description (my.php_constructor, 1)
    php_insert_code("public function __construct($(' ,'+my.method_args?:))", 1)
    php_insert_code("{",1)

    php_insert_code("$(my.php_constructor->php_code.:)", 2)
    php_insert_code("}",1)
endfunction

# ---------------------------------------------------------------------------
#   Insert: license + caution + description
# ---------------------------------------------------------------------------
function php_insert_prologue(php_module)
    check_arguments (my, "php_module", my)

    assert_item (my.php_module, "php_license", my)

    php_insert_description (my.php_module->php_license)
endfunction

# ---------------------------------------------------------------------------
#   Insert description of the given object.
# ---------------------------------------------------------------------------
function php_insert_description (obj, tab_count)
    my.description = my.obj. ?
    my.tab_count ?= 0
    if string_empty (my.description)
        return
    endif
    php_insert_code (my.description, my.tab_count)
endfunction

# ---------------------------------------------------------------------------
#   Insert given multiline code.
# ---------------------------------------------------------------------------
function php_insert_code (code, tab_count)
    check_argument (my, "code", my)

    my.code = "$(my.code:left,no)"
    my.code = string_trim (my.code)
    my.code = code_collapse_spaces (my.code)

    my.code = string_indent (my.code, my.tab_count)
    my.code = string_multi_rtrim (my.code)

    out (my.code)
endfunction

# ---------------------------------------------------------------------------
#   Return multiline formatted string with license.
# ---------------------------------------------------------------------------
function php_format_license(license)
    return php_format_comment(my.license) ?
endfunction

# ---------------------------------------------------------------------------
#   Return formatted multiline commented string.
# ---------------------------------------------------------------------------
function php_format_comment(comment)
    if ! defined (my.comment.)
        return
    endif

    my.str = my.comment.
    my.str = string_indent (my.str)
    my.str = "* $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)
    my.str = "/**$(terminator)$(my.str:)$(terminator)*/"

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   Return multiline formatted string with description.
# ---------------------------------------------------------------------------
function php_format_description(description)
    return php_format_comment(my.description) ?
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_insert_php_open_tag()
    php_insert_code("<?php")
endfunction

# ---------------------------------------------------------------------------
#   Return formatted list of arguments without braces.
# ---------------------------------------------------------------------------
function php_format_argument_list (php_method)
    check_arguments (my, "php_method", my)

    for my.php_method.php_argument
        my.arg_list = ""
        my.arg_list = "$(php_argument.name:c)"
        if ! last()
            my.arg_list += ", "
        endif
    endfor

    return my.arg_list
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: destructor / deinit
# ---------------------------------------------------------------------------
function php_insert_destructor (php_destructor)
    check_arguments (my, "php_destructor", my)

    php_insert_description (my.php_destructor, 1)
    php_insert_code ("\
        public function __destruct()
        {
            $(my.php_destructor->php_code.:)
        }
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class.method
# ---------------------------------------------------------------------------
function php_insert_class_method (php_method)
    check_arguments (my, "php_method", my)

    assert_attributes (my.php_method, "name", my)

    if is_true (my.php_method.is_classmethod)
        my.method_args = php_format_argument_list(my.php_method) ? "cls"
    else
        my.method_args = php_format_argument_list(my.php_method) ? ""
    endif
    my.method_return = php_format_return_list(my.php_method) ?

    php_insert_description (my.php_method, 1)
    php_insert_code("public function $(my.php_method.name:)($(my.method_args?:))", 1)
    php_insert_code ("{", 1)

    if count (my.php_method.php_code)
        php_insert_code (my.php_method->php_code., 2)
    else
        php_insert_code ("throw new Exception(\"Not implemented!\")", 2)
    endif
    php_insert_code ("}", 1)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted list of returned value(s).
# ---------------------------------------------------------------------------
function php_format_return_list (php_method)
    check_arguments (my, "php_method", my)

    my.is_tuple = count (my.php_method.php_return) > 1 ?? "1" ? "0"

    for my.php_method.php_return
        my.return_list ?= ""

        if my.is_tuple
            my.return_list += "$(php_return.name:)"
        else
            my.return_list += ""
        endif

        if ! last()
            my.return_list += ", "
        endif
    endfor

    if defined (my.return_list) & my.is_tuple
        my.return_list = "(" + my.return_list + ")"
    endif

    if defined (my.return_list)
        my.return_list = my.return_list
    endif

    return my.return_list
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_insert_extension_data (extension_module)
    check_arguments (my, "extension_module", my)

    php_insert_code("\
        #include \"vsce_assert.h\"
    ",0)

endfunction

.endtemplate
