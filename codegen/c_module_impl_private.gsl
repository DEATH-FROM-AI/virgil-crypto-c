.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Shared Implementation Private API'.
#   Private function prefix is: A12.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

gsl from "c_resolver.gsl"
gsl from "c_names_config.gsl"


# ---------------------------------------------------------------------------
#   Add implementation structure: info.
# ---------------------------------------------------------------------------
function _A12_add_struct_info (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new struct to my.destination
        . = "\
        Contains common properties for any 'API' implementation object.
        "
        .name = my.names.struct_info

        new property
            . = "\
            Implementation unique identifier, MUST be first in the structure.
            "
            .name = my.names.property_impl_tag
            .type = my.refs.class_impl_enum_tag
            .is_impl_tag = 1
        endnew

        new property
            . = "\
            NULL terminated array of the implementaed interfaces.
            MUST be second in the structure.
            "
            .name = my.names.property_api_array
            .type = my.refs.class_api_struct
            .is_object = 1
            .is_const_array = 1
            .is_api_array = 1
        endnew

        new property
            . = "Erase inner state in a secure manner."
            .name = my.names.property_self_cleanup
            .is_callback = 1
            .is_self_cleanup_cb = 1

            c_method_add_argument_impl (property)
        endnew

        new property
            . = "Self destruction, according to destruction policy."
            .name = my.names.property_self_destroy
            .is_callback = 1
            .is_self_destroy_cb = 1

            c_method_add_argument_impl (property)
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add implementation structure: header.
# ---------------------------------------------------------------------------
function  _A12_add_type_self (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new struct to my.destination
        . = "\
        Contains header of any 'API' implementation structure.
        It is used for runtime type casting and checking.
        "
        .name = ""

        new property
            . = "\
            Compile-time known information.
            "
            .name = my.names.property_info
            .type = my.refs.class_impl_struct_info
            .is_object = 1
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with private functionality common for all
#   'implementation' objects.
# ---------------------------------------------------------------------------
function c_module_impl_private_create (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    new module to my.destination
        . = "\
        This module contains Private API common for all 'implementation' objects.
        "
        .name = my.names.module_impl_private
        .class = my.names.class_impl
        .scope = "private"

        new require
            .module = my.names.module_library
        endnew

        new require
            .module = my.names.module_impl
        endnew

        _A12_add_struct_info (module, my.meta)
        _A12_add_type_self (module, my.meta)
    endnew
endfunction

.endtemplate
