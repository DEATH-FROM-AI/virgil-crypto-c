.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Shared Implementation Private API'.
#   Private function prefix is: A12.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"


# ---------------------------------------------------------------------------
#   Add implementation structure: info.
# ---------------------------------------------------------------------------
function _A12_add_struct_info (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new struct to my.destination
        . = "\
        Contains common properties for any 'API' implementation object.
        "
        .name = my.names.struct_info
        .declaration = "public"
        .definition = "public"

        new property
            . = "\
            Implementation unique identifier, MUST be first in the structure.
            "
            .name = my.names.property_impl_tag
            .enum = ".(class_impl_enum_tag)"
            .tag = "impl_tag"
        endnew

        new property
            . = "\
            NULL terminated array of the implemented interfaces.
            MUST be second in the structure.
            "

            .name = my.names.property_api_array
            .class = ".(class_api_struct_api)"
            .tag = "api_array"

            new array to property
                .length = "null_terminated"
            endnew
        endnew

        new property
            . = "Release acquired inner resources."

            .name = my.names.property_self_cleanup
            .callback = ".(class_impl_callback_cleanup)"
            .tag = "self_cleanup"
        endnew

        new property
            . = "Self destruction, according to destruction policy."

            .name = my.names.property_self_delete
            .callback = ".(class_impl_callback_delete)"
            .tag = "self_delete"
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add implementation structure: header.
# ---------------------------------------------------------------------------
function  _A12_add_struct_impl (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new struct to my.destination
        . = "\
        Contains header of any 'API' implementation structure.
        It is used for runtime type casting and checking.
        "
        .name = my.names.struct_impl
        .declaration = "external"
        .definition = "public"

        new property
            . = "\
            Compile-time known information.
            "
            .name = my.names.property_info
            .class = ".(class_impl_struct_info)"
        endnew

        new property
            . = "\
            Reference counter.
            "
            .name = my.names.property_ref_counter
            .type = "size"
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with private functionality common for all
#   'implementation' objects.
# ---------------------------------------------------------------------------
function c_module_impl_private_create (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    echo_trace ("Create module: $(my.names.module_impl_private)", my)

    new module to my.destination
        . = "\
        This module contains Private API common for all 'implementation' objects.
        "

        .name = my.names.module_impl_private
        .of_class = my.names.class_impl
        .scope = "private"

        new require
            .module = my.names.module_library
        endnew

        new require
            .module = my.names.module_error
        endnew

        new require
            .module = my.names.module_impl
        endnew

        _A12_add_struct_info (my.meta, module)
        _A12_add_struct_impl (my.meta, module)
    endnew
endfunction

.endtemplate
