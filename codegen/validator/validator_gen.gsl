.template 0

gsl from "../common.gsl"

# ---------------------------------------------------------------------------
function entity_tag(entity)
    check_arguments(my, "entity", my)

    return my.entity.tag ? make_id(my.entity.name)
endfunction

# ---------------------------------------------------------------------------
function entity_derive_name_of_function_setup_defaults(name)
    check_arguments(my, "name", my)

    return make_id(my.name, "setup defaults")
endfunction

# ---------------------------------------------------------------------------
function entity_derive_name_of_function_validate(name)
    check_arguments(my, "name", my)

    return make_id(my.name, "validate")
endfunction

# ---------------------------------------------------------------------------
function entity_derive_name_of_function_validate_resolved(name)
    check_arguments(my, "name", my)

    return make_id(my.name, "validate resolved")
endfunction

# ---------------------------------------------------------------------------
function load_entities(include, destination)
    check_arguments(my, "include, destination", my)
    assert_attributes(my.include, "filename", my)

    if count(my.destination.included, included.filename = my.include.filename)
        return
    else
        move my.include to my.destination as included
    endif

    echo_debug("Load file '$(my.include.filename:)'")
    my.destination.load_file(my.include.filename, my.error)

    if defined(my.error)
        echo_fatal(my.error, my)
    else
        my.include.is_loaded = "1"
    endif

    for my.destination.include
        load_entities(include, my.destination)
    endfor
endfunction

# ---------------------------------------------------------------------------
function find_referenced_entity(name, all_entities)
    check_arguments(my, "name, all_entities", my)

    my.entity = my.all_entities->entity(name = my.name) ?
    if !defined(my.entity)
        echo_fatal("Referenced entity '$(my.name)' is not found")
    endif

    return my.entity
endfunction


# ---------------------------------------------------------------------------
function generate_setup_defaults_body_for_attr(attr, entity)
    check_arguments(my, "attr, entity", my)

    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    my.attr_access = "$(my.my_tag:).$(my.attr.name:)"

    my.attr_default_value = "\"$(my.attr.default:)\"" ?

    >    my.default_value = my.defaults.$(my.attr.name:) ? $(my.attr_default_value?:)
    >    if defined(my.default_value) & !defined($(my.attr_access:))
    >        echo_trace("       $(my.attr.name:)=\\"\$\(my.default_value:\)\\"", my)
    >        $(my.attr_access:) = my.default_value
    >    endif
endfunction

# ---------------------------------------------------------------------------
function generate_function_setup_defaults(entity)
    check_arguments(my, "entity", my)

    #
    #   Entry point
    #
    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    >
    ># ---------------------------------------------------------------------------
    >function $(entity_derive_name_of_function_setup_defaults(my.entity.name))($(my.tag:), defaults)

    if is_false(my.entity.abstract)
        >    my.$(my.tag:)_name = defined($(my.my_tag).name) ?? " name=\\"\$\($(my.my_tag).name\)\\"" ? ""
        >    echo_trace("[L1] Setup defaults for entity: <\$\(name($(my.my_tag)\)\)\$\(my.$(my.tag:)_name\)/>", my)
    endif

    >
    >    #    Defaults should be also inherited.
    >    if !defined(my.defaults)
    >        my.defaults = XML.new("defaults")
    >        my.is_local_defaults = "1"
    >    endif

    #
    #   Generate "setup defaults" for inherited entities
    #
    for my.entity.inherit
        if first()
            >
            >    #    Setup defaults for inherited attributes and entities
        endif
        for inherit.attr where defined(attr.default)
            >     my.defaults.$(attr.name:) = "$(attr.default:)"
        endfor
        >    $(entity_derive_name_of_function_setup_defaults(inherit.entity))($(my.my_tag), my.defaults)
    endfor

    #
    #   Generate "setup defaults" for allowed entities
    #
    for my.entity.allow
        if first()
            >
            >    #    Setup defaults for allowed entities
        else
            >
        endif

        my.allowed_entity_tag = make_id(allow.tag ? allow.entity)

        for allow.attr
            if first()
                >    new defaults
            endif
            if defined(attr.default)
                >        .$(attr.name:) = "$(attr.default:)"
            endif
            if last()
                >        for $(my.my_tag).$(my.allowed_entity_tag:) as _$(my.allowed_entity_tag:)
                >            $(entity_derive_name_of_function_setup_defaults(allow.entity))(_$(my.allowed_entity_tag), defaults)
                >        endfor
                >        delete defaults
                >    endnew
            endif
        else
            >    for $(my.my_tag).$(my.allowed_entity_tag:) as _$(my.allowed_entity_tag:)
            >        $(entity_derive_name_of_function_setup_defaults(allow.entity))(_$(my.allowed_entity_tag))
            >    endfor
        endfor
    endfor

    #
    #   Generate "setup defaults" body for self attributes
    #
    for my.entity.attr
        >
        generate_setup_defaults_body_for_attr(attr, my.entity)
    endfor

    >
    >    #   Cleanup
    >    if is_true(my.is_local_defaults)
    >        delete my.defaults
    >    endif

    >endfunction
endfunction

# ---------------------------------------------------------------------------
function generate_validation_body_for_attr(attr, entity)
    check_arguments(my, "attr, entity", my)

    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    my.attr_access = "$(my.my_tag:).$(my.attr.name:)"

    my.attr_default_str = " (default: $(my.attr_default_value:))" ? ""

    >    my.restrictions.attr_$(my.attr.name)_apply ?= "1"
    >    my.restrictions.attr_$(my.attr.name)_required ?= "$(is_true(my.attr.required))"
    >
    >    if my.restrictions.attr_$(my.attr.name)_apply
    >        echo_trace("     Validate attribute: $(my.attr.name:)=\\"\$\($(my.attr_access:)?\)\\"", my)
    >    endif
    >
    >    if !defined($(my.attr_access:)) & \\
    >                my.restrictions.attr_$(my.attr.name)_apply & my.restrictions.attr_$(my.attr.name)_required
    >        echo_fatal_required_attr($(my.my_tag:), "$(my.attr.name:)")
    >    endif

    for my.attr.restrict
        my.restrict_list ?= ""
        my.restrict_list += restrict.value

        if first()
            >    if my.restrictions.attr_$(my.attr.name)_apply & defined($(my.attr_access:))
            >        my.$(my.attr.name:)_is_valid = "0"
        endif

        >        my.$(my.attr.name:)_is_valid = my.$(my.attr.name:)_is_valid | ($(my.attr_access:) = "$(restrict.value)")

        if last()
            >        if !my.$(my.attr.name:)_is_valid
            >            echo_fatal_resticted_attr($(my.my_tag:), "$(my.attr.name:)", "$(my.restrict_list:)")
            >        endif
            >    endif
        else
            my.restrict_list += ", "
        endif
    endfor
endfunction

# ---------------------------------------------------------------------------
function generate_validation_body_for_oneof_attr(oneof, entity)
    check_arguments(my, "oneof, entity", my)
    assert_attributes(my.oneof, "name", my)

    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"

    for my.oneof.attr
        my.all_attrs ?= ""
        my.all_attrs += attr.name
        if !last()
            my.all_attrs += ", "
        endif
    endfor

    >    echo_trace("     Validate one of: {$(my.all_attrs:)}", my)
    >    my.$(my.oneof.name)_found_attrs = ""
    >    my.$(my.oneof.name)_found_attrs_count = "0"

    for my.oneof.attr
        my.attr_access = "$(my.my_tag:).$(attr.name:)"
        >
        >    if defined($(my.attr_access:))
        >        my.$(my.oneof.name)_found_attrs_count += 1
        >        if my.$(my.oneof.name)_found_attrs <> ""
        >            my.$(my.oneof.name)_found_attrs += ", "
        >        endif
        >        my.$(my.oneof.name)_found_attrs += "$(attr.name:)"
        >    endif
    endfor

    >
    >    my.restrictions.oneof_$(my.oneof.name)_apply ?= "1"
    >    my.restrictions.oneof_$(my.oneof.name)_required ?= "$(is_true(my.oneof.required))"
    >
    >    if my.restrictions.oneof_$(my.oneof.name)_apply & \
    >             my.restrictions.oneof_$(my.oneof.name)_required &  \
    >             my.$(my.oneof.name)_found_attrs_count = "0"
    >        my.dump_filename = entity_dump_file($(my.my_tag:))
    >        echo_fatal("Expected one of the attributes {$(my.all_attrs:)}.\\n" + \\
    >                   "But found nothing.\\n" + \\
    >                   "See dump file: \$\(my.dump_filename:\)", my)
    >    endif
    >

    >    if my.$(my.oneof.name)_found_attrs_count > "1"
    >        my.dump_filename = entity_dump_file($(my.my_tag:))
    >        echo_fatal("Expected one of the attributes {$(my.all_attrs:)}.\\n" + \\
    >                   "But found several {\$\(my.$(my.oneof.name)_found_attrs:\)}.\\n" + \\
    >                   "See dump file: \$\(my.dump_filename:\)", my)
    >    endif
endfunction

# ---------------------------------------------------------------------------
function generate_validation_body_for_allow(allow, entity, resolved)
    check_arguments(my, "allow, entity, resolved", my)

    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    my.allowed_entity_tag = make_id(my.allow.tag ? my.allow.entity)

    my.allow.occurs ?= "0+"
    my.allow.resolved ?= "0"

    if my.allow.resolved = my.resolved
        #   Possible values: {0+, 0/1, 1, 1+}
        >    my.$(my.allowed_entity_tag)_count = count($(my.my_tag).$(my.allowed_entity_tag))
        if my.allow.occurs = "1"
            >    if my.$(my.allowed_entity_tag)_count <> 1
            >        my.dump_filename = entity_dump_file($(my.my_tag:))
            >        echo_fatal("Expected exectly one entity: $(my.allowed_entity_tag:).\\n" + \\
            >                   "But found \$\(my.$(my.allowed_entity_tag)_count\).\\n" + \\
            >                   "See dump file: \$\(my.dump_filename:\)", my)
            >    endif
        elsif my.allow.occurs = "1+"
            >    if my.$(my.allowed_entity_tag)_count < 1
            >        my.dump_filename = entity_dump_file($(my.my_tag:))
            >        echo_fatal("Expected one or more entities: $(my.allowed_entity_tag:).\\n" + \\
            >                   "But found \$\(my.$(my.allowed_entity_tag)_count\).\\n" + \\
            >                   "See dump file: \$\(my.dump_filename:\)", my)
            >    endif
        elsif my.allow.occurs = "0/1"
            >    if my.$(my.allowed_entity_tag)_count > 1
            >        my.dump_filename = entity_dump_file($(my.my_tag:))
            >        echo_fatal("Expected zero one entity: $(my.allowed_entity_tag:).\\n" + \\
            >                   "But found \$\(my.$(my.allowed_entity_tag)_count\).\\n" + \\
            >                   "See dump file: \$\(my.dump_filename:\)", my)
            >    endif
        endif
    endif

    >    for $(my.my_tag).$(my.allowed_entity_tag) as _$(my.allowed_entity_tag)
    >        new restrictions
    for my.allow.oneof
        my.apply = my.resolved | is_false(oneof.resolved)
        >            .oneof_$(oneof.name)_apply = "$(my.apply)"
        >            .oneof_$(oneof.name)_required = "$(is_true(oneof.required))"
    endfor
    for my.allow.attr
        my.apply = my.resolved | is_false(attr.resolved)
        >            .attr_$(attr.name)_apply = "$(my.apply)"
        >            .attr_$(attr.name)_required = "$(is_true(attr.required))"
    endfor

    if my.resolved = "1"
        >            $(entity_derive_name_of_function_validate_resolved(my.allow.entity))(_$(my.allowed_entity_tag), restrictions)
    else
        >            $(entity_derive_name_of_function_validate(my.allow.entity))(_$(my.allowed_entity_tag), restrictions)
    endif
    >        endnew
    >    endfor
endfunction

# ---------------------------------------------------------------------------
function generate_function_validate(entity)
    check_arguments(my, "entity", my)

    #
    #   Generate validation body
    #
    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    >
    ># ---------------------------------------------------------------------------
    >function $(entity_derive_name_of_function_validate(my.entity.name))($(my.tag:), restrictions)

    if is_false(my.entity.abstract)
        >    my.$(my.tag:)_name = defined($(my.my_tag).name) ?? " name=\\"\$\($(my.my_tag).name\)\\"" ? ""
        >    echo_trace("[L1] Validate entity: <\$\(name($(my.my_tag)\)\)\$\(my.$(my.tag:)_name\)/>", my)
    endif

    #
    #   Generate validation body for inherited entities
    #
    for my.entity.inherit
        if first()
            >
            >    #    Check inherited attributes and entities
        else
            >
        endif
        >    new restrictions
        for inherit.oneof
            >        .oneof_$(oneof.name)_apply = "$(is_true(oneof.resolved))"
            >        .oneof_$(oneof.name)_required = "$(is_true(oneof.required))"
        endfor
        for inherit.attr
            >        .attr_$(attr.name)_apply = "$(is_true(attr.resolved))"
            >        .attr_$(attr.name)_required = "$(is_true(attr.required))"
        endfor
        >        $(entity_derive_name_of_function_validate(inherit.entity))($(my.my_tag), restrictions)
        >    endnew
    endfor

    #
    #   Generate validation body for allowed entities
    #
    for my.entity.allow
        if first()
            >
            >    #    Check allowed entities
        else
            >
        endif
        generate_validation_body_for_allow(allow, my.entity, "0")
    endfor

    #
    #   Generate validation body for self attributes
    #
    >
    >    my.restrictions ?= XML.new("restrictions")

    for my.entity.attr where is_false(attr.resolved)
        >
        generate_validation_body_for_attr(attr, my.entity)
    endfor

    for my.entity.oneof where is_false(oneof.resolved)
        >
        generate_validation_body_for_oneof_attr(oneof, my.entity)
    endfor

    >
    >    delete my.restrictions
    >endfunction
endfunction

# ---------------------------------------------------------------------------
function generate_function_validate_resolved(entity)
    check_arguments(my, "entity", my)

    #
    #   Generate validation body
    #
    my.tag = entity_tag(my.entity)
    my.my_tag = "my.$(my.tag)"
    >
    ># ---------------------------------------------------------------------------
    >function $(entity_derive_name_of_function_validate_resolved(my.entity.name))($(my.tag:), restrictions)

    if is_false(my.entity.abstract)
        >    my.$(my.tag:)_name = defined($(my.my_tag).name) ?? " name=\\"\$\($(my.my_tag).name\)\\"" ? ""
        >    echo_trace("[L1] Validate entity: <\$\(name($(my.my_tag)\)\)\$\(my.$(my.tag:)_name\)/>", my)
    endif

    #
    #   Generate validation body for inherited entities
    #
    for my.entity.inherit
        if first()
            >
            >    #    Check inherited attributes and entities
        else
            >
        endif
        >    new restrictions
        for inherit.oneof where defined(oneof.required)
            >        .oneof_$(oneof.name)_required = "$(oneof.required)"
        endfor
        for inherit.attr where defined(attr.required)
            >        .attr_$(attr.name)_required = "$(attr.required)"
        endfor
        >        $(entity_derive_name_of_function_validate_resolved(inherit.entity))($(my.my_tag), restrictions)
        >    endnew
    endfor

    #
    #   Generate validation body for allowed entities
    #
    for my.entity.allow
        if first()
            >
            >    #    Check allowed entities
        else
            >
        endif
        generate_validation_body_for_allow(allow, my.entity, "1")
    endfor

    #
    #   Generate validation body for self attributes
    #
    >
    >    my.restrictions ?= XML.new("restrictions")

    for my.entity.attr
        >
        generate_validation_body_for_attr(attr, my.entity)
    endfor

    for my.entity.oneof
        >
        generate_validation_body_for_oneof_attr(oneof, my.entity)
    endfor

    >
    >   delete my.restrictions
    >endfunction
endfunction

# ---------------------------------------------------------------------------
function generate_entity_validator(entity, all_entities)
    check_arguments(my, "entity, all_entities", my)

    if is_true(my.entity.is_generated)
        return
    endif

    #   Process leaves first
    for my.entity.inherit
        my.inherited_entity = find_referenced_entity(inherit.entity, my.all_entities)
        generate_entity_validator(my.inherited_entity, my.all_entities)
    endfor

    for my.entity.allow
        my.allowed_entity = find_referenced_entity(allow.entity, my.all_entities)
        generate_entity_validator(my.allowed_entity, my.all_entities)
    endfor

    generate_function_setup_defaults(my.entity)
    generate_function_validate(my.entity)
    generate_function_validate_resolved(my.entity)

    my.entity.is_generated = "1"
endfunction

# ---------------------------------------------------------------------------
function _main()
    new all_entities
        for validator.include
            load_entities(include, all_entities)
        endfor

        output "../validator.gsl"

        ># ---------------------------------------------------------------------------
        >#   This file is fully generated by the script -
        >#   'codegen/validator/validator_gen.gsl'
        ># ---------------------------------------------------------------------------
        >
        >gsl from "common.gsl"
        >
        >function entity_dump_file(entity)
        >    assert_attributes(my, "entity", my)
        >
        >    time.now(my.date, my.time)
        >    my.dump_dir = ".generated/dump"
        >    my.dump_filename = "\$\(make_id(name(my.entity))\)_\$\(my.date\)_\$\(my.time\).xml"
        >    item_save_to_file(my.entity, my.dump_filename, my.dump_dir)
        >    return cat_path(my.dump_dir, my.dump_filename)
        >endfunction
        >
        >function echo_fatal_required_attr(entity, attr_name)
        >    my.dump_filename = entity_dump_file(my.entity)
        >    echo_fatal("Required attribute '$\(name(my.entity)\).\$\(my.attr_name:\)' is not defined. " + \\
        >               "See dump file: \$\(my.dump_filename:\)", my)
        >endfunction
        >
        >function echo_fatal_resticted_attr(entity, attr_name, valid_values)
        >    my.dump_filename = entity_dump_file(my.entity)
        >    echo_fatal("Possible values of the attribute '$\(name(my.entity)\).\$\(my.attr_name:\)' " + \\
        >               "are '{\$\(my.valid_values:\)}', " + \\
        >               "but found \$\(my.entity.\$\(my.attr_name\)\). " + \\
        >               "See dump file: \$\(my.dump_filename:\)", my)
        >endfunction
        >

        for all_entities.entity
            generate_entity_validator(entity, all_entities)
        endfor
        close
    endnew
endfunction

_main()

.endtemplate
