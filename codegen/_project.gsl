if !main.multithread
    gsl from "_class.gsl"
endif

# ---------------------------------------------------------------------------
function project_process_class(project, class)
    check_arguments(my, "project, class", my)

    if main.multithread
        my.class_parsed_thread = create_parsed_thread("_class.gsl")
        my.class_thread = my.class_parsed_thread.run()
        my.class_thread.send(my.project, my.class)
    else
        class_process(my.project, my.class)
    endif
endfunction

# ---------------------------------------------------------------------------
function project_calculate_dependencies_fingerprint(main, project)
    check_arguments(my, "main, project", my)

    new dependencies
        .license = fingerprint(my.project->license ? my.main->license)
        .version = fingerprint(my.project->version ? my.main->version)
        .self_fingerprint = fingerprint(my.project)

        my.fingerprint = fingerprint(dependencies)
        delete dependencies
        return my.fingerprint
    endnew
endfunction

# ---------------------------------------------------------------------------
function project_load(project_name)
    check_arguments(my, "project_name", my)

    my.name = make_id("project", my.project_name)
    my.models_dir = cat_path("models", my.name)
    my.file_path = cat_path(my.models_dir, my.name + ".xml")

    return item_load_from_file(my.file_path)
endfunction

# ---------------------------------------------------------------------------
function project_verify(project)
    check_arguments(my, "project", my)

    echo_trace("[L1] Project '$(my.project.name:)' - verify", my)

    assert_attribute(my.project, "name", my)
    assert_attribute(my.project, "prefix", my)
    assert_attribute(my.project, "namespace", my)
    assert_attribute(my.project, "path", my)
endfunction

# ---------------------------------------------------------------------------
function project_setup_defaults(project)
    check_arguments(my, "project", my)

    echo_trace("---------------------------------------------------------------------------", my)
    echo_trace("[L1] Project '$(my.project.name:)' - setup defaults", my)

    my.project.work_path ?= cat_path("generated", make_id(my.project.name))
    my.project.namespace_dir = string.replace("$(string_collapse_spaces(my.project.namespace):c,lower)", "_|/")
    my.project.framework ?= "VSC$(my.project.name:Pascal)"

    #   TODO: Move this to the <c_project/> model.
    my.project.inc_path ?= cat_path(my.project.path, "include", my.project.namespace_dir)
    my.project.inc_private_path ?= cat_path(my.project.path, "include", my.project.namespace_dir, "private")
    my.project.src_path ?= cat_path(my.project.path, "src")
    my.project.install_headers_dir ?= cat_path(my.project.namespace_dir)
    my.project.install_private_headers_dir ?= cat_path(my.project.namespace_dir, "private")


    if !count(my.project.version)
        new version to my.project
        endnew
    endif

    my.project->version.major ?= 0
    my.project->version.minor ?= 0
    my.project->version.patch ?= 1

    my.project.version_major = my.project->version.major
    my.project.version_minor = my.project->version.minor
    my.project.version_patch = my.project->version.patch

    my.project.version_string = "$(my.project.version_major:).$(my.project.version_minor:).$(my.project.version_patch:)"
    my.project.cmake_target ?= "$(my.project.name:c)"

    my.project.wrappers ?= "all"
endfunction

# ---------------------------------------------------------------------------
#   Entry point
# ---------------------------------------------------------------------------
function project_process(main, project_link)
    check_arguments(my, "main, project_link", my)
    assert_attribute(my.project_link, "name", my)

    echo_info("[L1] Project '$(my.project_link.name:)' - start processing", my)

    my.project = project_load(my.project_link.name)
    my.project.forcegen ?= my.main.forcegen
    my.cached_project = cache_load_or_invalidate(my.project, my.project) ?
    my.project.fingerprint = project_calculate_dependencies_fingerprint(my.main, my.project)

    if defined(my.cached_project)
        echo_trace("[L1] Project '$(my.project.name:)' - cache detected", my)
    else
        echo_trace("[L1] Project '$(my.project.name:)' - full update required", my)
    endif

    if !fingerprint_is_equal(my.project, my.cached_project)
        project_verify(my.project)
        project_setup_defaults(my.project)
    endif

    echo_trace("[L1] Project '$(my.project.name:)' - process children", my)
    for my.project.class
        project_process_class(my.project, class)
    endfor

    cache_store(my.project, my.project)
    echo_trace("[L1] Project '$(my.project.name:)' - accomplished", my)
endfunction

# ---------------------------------------------------------------------------
#   Multi thread entry point
# ---------------------------------------------------------------------------
if main.multithread
    thread.receive(sending_thread, _main, _project_link)
    project_process(_main, _project_link)
endif
