.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for PHP wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "interface.gsl"
gsl from "component.gsl"
gsl from "c_component.gsl"
gsl from "php_codegen.gsl"

# ---------------------------------------------------------------------------
#   Create module with low level shared object loader that handles C context.
# ---------------------------------------------------------------------------
function php_create_toplevel_modules(wrapper) #[optional]
    ### TODO
endfunction

function php_resolve_toplevel (wrapper, license) #[optional]
endfunction

function php_resolve_project (project, wrapper, projects_api)
    ### ?
endfunction

function php_create_project_module (project, wrapper)
    check_arguments (my, "project, wrapper", my)

    assert_attribute (my.wrapper, "lang", my)
    assert_attributes (my.project, "name, prefix, framework", my)
    assert_item (my.project, "license", my)

    echo_info ("Create PHP project for project: '$(my.project.name:)'", my)

    new php_project to my.wrapper
        . = my.project. ?
        .name = my.project.name
        .description = my.project.brief
        .prefix = my.project.prefix
        .framework = my.project.framework
        .namespace = "$(my.project.namespace:c)"
        .namespace_dir = my.project.name
        .source_dir = cat_path ("$(my.wrapper.main_package_dir:)", php_project.namespace_dir)

        copy my.project->license to php_project

        new php_uid to php_project
            .name = php_project.namespace
            .uid = "php_framework_name"
        endnew

        if directory.create (php_project.source_dir) = -1
            echo_fatal ("Can not create directory: $(.source_dir:). ", my)
        endif

        return php_project
    endnew
endfunction

function php_create_custom_modules (source, php_project, meta)
    check_arguments (my, "source, php_project, meta", my)

    if directory.create (my.php_project.source_dir) = -1
        echo_fatal ("Can not create directory: $(.source_dir_path:). ", my)
    endif

    new json_module to my.php_project
        .name = "composer"
        .source_file_name = 0.name + ".json"
        .source_file_path = cat_path(my.php_project.source_dir, 0.source_file_name)
        new code to json_module
            .= "\
            {
                \"name\": \"virgil/crypto-$(my.php_project.name:)\",
                \"description\": \"$(my.php_project.description:)\",
                \"keywords\": [],
                \"homepage\": \"https://virgilsecurity.com\",
                \"license\": \"BSD-3-Clause\",
                \"authors\": [
                    {
                        \"name\": \"Virgil Security, Inc\",
                        \"email\": \"support@virgilsecurity.com\",
                        \"homepage\": \"https://virgilsecurity.com\"
                    }
                ],
                \"require\": {
                    \"php\": \"^7.2\"
                },
                \"autoload\": {
                    \"psr-4\": {
                        \"Virgil\\\\Crypto-$(my.php_project.name:Pascal)\\\\\": \"sources\"
                    }
                },
                \"scripts\": {
                    \"setup-extension\": [
                    ]
                }
            }
            "
        endnew
    endnew
endfunction

function php_create_interface_module (source, destination, wrapper, meta)
endfunction

function php_create_implementation_module (source, destination, wrapper, meta)
endfunction

# ---------------------------------------------------------------------------
#   Create module with PHP class from the abstract 'class' notion.
# ---------------------------------------------------------------------------
function php_create_class_module (class, php_project, meta)
    check_arguments (my, "class, php_project, meta", my)

    echo_info ("Create <php_module/> from class: '$(my.class.name:)'", my)
    
    assert_attribute (my.class, "name", my)

    # Skipping all classes with not public scope
    if my.class.scope <> "public"
        return
    endif

    if string_in (my.class.name, "data, buffer")
        if string_in (my.class.name, "data")
            echo_info ("Generating custom Data module")
            #
        else
            echo_info ("Generating custom Buffer module")
            #
        endif
        return
    endif

    # High level modules 
    new php_module to my.php_project
        .name = php_derive_module_name (my.class, my.php_project)
        if ! string_in (my.class.name, "data, buffer")
            .source_file_name = 0.name + ".php"
            .source_file_path = cat_path (my.php_project.source_dir, 0.source_file_name)
        else
            .source_file_name = "_" + 0.name + ".php2"
            .source_dir = cat_path (my.php_project.source_dir, "_c_bridge")
            .source_file_path = cat_path (0.source_dir, 0.source_file_name)
        endif

        new php_license to php_module
            . = php_format_license (my.php_project->license) ?
        endnew

        new php_class to php_module
            . = php_format_description (my.class) ?
            .name = php_derive_class_name (my.class, my.php_project)
            .low_level_name_c_format = php_derive_class_low_level_name_c_formated (my.class, my.php_project)
            
            if count(my.class.method) > 0
                php_create_class_default_constructor (php_class, my.class, my.php_project, my.meta)
            endif

            if my.class.context ?<> "none" & my.class.lifecycle ?<> "none"
                if ! string_in (my.class.name, "data")
                    php_create_class_default_destructor (php_class, my.class, my.php_project, my.meta)
                endif
            endif

            for my.class.method where method.declaration = "public" & method.scope ?= "public"
                php_create_class_method (my.class, method, php_class, my.php_project, my.meta)
            endfor

        endnew
        
    endnew
    echo_debug ("Done", my)
endfunction

# ---------------------------------------------------------------------------
#   Create default <php_constructor/> that initialize underlying C context.
# ---------------------------------------------------------------------------
function php_create_class_default_constructor (php_class, class, php_project, meta)
    check_arguments (my, "php_class, class, php_project, meta", my)

    new php_constructor to my.php_class
        
        . = "Create underlying C context."
        . = php_format_description (php_constructor)

        new php_code to php_constructor
                my.constructor_body = format_left ("$this->ctx = $(my.php_class.low_level_name_c_format:c)_new_php();")
            . = my.constructor_body
        endnew
    endnew
endfunction

function php_create_enum_module (source, destination, wrapper, meta)
endfunction

function php_finalize_custom_modules (source, destination, wrapper, meta) #[optional]
endfunction

# ===========================================================================
#   Component resolution.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Resolve UIDs for given component and all inner components.
# ---------------------------------------------------------------------------
function php_module_resolve_uids (php_component, parent_uid)
    check_arguments (my, "php_component", my)

    if defined (my.parent_uid) & string.prefixed (my.parent_uid, "php_module")
        my.parent_uid = # Undefined
    endif

    my.component_name = name (my.php_component)
    if  defined (my.parent_uid) & string.prefixed (my.component_name, "php_")
        regexp.match ("php_(.+)", my.component_name, my.component_name)
    endif

    my.php_component.uid = make_id (my.parent_uid, my.component_name, my.php_component.name)

    for my.php_component. as inner_component where is_item (inner_component) & defined (inner_component.name)
        php_module_resolve_uids (inner_component, my.php_component.uid)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Add auto-resolving attributes:
#       - uid.
# ---------------------------------------------------------------------------
function php_module_resolve (php_module, php_project)
    check_arguments (my, "php_module, php_project", my)

    echo_trace ("Resolving <$(name (my.php_module)) name=\"$(my.php_module.name:)\"/>", my)

    assert_attribute (my.php_module, "name", my)

    #   Resolve UIDs
    php_module_resolve_uids (my.php_module)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted module name.
# ---------------------------------------------------------------------------
function php_derive_module_name (type, php_project)
    check_arguments (my, "type, php_project", my)

    assert_attribute (my.type, "name", my)

    return "$(my.type.name:Pascal)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP class.
# ---------------------------------------------------------------------------
function php_derive_class_name (class, php_project)
    check_arguments (my, "class, php_project", my)

    assert_attribute_one_of (my.class, "name", my)

    return php_derive_class_name_str (my.class.name, my.php_project)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP class.
# ---------------------------------------------------------------------------
function php_derive_class_name_str (name, php_project)
    check_arguments (my, "name, php_project", my)

    return "$(my.name:Pascal)"
endfunction

# ---------------------------------------------------------------------------
#   Return C formatted low level name of the PHP class.
# ---------------------------------------------------------------------------
function php_derive_class_low_level_name_c_formated (class, php_project)
    check_arguments (my, "class, php_project", my)

    assert_attribute_one_of (my.class, "name", my)

    return "$(my.php_project.prefix:c)_$(my.class.name:c)"
endfunction

# ---------------------------------------------------------------------------
# Create default <php_destructor/> that destroy underlying C context.
# ---------------------------------------------------------------------------

function php_create_class_default_destructor (php_class, class, php_project, meta)
    check_arguments (my, "php_class, class, php_project, meta", my)

    new php_destructor to my.php_class
        . = "Destroy underlying C context."
        . = php_format_description (php_destructor)

        new php_code to php_destructor
            my.destructor_body = "$(my.php_class.low_level_name_c_format:c)_delete_php($this->ctx);"
            . = my.destructor_body
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_method/> of from the class entity <method/>.
# ---------------------------------------------------------------------------
function php_create_class_method (class, method, destination, php_project, meta)
    check_arguments (my, "class, method, destination, php_project, meta", my)

    #   Create declaration
    my.php_method = php_create_method_declaration (my.class, my.method, my.destination, my.php_project, my.meta)

    new php_code to my.php_method
        my.method_body = ""
        my.method_argument = ""
        my.extension_function = my.php_method.low_level_name + "_php"
        my.is_void = string_in(my.php_method.return_type, "void")
        my.ctx = "$this->ctx"

        for my.php_method.php_argument
            if first()
                my.method_argument += ", "
            endif

            my.method_argument += "$(php_argument.var:)"

            if ! last()
                my.method_argument += ", "
            endif
        endfor

        my.return = ""

        if is_false (my.is_void)
            my.return = "return "
        endif

        my.method_body += "$(my.return:)$(my.extension_function:)($(my.ctx:)$(my.method_argument:));"

        . = my.method_body
    endnew

    return my.php_method
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_method/> with <method/> declaration.
# ---------------------------------------------------------------------------
function php_create_method_declaration (class, method, destination, php_project, meta)
    check_arguments (my, "class, method, destination, php_project, meta", my)

    new php_method to my.destination
        . = php_format_description (my.method) ?
        .name = php_derive_method_name (my.method, my.php_project)
        .low_level_name = class_derive_c_method (my.class, my.method)
        php_map_method_return_info(php_method, my.method)
        .throws_exception = count (my.method.return, string_equal (return.enum, "status"))

        for my.method.argument
            php_create_argument (argument, php_method, my.php_project, my.meta)
        endfor

        return php_method
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_argument/> from the entity <argument/>.
# ---------------------------------------------------------------------------
function php_create_argument (argument, destination, php_project, meta)
    check_arguments (my, "argument, destination, php_project, meta", my)

    assert_attributes (my.argument, "name", my)

    if defined (my.argument.class)
        if ! string_in (my.argument.class, "buffer")
            new php_argument to my.destination
                .var = "$" + php_derive_argument_name (my.argument, "Camel")
                .type = php_derive_argument_type (my.argument)
                return php_argument
            endnew
        endif
    endif
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_derive_argument_name (argument, pretty_print_modifier)
    check_arguments (my, "argument, pretty_print_modifier", my)

    assert_attribute (my.argument, "name", my)

    return php_derive_instance_name (my.argument, my.pretty_print_modifier)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted instance name.
# ---------------------------------------------------------------------------
function php_derive_instance_name (instance, pretty_print_modifier)
    check_arguments (my, "instance, pretty_print_modifier", my)

    assert_attribute (my.instance, "name", my)

    return "$(my.instance.name:$(my.pretty_print_modifier))"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted method name from raw name.
# ---------------------------------------------------------------------------
function php_derive_method_name_str (name)
    check_arguments (my, "name", my)

    return "$(my.name:Camel)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted method name.
# ---------------------------------------------------------------------------
function php_derive_method_name (method, php_project)
    check_arguments (my, "php_project", my)

    return php_derive_method_name_str (my.method.name)
endfunction

# ---------------------------------------------------------------------------
#   Derive PHP ctype from the <instance/> type attributes.
# ---------------------------------------------------------------------------
function php_derive_argument_type (instance)
    check_arguments (my, "instance", my)

    if my.instance.class = "data"
        return "string"
    else
        #TODO RETURN TYPE (FROM CLASS)
        return "_other_return_type_"
    endif
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_map_method_return_info (instance, method)
    check_arguments (my, "instance, method", my)

    my.c = 0
    my.return_data = ""

    for my.method.argument            
        if string_in (argument.class, "buffer")
            my.return_data += php_derive_argument_name(argument, "c")
            my.c = my.c + 1

            if ! last()
                my.return_data += ", "
            endif
        endif
    endfor

    if my.c = 0
        my.instance.return_data = ""
        my.instance.return_type = "void"
    elsif my.c = 1
        my.instance.return_data = "// $(my.return_data:)"
        # TODO! NEED TO BE CHECKED WITH OTHER TYPES
        my.instance.return_type = "string"
    elsif my.c > 1
        my.instance.return_data = "// [$(my.return_data:)]"
        my.instance.return_type = "array"
    endif
endfunction

.endtemplate
