.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for PHP wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Return formatted multiline commented string.
# ---------------------------------------------------------------------------
function php_format_comment (in_comment)
    check_argument (my, "in_comment", my)

    my.str = my.in_comment
    my.str = string_indent (my.str)
    my.str = "* $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)
    my.str = "/**$(terminator)$(my.str:)$(terminator)*/"

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_format_extension_status_exception (enum, prefix)
    check_arguments (my, "enum, prefix", my)

    my.macro_name = "$(my.prefix:UPPER)_HANDLE_STATUS"
    my.func_name = "$(my.prefix:)_handle_throw_exception"

    my.case = ""

    for my.enum.constant as constant where constant.name <> "success"

        my.const = "$(constant.name:c)"
        my.const = "$(my.prefix:)_status_$(my.const:UPPER)"
        my.msg = string_trim(constant.)

        my.case += format_left("\
        case $(my.const:):
            zend_throw_exception(NULL, \"$(my.prefix:UPPER): $(my.msg:)\", $(constant.value:));
            break;
        ", 0)
    endfor

    my.res = format_left("\
        #define $(my.macro_name:)(status)
        do {
            if(status != $(my.prefix:)_status_SUCCESS) {
            $(my.func_name:)(status);
                goto fail;
            }
        } while (false)

        void
        $(my.func_name:)($(my.prefix:)_status_t status) {
            switch(status) {
                $(my.case:)
            }
        }
    ", 0)

    return my.res
endfunction

.endtemplate
