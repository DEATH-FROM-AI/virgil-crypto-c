.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for PHP wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Return formatted multiline commented string.
# ---------------------------------------------------------------------------
function php_format_comment (in_comment)
    check_argument (my, "in_comment", my)

    my.str = my.in_comment
    my.str = string_indent (my.str)
    my.str = "* $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)
    my.str = "/**$(terminator)$(my.str:)$(terminator)*/"

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_format_extension_comment (in_comment)
    check_argument (my, "in_comment", my)

    my.str = my.in_comment
    my.str = string_indent (my.str)
    my.str = "// $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)
    my.str = "//$(terminator)$(my.str:)$(terminator)//"

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_format_high_level_method_body (in_php_method)
    check_argument (my, "in_php_method", my)

    if is_true(my.in_php_method.is_constructor)
        my._arguments = ""
        for my.in_php_method.php_argument as php_argument0
            my._d = ""
            if ! last()
                my._d = ", "
            endif
            my._arguments += php_argument0.name + my._d
        endfor

        my._function_name = my.in_php_method.function_name

        my._res = format_left("\
            $ctx = $(my._function_name:)($(my._arguments:));
            return new $(my.in_php_method.class:Pascal)($ctx);
            ", 0)

    elsif is_true(my.in_php_method.return_interface)

        my._arguments = "$this->ctx"
        my._dd = ", "

        if my.in_php_method.declaration = "public static "
            my._arguments = ""
            my._dd = ""
        endif

        for my.in_php_method.php_argument as php_argument0

            my._arg = php_argument0.name

            if is_true(php_argument0.is_enum)
                my._arg = "$(php_argument0.name:)->getValue()"
            else
                if is_true(php_argument0.instance)
                    my._arg = "$(php_argument0.name:)->getCtx()"
                endif
            endif

            if first() & my._dd <> ""
                my._d = ", "
            endif

            my._d = ""
            if ! last()
                my._d = ", "
            endif

            my._arguments += my._dd + my._arg + my._d
        endfor

        my._function_name = my.in_php_method.function_name

        if ! defined (my.in_php_method.implementation_class0)
            echo_debug_item(my.in_php_method)
            echo_fatal("Not implemented (AH1000)")
        endif

        my._impl_class = "$(my.in_php_method.implementation_class0:Pascal)"

        my._res = format_left("\
            $ctx = $(my._function_name:)($(my._arguments:));
            return $(my._impl_class:)::wrap$(my.in_php_method.return_type:Pascal)($ctx);
            ", 0)
    else 
        my._return = ""

        if my.in_php_method.return_type <> "void"
            my._return = "return "
        endif

        my._cc = count(my.in_php_method.php_argument)

        if my._cc > 0
            my._arguments = "$this->ctx, "
        else
            my._arguments = "$this->ctx"
        endif

        if my.in_php_method.declaration = "public static "
            my._arguments = ""
        endif

        for my.in_php_method.php_argument as php_argument0

            my._arg = php_argument0.name

            if is_true(php_argument0.is_enum)
                my._arg = "$(php_argument0.name:)->getValue()"
            else
                if php_argument0.instance = "1"
                    my._arg = "$(php_argument0.name:)->getCtx()"
                endif
            endif

            my._d = ""
            if ! last()
                my._d = ", "
            endif

            my._arguments += my._arg + my._d
        endfor

        my._function_name = my.in_php_method.function_name

        if is_true(my.in_php_method.return_enum)
            my._res = format_left("\
                $enum = $(my._function_name:)($(my._arguments:));
                return new $(my.in_php_method.return_type:Pascal)($enum);
                ", 0)
        elsif is_true(my.in_php_method.return_class_impl)
            my._res = format_left("\
                $ctx = $(my._function_name:)($(my._arguments:));
                return new $(my.in_php_method.return_type:Pascal)($ctx);
                ", 0)
        else
            my._res = "$(my._return:)$(my._function_name:)($(my._arguments:));"
        endif
    endif

    return my._res
endfunction

# ---------------------------------------------------------------------------
#   
# ---------------------------------------------------------------------------
function php_format_low_level_status_exception (in_enum, in_php_module)
    check_arguments (my, "in_enum, in_php_module", my)

    my._prefix = my.in_php_module.prefix

    my._macro_name = "$(my._prefix:UPPER)_HANDLE_STATUS"
    my._func_name = "$(my._prefix:)_handle_throw_exception"

    my._case = ""

    for my.in_enum.constant as constant0 where constant0.name <> "success"

        my._const = "$(constant0.name:c)"
        my._const = "$(my._prefix:)_status_$(my._const:UPPER)"
        my._msg = enum_constant_format_oneline_description(constant0)

        my._case += format_left("\
        case $(my._const:):
            zend_throw_exception(NULL, \"$(my._prefix:UPPER): $(my._msg:)\", $(constant0.value:));
            break;
        ", 0)
    endfor

    my._case = format_left(my._case, 2)

    my._res = format_left("\
    #define $(my._macro_name:)(status)\
    do {\
        if(status != $(my._prefix:)_status_SUCCESS) {\
            $(my._func_name:)(status);\
        }\
    } while (false)

    void
    $(my._func_name:)($(my._prefix:)_status_t status) {
        switch(status) {
            $(my._case:)
        }
    }
    ", 0)

    return my._res
endfunction

.endtemplate
