.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Module is a XML element that groups functions, structures, constants,
#   enumerations, macroses, etc., that can belong to a different logical
#   components within one physical component.
#
#   Model for source file generation of base C language as well as for all
#   wrapped languages, i.e. Java, C#, GoLang, etc.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "component.gsl"
gsl from "c_formatter.gsl"

function module_add_default_attributes (module)
    check_argument (my, "module")

    my.module.class ?= my.module.name
    my.module.state ?= "draft"
    my.module.scope ?= "public"
endfunction

# ---------------------------------------------------------------------------
#   Resolution function for component 'section'.
#   The principle: inject 'section' component to the children.
# ---------------------------------------------------------------------------
function module_extract_sections (module)
    check_argument (my, "module")

    for my.module.section as parent_section
        for parent_section. as component where defined (name (component) ?)
            new section to component
                .title = parent_section.title
            endnew
            move component before parent_section
        endfor
        delete parent_section
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Resolution entrypoint for component 'module'.
# ---------------------------------------------------------------------------
function module_resolve (module, project)
    check_argument (my, "module")
    check_argument (my, "project")

    assert_attribute (my.module, "name", my)

    echo_trace ("Resolving module: $(my.module.name:)", my)

    module_extract_sections (my.module)

    module_add_default_attributes (my.module)

    component_add_uid (my.module)
    component_add_prefixes (my.module, my.empty_parent, my.project)
    component_add_names (my.module)

    foreach_component_resolve (my.module, my.project)
endfunction


# ---------------------------------------------------------------------------
#   Resolve all 'module' entries within 'source'.
# ---------------------------------------------------------------------------
function foreach_module_resolve (source, project)
    check_argument (my, "source")
    check_argument (my, "project")

    for my.source.module
        module_resolve (module, my.project)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Update context with data from each 'module' within source.
# ---------------------------------------------------------------------------
function foreach_module_update_context (source, context)
    check_argument (my, "source")
    check_argument (my, "context")

    for my.source.module
        component_update_context (module, my.context)

        foreach_component_update_context (module, my.context)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Find module's struct with a given name.
# ---------------------------------------------------------------------------
function module_find_struct (source, module_name, struct_name)
    check_argument (my, "source")
    check_argument (my, "module_name")
    check_argument (my, "struct_name")

    my.module = item_find_named (my.source, "module", my.module_name, my)
    my.struct = item_find_named (my.module, "struct", my.struct_name, my)

    return my.struct
endfunction

# ---------------------------------------------------------------------------
#   Find module's enum with a given name.
# ---------------------------------------------------------------------------
function module_find_enum (source, module_name, enum_name)
    check_argument (my, "source")
    check_argument (my, "module_name")
    check_argument (my, "enum_name")

    my.module = item_find_named (my.source, "module", my.module_name, my)
    my.enum = item_find_named (my.module, "enum", my.enum_name, my)

    return my.enum
endfunction

.endtemplate
