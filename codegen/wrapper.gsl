.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains generic API for wrapper generation for any supported language.
#
#   To add new supported language do next:
#       1. Create file `<lang>.gsl` with methods:
#           - <lang>_create_interface_module(wrapper, source, destination, meta)
#           - <lang>_create_class_module(wrapper, source, destination, meta)
#           - <lang>_module_resolve(wrapper, source)
#           - <lang>_generate_project(wrapper, source)
#           - <lang>_generate_sources(wrapper, source)
#
#       2. Add `gsl from "<lang>.gsl"` to this file.
#       3. Create file `wrapper/wrapper_<lang>.xml`
#       4. Add entity `<wrapper lang="<lang>"/>` to your project.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "swift.gsl"

function wrapper_resolve (wrapper, project)
    check_arguments (my, "wrapper, project", my)

    my.proxy_func = make_id(my.wrapper.lang, "resolve")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper, my.project)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction


function wrapper_foreach_interface_create_module (wrapper, source, destination, meta)
    check_arguments (my, "wrapper, source, destination, meta", my)

    my.proxy_func = make_id(my.wrapper.lang, "create_interface_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.interface
        $(my.proxy_func:) (my.wrapper, interface, my.destination, my.meta)
    endfor
endfunction


function wrapper_foreach_class_create_module (wrapper, source, destination, meta)
    check_arguments (my, "wrapper, source, destination, meta", my)

    my.proxy_func = make_id(my.wrapper.lang, "create_class_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.class
        $(my.proxy_func:) (my.wrapper, class, my.destination, my.meta)
    endfor
endfunction


function wrapper_foreach_module_resolve(wrapper, source)
    check_arguments (my, "wrapper, source", my)

    my.proxy_func = make_id(my.wrapper.lang, "module_resolve")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.$(make_id (my.wrapper.lang, "module")) as wrapper_module
        $(my.proxy_func:) (my.wrapper, wrapper_module)
    endfor
endfunction


function wrapper_generate_project(wrapper, source)
    check_arguments (my, "wrapper, source", my)

    my.proxy_func = make_id(my.wrapper.lang, "generate_project")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper, my.source)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction


function wrapper_generate_sources(wrapper, source)
    check_arguments (my, "wrapper, source", my)

    my.proxy_func = make_id(my.wrapper.lang, "generate_sources")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper, my.source)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction


.endtemplate
