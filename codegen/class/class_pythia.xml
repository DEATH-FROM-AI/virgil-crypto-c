<class name="pythia" context="private">
    Provide Pythia implementation based on the Virgil Security.

    <c_include file="virgil/common/vsc_data.h" scope="public" is_system="1"/>
    <c_include file="virgil/common/vsc_buffer.h" scope="public" is_system="1"/>

    <c_include file="pythia/pythia_init.h" scope="private" is_system="1"/>
    <c_include file="pythia/pythia_wrapper.h" scope="private" is_system="1"/>
    <c_include file="pythia/pythia_buf_sizes.h" scope="private" is_system="1"/>

    <c_include file="mbedtls/ctr_drbg.h" scope="private" is_system="1"/>
    <c_include file="mbedtls/entropy.h" scope="private" is_system="1"/>


    <macros name="buffer from data" definition="private">

        <code>
            #define .(c_class_pythia_macros_buffer_from_data) (X) {.p = (uint8_t *)X.bytes, .allocated = X.len, .len = X.len}
        </code>
    </macros>


    <method name="init" of_class="global" context="none">
        Performs global initialization of the pythia library.
        Must be called once for entire application at startup.
    </method>


    <method name="cleanup" of_class="global" context="none">
        Performs global cleanup of the pythia library.
        Must be called once for entire application before exit.
    </method>


    <method name="blinded password buf len" context="none">
        Return length of the buffer needed to hold 'blinded password'.

        <return type="size"/>
    </method>


    <method name="deblinded password buf len" context="none">
        Return length of the buffer needed to hold 'deblinded password'.

        <return type="size"/>
    </method>


    <method name="blinding secret buf len" context="none">
        Return length of the buffer needed to hold 'blinding secret'.

        <return type="size"/>
    </method>

    <method name="transformation private key buf len" context="none">
        Return length of the buffer needed to hold 'transformation private key'.

        <return type="size"/>
    </method>

    <method name="transformation public key buf len" context="none">
        Return length of the buffer needed to hold 'transformation public key'.

        <return type="size"/>
    </method>

    <method name="transformed password buf len" context="none">
        Return length of the buffer needed to hold 'transformed password'.

        <return type="size"/>
    </method>

    <method name="transformed tweak buf len" context="none">
        Return length of the buffer needed to hold 'transformed tweak'.

        <return type="size"/>
    </method>

    <method name="proof value buf len" context="none">
        Return length of the buffer needed to hold 'proof value'.

        <return type="size"/>
    </method>

    <method name="password update token buf len" context="none">
        Return length of the buffer needed to hold 'password update token'.

        <return type="size"/>
    </method>


    <method name="blind">
        Blinds password. Turns password into a pseudo-random string.
        This step is necessary to prevent 3rd-parties from knowledge of end user's password.

        <argument name="password" class="data"/>
        <argument name="blinded password" class="buffer"/>
        <argument name="blinding secret" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="deblind">
        Deblinds 'transformed password' value with previously returned 'blinding secret' from blind().

        <argument name="transformed password" class="data"/>
        <argument name="blinding secret" class="data"/>
        <argument name="deblinded password" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="compute transformation key pair">
        Computes transformation private and public key.

        <argument name="transformation key id" class="data"/>
        <argument name="pythia secret" class="data"/>
        <argument name="pythia scope secret" class="data"/>
        <argument name="transformation private key" class="buffer"/>
        <argument name="transformation public key" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="transform">
        Transforms blinded password using transformation private key.

        <argument name="blinded password" class="data"/>
        <argument name="tweak" class="data"/>
        <argument name="transformation private key" class="data"/>
        <argument name="transformed password" class="buffer"/>
        <argument name="transformed tweak" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="prove">
        Generates proof that server possesses secret values that were used to transform password.

        <argument name="transformed_password" class="data"/>
        <argument name="blinded_password" class="data"/>
        <argument name="transformed_tweak" class="data"/>
        <argument name="transformation_private_key" class="data"/>
        <argument name="transformation_public_key" class="data"/>
        <argument name="proof_value_c" class="buffer"/>
        <argument name="proof_value_u" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="verify">
        This operation allows client to verify that the output of transform() is correct,
        assuming that client has previously stored transformation public key.

        <argument name="transformed password" class="data"/>
        <argument name="blinded password" class="data"/>
        <argument name="tweak" class="data"/>
        <argument name="transformation public key" class="data"/>
        <argument name="proof value c" class="data"/>
        <argument name="proof value u" class="data"/>

        <return type="error"/>
    </method>


    <method name="get password update token">
        Rotates old transformation key to new transformation key and generates 'password update token',
        that can update 'deblinded password'(s).

        This action should increment version of the 'pythia scope secret'.

        <argument name="previous transformation private key" class="data"/>
        <argument name="new transformation private key" class="data"/>
        <argument name="password update token" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="update deblinded with token">
        Updates previously stored 'deblinded password' with 'password update token'.
        After this call, 'transform()' called with new arguments will return corresponding values.

        <argument name="deblinded password" class="data"/>
        <argument name="password update token" class="data"/>
        <argument name="updated deblinded password" class="buffer"/>

        <return type="error"/>
    </method>


    <method name="random handler" context="none" declaration="private">
        Callback for the pythia random.

        <argument name="out" type="data" access="writeonly"/>
        <argument name="out len" type="integer"/>
        <argument name="ctx" type="nothing" access="readwrite" is_reference="1"/>
    </method>
</class>
