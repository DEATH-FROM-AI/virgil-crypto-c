.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Shared Implementation Public API'.
#   Private function prefix is: L24.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "meta.gsl"

gsl from "c_resolver.gsl"

# ---------------------------------------------------------------------------
#   Add opaque declaration for generic 'implementation' type.
# ---------------------------------------------------------------------------
function _L24_add_type_self (module, meta)
    check_argument (my, "module")
    check_argument (my, "meta")

    new struct to my.module
        . = "Generic type for any 'implementation'."
        .name = ""
        .visibility = "public"
        .scope = "external"
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add type that enumerates all possible implementations within crypto.
# ---------------------------------------------------------------------------
function _L24_add_enum_tag (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    new enum to my.destination
        . = "Enumerates all possible implementations within crypto library."

        .name = my.names.enum_tag
        .class = my.names.class_impl

        new value
            .name = my.names.enum_value_begin
            .value = 0
        endnew

        new value
            .name = my.names.enum_value_end
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add method that return 'API' with implementation's meta information.
# ---------------------------------------------------------------------------
function _L24_add_method_get_api (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "\
        Return 'API' object that is fulfiled with a meta information
        specific to the given implementation object.
        Or NULL if object does not implement requested 'API'.
        "

        .name = my.names.class_api

        new return
            .type = my.refs.class_api_struct
            .is_object = 1
        endnew

        c_method_add_argument_impl (method)

        new argument
            .name = my.names.argument_api_tag
            .type = my.refs.class_api_enum_tag
        endnew

        new precondition
            .binary = "less_then"
            new uid
                .name = my.refs.class_api_enum_tag_value_begin
            endnew

            new argument
                .name = my.names.argument_api_tag
            endnew
        endnew

        new precondition
            .binary = "less_then"
            new argument
                .name = my.names.argument_api_tag
            endnew

            new uid
                .name = my.refs.class_api_enum_tag_value_end
            endnew
        endnew

        new c_implementation
            . = "\
            $(c_ref ("class_assert_macros")) \
                    ($(my.refs.c_argument_impl)->$(my.refs.c_property_info));

            if ($(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_api_array) == NULL) {
                return NULL;
            }

            for (const $(my.refs.c_class_api_struct) * const *$(my.refs.c_property_api_array) = \
                    $(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_api_array); \
                    *$(my.refs.c_property_api_array) != NULL; \
                    ++$(my.refs.c_property_api_array)) { \

                const $(my.refs.c_class_api_struct)* $(my.names.class_api:c) = \
                        *$(my.refs.c_property_api_array);

                if ($(my.names.class_api:c)->$(my.refs.c_property_api_tag) == \
                        $(my.refs.c_argument_api_tag))
                    return  $(my.names.class_api:c);
                }
            }

            return NULL;
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add method that return unique 'Implementation TAG'.
# ---------------------------------------------------------------------------
function _L24_add_method_get_tag (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "\Return unique 'Implementation TAG'."

        .name = my.names.enum_tag

        new return
            .type = my.refs.class_impl_enum_tag
        endnew

        c_method_add_argument_impl (method)

        new precondition
            .unary = "not_null_obj"
            new uid
                .name = "$(my.refs.argument_impl)->$(my.refs.property_info)"
            endnew
        endnew

        new c_implementation
            . = "
            return $(my.refs.c_argument_impl)->\
                    $(my.refs.c_property_info)->$(my.refs.c_property_impl_tag);
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that proxy 'cleanup' action to the implementation object.
# ---------------------------------------------------------------------------
function _L24_add_method_cleanup (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "$(my.names.method_cleanup:Neat) implementation object and it's dependencies."

        .name = my.names.method_cleanup

        c_method_add_argument_impl (method)

        new c_implementation
            . = "\
            $(c_ref ("class_assert_macros")) \
                    ($(my.refs.c_argument_impl)->$(my.refs.c_property_info));
            $(c_ref ("class_assert_macros")) \
                    ($(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_self_cleanup_cb));

            $(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_self_cleanup_cb) ($(my.refs.c_argument_impl));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that proxy 'destroy' action to the implementation object.
# ---------------------------------------------------------------------------
function _L24_add_method_destroy (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "
        $(my.names.method_destroy:Neat) implementation object and it's dependencies.
        Note, do '$(my.names.method_cleanup)' before '$(my.names.method_destroy)'.
        "

        .name = my.names.method_destroy

        c_method_add_argument_impl (method)

        new c_implementation
            . = "\
            $(c_ref ("class_assert_macros")) \
                    ($(my.refs.c_argument_impl)->$(my.refs.c_property_info));
            $(c_ref ("class_assert_macros")) \
                    ($(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_self_destroy_cb));

            $(my.refs.c_argument_impl)-> \
                    $(my.refs.c_property_info)-> \
                    $(my.refs.c_property_self_destroy_cb) ($(my.refs.c_argument_impl));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with functionality common for all 'implementation' objects.
# ---------------------------------------------------------------------------
function c_module_impl_create (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    new module to my.destination
        . = "\
        This module contains common functionality for all 'implementation' object.
        It is also enumerate all available implementations within crypto libary.
        "
        .name = my.names.module_impl
        .class = my.names.class_impl

        new require
            .module = my.names.module_library
        endnew

        new require
            .module = my.names.module_api
        endnew

        new require
            .module = my.names.module_api_private
            .scope = "private"
        endnew

        _L24_add_type_self (module, my.meta)
        _L24_add_enum_tag (module, my.meta)
        _L24_add_method_get_api (module, my.meta)
        _L24_add_method_get_tag (module, my.meta)
        _L24_add_method_cleanup (module, my.meta)
        _L24_add_method_destroy (module, my.meta)

        for module.method
            c_method_add_preconditions (method)
        endfor
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return enumeration type for implementations within given destination.
# ---------------------------------------------------------------------------
function c_module_impl_find_enum_tag (destination, meta)
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    my.module = my.destination->module (name = my.names.module_impl) ?
    if ! defined (my.module)
        echo_fatal ("Module '$(my.names.module_impl:)' \
                is not found within given destination.", my)
    endif

    my.enum = my.module->enum (name = my.names.enum_tag) ?
    if ! defined (my.enum)
        echo_fatal ("Enum '$(my.names.enum_tag:)' \
                is not found within module '$(my.names.module_impl:)'.", my)
    endif

    return my.enum
endfunction

.endtemplate
