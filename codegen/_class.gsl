# ---------------------------------------------------------------------------
function class_calculate_dependencies_fingerprint(project, class)
    check_arguments(my, "project, class")

    new dependencies
        .project_prefix = my.project.prefix
        .initial_class_fingerprint = fingerprint(my.class)
        .license_fingerprint = fingerprint(my.project->license)
        if is_true(my.class.forcegen)
            time.now(.date, .time)
        endif

        my.fingerprint = fingerprint(dependencies)
        delete dependencies
        return my.fingerprint
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Entry point
# ---------------------------------------------------------------------------
function class_process(project, class_link)
    check_arguments(my, "project, class_link", my)
    assert_attribute(my.class_link, "name", my)

    echo_info("[L1] Class '$(my.class_link.name:)' - start processing", my)

    my.class = class_load(my.project, my.class_link.name)
    my.cached_class = cache_load_or_invalidate(my.project, my.class) ?
    my.class.fingerprint = class_calculate_dependencies_fingerprint(my.project, my.class)

    if defined(my.cached_class)
        echo_trace("[L1] Class '$(my.class.name:)' - cache detected", my)
    else
        echo_trace("[L1] Class '$(my.class.name:)' - full update required", my)
    endif


    if !fingerprint_is_equal(my.class, my.cached_class)
        #class_verify(my.class)
        #class_setup_defaults(my.project, my.class)
    endif

    echo_trace("[L1] Class '$(my.class.name:)' - process children", my)

    cache_store(my.project, my.class)
    echo_info("[L1] Class '$(my.class_link.name:)' - accomplished", my)
endfunction

# ---------------------------------------------------------------------------
#   Multi-thread entry point
# ---------------------------------------------------------------------------
if main.multithread
    thread.receive(sending_thread, _project, _class_link)
    class_process(_project, _class_link)
endif
