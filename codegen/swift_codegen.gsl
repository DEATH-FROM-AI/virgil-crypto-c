.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Functions for Swift primitives generation: protocol, class, enum, etc.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"
gsl from "common.gsl"

# ===========================================================================
#   Format.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Return formatted list of arguments without braces.
# ---------------------------------------------------------------------------
function swift_format_argument_list (swift_method)
    check_arguments (my, "swift_method", my)

    for my.swift_method.swift_argument
        my.arg_list ?= ""
        my.arg_list += "$(swift_argument.name:): $(swift_argument.type:)"
        if ! last()
            my.arg_list += ", "
        endif
    endfor

    return my.arg_list
endfunction

# ---------------------------------------------------------------------------
#   Return formatted list of returned value(s).
# ---------------------------------------------------------------------------
function swift_format_return_list (swift_method)
    check_arguments (my, "swift_method", my)

    my.is_tuple = count (my.swift_method.swift_return) > 1 ?? "1" ? "0"

    for my.swift_method.swift_return
        my.return_list ?= ""

        if my.is_tuple
            my.return_list += "$(swift_return.name:): $(swift_return.type:)"
        else
            my.return_list += "$(swift_return.type:)"
        endif

        if ! last()
            my.return_list += ", "
        endif
    endfor

    if defined (my.return_list) & my.is_tuple
        my.return_list = "(" + my.return_list + ")"
    endif

    if defined (my.return_list)
        my.return_list = " -> " + my.return_list
    endif

    return my.return_list
endfunction


# ===========================================================================
#   Generate.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Insert given multiline code.
# ---------------------------------------------------------------------------
function swift_insert_code (code, tab_count)
    check_argument (my, "code", my)

    my.code = "$(my.code:left,no)"
    my.code = string_trim (my.code)
    my.code = code_collapse_spaces (my.code)

    my.code = string_indent (my.code, my.tab_count)
    my.code = string_multi_rtrim (my.code)

    out (my.code)
endfunction

# ---------------------------------------------------------------------------
#   Insert description of the given object.
# ---------------------------------------------------------------------------
function swift_insert_description (obj, tab_count)
    my.desciption = my.obj. ?
    my.tab_count ?= 0
    if string_empty (my.desciption)
        return
    endif
    swift_insert_code (my.desciption, my.tab_count)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted multiline commented string.
# ---------------------------------------------------------------------------
function swift_format_comment (str)
    if ! defined (my.str)
        return
    endif

    my.str = string_indent (my.str)
    my.str = "/// $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   Return multiline formatted string with license.
# ---------------------------------------------------------------------------
function swift_format_license(license)
    return swift_format_comment (my.license) ?
endfunction

# ---------------------------------------------------------------------------
#   Insert: license + caution + description
# ---------------------------------------------------------------------------
function swift_insert_prologue (swift_module)
    check_arguments (my, "swift_module", my)

    assert_item (my.swift_module, "swift_license", my)

    swift_insert_description (my.swift_module->swift_license)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: import
# ---------------------------------------------------------------------------
function swift_insert_import (swift_import)
    check_arguments (my, "swift_import", my)

    assert_attribute (my.swift_import, "framework", my)

    swift_insert_code ("import $(my.swift_import.framework:)")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: property
# ---------------------------------------------------------------------------
function swift_insert_protocol_property (swift_property)
    check_arguments (my, "swift_property", my)

    assert_attributes (my.swift_property, "name, type, visibility", my)

    my.property_modifiers = (my.swift_property.access = "readonly") ?? "{ get }" ? "{ get set }"

    swift_insert_code("\
        @objc var $(my.swift_property.name:): $(my.swift_property.type:) $(my.property_modifiers:);
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: method
# ---------------------------------------------------------------------------
function swift_insert_protocol_method (swift_method)
    check_arguments (my, "swift_method", my)

    assert_attributes (my.swift_method, "name", my)

    my.method_modifiers = ""
    my.method_args = swift_format_argument_list(my.swift_method) ?
    my.method_return = swift_format_return_list(my.swift_method) ?
    my.method_throws = my.swift_method.throws ?? "throws" ?

    swift_insert_code("\
        @objc func $(my.method_modifiers:) $(my.swift_method.name:)($(my.method_args?:)) $(my.method_throws?:) \
                $(my.method_return?:)
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: protocol
# ---------------------------------------------------------------------------
function swift_insert_protocol (swift_protocol)
    check_arguments (my, "swift_protocol", my)

    assert_attributes (my.swift_protocol, "name, objc_name, visibility", my)

    for my.swift_protocol.swift_inherit
        my.swift_inheritance_list ?= ": "
        my.swift_inheritance_list += swift_inherit.type
        if ! last()
            my.swift_inheritance_list += ", "
        endif
    endfor

    swift_insert_description(my.swift_protocol)
    swift_insert_code ("\
        @objc($(my.swift_protocol.objc_name:)) $(my.swift_protocol.visibility:) protocol $(my.swift_protocol.name:) \
                $(my.swift_inheritance_list?:) {
    ")

    for my.swift_protocol.swift_property
        swift_insert_protocol_property (swift_property)
    endfor

    for my.swift_protocol.swift_method
        swift_insert_protocol_method (swift_method)
    endfor

    swift_insert_code ("}")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class
# ---------------------------------------------------------------------------
function swift_insert_class (swift_class)
    check_arguments (my, "swift_class", my)

    assert_attributes (my.swift_class, "name, objc_name, visibility", my)

    echo_trace ("Inserting class: " + my.swift_class.name)
endfunction

# ---------------------------------------------------------------------------
#   Generate project files.
# ---------------------------------------------------------------------------
function swift_generate_project (wrapper, source)
    check_arguments (my, "wrapper, source", my)

endfunction

# ---------------------------------------------------------------------------
#   Generate source files from <swift_module/> entities.
# ---------------------------------------------------------------------------
function swift_generate_sources (wrapper, source)
    check_arguments (my, "wrapper, source", my)

    assert_attribute (my.wrapper, "source_dir", my)

    if -1 = directory.create (my.wrapper.source_dir)
        echo_fatal ("Can not create directory: $(my.wrapper.source_dir:)")
    endif

    for my.source.swift_module
        echo_trace ("Generate Swift files from <$(name (swift_module)) name = \"$(c_module.name:)\"/>", my)

        output swift_module.source_file_path

        swift_insert_prologue (swift_module)
        newline(2)

        for swift_module.swift_import
            swift_insert_import (swift_import)
            newline()
        endfor

        for swift_module.swift_enum
            swift_insert_enum (swift_enum)
            newline()
        endfor

        for swift_module.swift_protocol
            swift_insert_protocol (swift_protocol)
            newline()
        endfor

        for swift_module.swift_class
            swift_insert_class (swift_class)
            newline()
        endfor

        for swift_module.swift_struct
            swift_insert_struct (swift_struct)
            newline()
        endfor

        for swift_module.swift_extension
            swift_insert_extension (swift_extension)
            newline()
        endfor
    endfor
endfunction

.endtemplate
