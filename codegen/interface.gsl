.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This module contains functions processing component 'interface'.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "project_common.gsl"


# ---------------------------------------------------------------------------
#   Check required attribute: name.
# ---------------------------------------------------------------------------
function interface_require_attr_name (component, caller)
    check_argument (my, "component", my)

    assert_attribute (my.component, "name", my.caller ? my)
endfunction

# ---------------------------------------------------------------------------
#   Resolve component: constant.
# ---------------------------------------------------------------------------
function interface_resolve_constant (constant, parent)
    check_arguments (my, "constant, parent", my)

    my.constant.type ?= "size"
endfunction

# ---------------------------------------------------------------------------
#   Resolve attribute: method.context.
#   Redefine default value of 'method.context' to 'impl' for interface.
# ---------------------------------------------------------------------------
function interface_resolve_method_attr_context (method, parent)
    check_arguments (my, "method, parent", my)

    my.method.context ?= "impl"
endfunction

# ---------------------------------------------------------------------------
#   Resolve component: method.
# ---------------------------------------------------------------------------
function interface_resolve_method (method, parent)
    check_arguments (my, "method, parent", my)

    interface_resolve_method_attr_context (my.method, my.parent)
endfunction


# ---------------------------------------------------------------------------
#   Resolve model: interface.
# ---------------------------------------------------------------------------
function interface_resolve (interface, project)
    check_arguments (my, "interface, project", my)

    echo_trace ("Resolving interface: $(my.interface.name:)", my)

    interface_require_attr_name (my.interface, my)

    my.interface.project = my.project.name
    my.interface.c_prefix ?= my.project.name

    for my.interface.constant
        interface_resolve_constant (constant, my.interface)
    endfor

    for my.interface.method
        interface_resolve_method (method, my.interface)
    endfor

    project_common_resolve_dependecies_for (my.interface)
endfunction

# ---------------------------------------------------------------------------
#   Traverse interfaces within source and perform complete resolution.
# ---------------------------------------------------------------------------
function foreach_interface_resolve (source, project)
    check_arguments (my, "source, project", my)

    for my.source.interface
        interface_resolve (interface, my.project)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Find interface by it's name within given source.
# ---------------------------------------------------------------------------
function interface_find (name, source)
    check_arguments (my, "name, source", my)

    my.interface = my.source->interface (name = my.name) ?
    if ! defined (my.interface)
        echo_fatal ("Interface '$(my.name)' is not found within given source.", my)
    endif

    return my.interface
endfunction

# ---------------------------------------------------------------------------
#   Create 'meta entity' for each interface within source.
# ---------------------------------------------------------------------------
function foreach_interface_update_meta (source, meta)
    check_arguments (my, "source, meta", my)

    for my.source.interface
        meta_add_interface (my.meta, interface)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Add 'interface api' argument to the destination.
# ---------------------------------------------------------------------------
function interface_create_api_argument (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    meta_reset_active_entity (my.meta, my.interface.name)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    my.api_argument = item_prepend_new ("argument", my.destination)
    my.api_argument.name = my.names.interface_struct_api
    my.api_argument.class = my.refs.interface_struct_api

    return my.api_argument
endfunction

# ---------------------------------------------------------------------------
#   Create 'feature' for given 'interface'.
# ---------------------------------------------------------------------------
function interface_create_feature (interface, destination)
    check_arguments (my, "interface, destination", my)

    new feature to my.destination
        . = "Enable interface '$(my.interface.name)'."
        .name = my.interface.name
        .project = my.interface.project

        for my.interface.inherit
            new require to feature
                .feature = inherit.interface
            endnew
        endfor

        for my.interface.require where defined (0.feature)
            copy require to feature
        endfor
    endnew
endfunction

# ---------------------------------------------------------------------------
#   For each 'interface' within 'source' create 'feature'.
# ---------------------------------------------------------------------------
function foreach_interface_create_feature (source, destination)
    check_arguments (my, "source, destination", my)

    for my.source.interface
        interface_create_feature (interface, my.destination)
    endfor
endfunction

.endtemplate
