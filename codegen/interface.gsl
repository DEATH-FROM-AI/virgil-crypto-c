.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This module contains functions processing component 'interface'.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "component.gsl"


function _F19_check_required_attributes (interface)
    check_argument (my, "interface")
    assert_attribute (my.interface, "name", my)
endfunction


function _F19_set_default_attributes (interface)
    check_argument (my, "interface")

    my.interface.state ?= "draft"
endfunction

function interface_resolve (interface, project)
    check_argument (my, "interface")
    check_argument (my, "project")

    echo_trace ("Resolving interface: $(my.interface.name:)", my)

    _F19_check_required_attributes (my.interface)
    _F19_set_default_attributes (my.interface)

    foreach_component_resolve (my.interface, my.project)
endfunction

# ---------------------------------------------------------------------------
#   Traverse interfaces within root and perform complete resolution.
# ---------------------------------------------------------------------------
function foreach_interface_resolve (root, project)
    check_argument (my, "root")
    check_argument (my, "project")

    for my.root.interface
        interface_resolve (interface, my.project)
    endfor

endfunction

# ---------------------------------------------------------------------------
#   Find interface by it's name within given scope.
# ---------------------------------------------------------------------------
function interface_find (interface_name, search_scope)
    check_argument (my, "interface_name")
    check_argument (my, "search_scope")

    my.interface = my.search_scope->interface (name = my.interface_name) ?
    if ! defined (my.interface)
        echo_fatal ("Interface '$(my.interface_name)' is not found within given scope.", my)
    endif

    return my.interface
endfunction

# ---------------------------------------------------------------------------
#   Create 'meta entity' for each interface within source.
# ---------------------------------------------------------------------------
function foreach_interface_update_meta (source, meta)
    check_argument (my, "source")
    check_argument (my, "meta")

    for my.source.interface
        meta_add_interface (my.meta, interface)
    endfor
endfunction

.endtemplate
