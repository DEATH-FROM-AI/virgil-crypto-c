.template 0

gsl from "common.gsl"
gsl from "js_helpers.gsl"

function js_cpp_header_create_ifndef(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#ifndef $(my.name:no)", my.indent_levels.first)
endfunction

function js_cpp_header_create_define(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#define $(my.name:no)", my.indent_levels.first)
endfunction

function js_cpp_header_create_includes(parent, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.parent.cpp_umbrella_header:no)\"", my.indent_levels.first)
endfunction

function js_cpp_header_create_endif(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#endif", my.indent_levels.first)
endfunction

function js_cpp_header_create_public_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("public:", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("private:", my.indent_levels.first)
endfunction

function js_cpp_header_create_init(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(global.js_cpp_init_function_name:no)($(global.js_cpp_init_function_argument_type:no) $(global.js_cpp_init_function_argument_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_constructors(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)();", my.indent_levels.first)
  js_out("$(my.js_class_module.cpp_name:no)($(my.js_class_module.c_context_type:no) $(my.js_class_module.c_context_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_get_implementation_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_implementation_type:no) $(global.js_cpp_implementation_getter:no)();", my.indent_levels.first)
endfunction

function js_cpp_header_create_context_property(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_context_type:no) $(my.js_class_module.c_context_name:no);", my.indent_levels.first)
endfunction

function js_cpp_header_create_new(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(global.js_cpp_constructor_function_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_method(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(my.js_method.cpp_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_destructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("~$(my.js_class_module.cpp_name:no)();", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_properties(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static Nan::Persistent<v8::Function> $(global.js_cpp_persistent_constructor_name:no);", my.indent_levels.first)
endfunction

function js_cpp_header_create_class_inheritance(js_class_module)
  my.inheritance = "public Nan::ObjectWrap"
  for my.js_class_module.js_interface_implementation
    my.inheritance += ", public $(js_interface_implementation.cpp_class_name:no)"
  endfor
  return my.inheritance
endfunction

function js_cpp_header_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_class_module.cpp_name:no) : $(js_cpp_header_create_class_inheritance(my.js_class_module)) {", my.indent_levels.first)
  js_cpp_header_create_public_access_specifier(my.indent_levels.first)
  js_cpp_header_create_init(my.indent_levels.second)
  if my.js_class_module.has_context
    js_cpp_header_create_constructors(my.js_class_module, my.indent_levels.second)
    js_cpp_header_create_context_property(my.js_class_module, my.indent_levels.second)
  endif
  if count(my.js_class_module.js_interface_implementation) > 0
    js_cpp_header_create_get_implementation_method(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_header_create_private_access_specifier(my.indent_levels.first)
  js_cpp_header_create_new(my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_cpp_header_create_method(js_dependency->js_method, my.indent_levels.second)
  endfor
  for my.js_class_module.js_method
    js_cpp_header_create_method(js_method, my.indent_levels.second)
  endfor
  if my.js_class_module.has_context
    js_cpp_header_create_destructor(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_header_create_private_properties(my.indent_levels.second)
  js_out("};", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_argument(cpp_argument)
  if my.cpp_argument.type = global.js_cpp_argument_type_variable
    if defined(my.cpp_argument.cast)
      if my.cpp_argument.cast = "data_length"
        return "$(my.cpp_argument.name).len"
      else
        echo_fatal("Unknown 'cpp_argument.cast'", my)
      endif
    endif
    return my.cpp_argument.name
  elsif my.cpp_argument.type = global.js_cpp_argument_type_constant
    return my.cpp_argument.constant
  else
    echo_fatal("Unknown 'cpp_argument.type'", my)
  endif
endfunction

function js_cpp_format_js_arguments(parent)
  my.arguments = ""
  for my.parent.js_argument
    my.arguments += js_argument.cpp_name
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_js_arguments_with_context(parent, js_class_module)
  my.arguments = "$(my.js_class_module.instance_name:no)->$(my.js_class_module.c_context_name:no)"
  if count(my.parent.js_argument) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_js_arguments(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_format_js_proxies(parent)
  my.arguments = ""
  for my.parent.js_proxy
    if defined(js_proxy.cpp_name)
      my.arguments += js_proxy.cpp_name
    elsif defined(js_proxy.constant)
      my.arguments += js_proxy.constant
    endif
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_js_proxies_with_context(parent, js_class_module)
  my.arguments = "$(my.js_class_module.instance_name:no)->$(my.js_class_module.c_context_name:no)"
  if count(my.parent.js_proxy) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_js_proxies(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_format_cpp_arguments(parent)
  my.arguments = ""
  for my.parent.cpp_argument
    my.arguments += js_cpp_create_cpp_argument(cpp_argument)
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_cpp_arguments_with_context(parent, cpp_class)
  my.arguments = "$(js_cpp_class_instance_name(my.cpp_class))->$(my.cpp_class.context_name)"
  if count(my.parent.cpp_argument) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_cpp_arguments(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_create_header_include(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.js_class_module->js_cpp_header.name:no)\"", my.indent_levels.first)
endfunction

function js_cpp_create_init(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(global.js_cpp_init_function_name:no)($(global.js_cpp_init_function_argument_type:no) $(global.js_cpp_init_function_argument_name:no)) {", my.indent_levels.first)
  js_out("Nan::HandleScope scope;", my.indent_levels.second)
  js_out("v8::Local<v8::FunctionTemplate> function_template = Nan::New<v8::FunctionTemplate>($(my.js_class_module.cpp_name:no)::$(global.js_cpp_constructor_function_name:no));", my.indent_levels.second)
  js_out("function_template->SetClassName(Nan::New(\"$(my.js_class_module.binding_name:no)\").ToLocalChecked());", my.indent_levels.second)
  js_out("function_template->InstanceTemplate()->SetInternalFieldCount(1);", my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_out("Nan::SetPrototypeMethod(function_template, \"$(js_dependency->js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_dependency->js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  for my.js_class_module.js_method where js_method.is_static
    js_out("Nan::SetMethod(function_template, \"$(js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  for my.js_class_module.js_method where !js_method.is_static
    js_out("Nan::SetPrototypeMethod(function_template, \"$(js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  js_out("$(my.js_class_module.cpp_name:no)::$(global.js_cpp_persistent_constructor_name:no).Reset(function_template->GetFunction());", my.indent_levels.second)
  js_out("$(global.js_cpp_init_function_argument_name:no)->Set(Nan::New<v8::String>(\"$(my.js_class_module.binding_name:no)\").ToLocalChecked(), function_template->GetFunction());", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_new(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(global.js_cpp_constructor_function_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no)) {", my.indent_levels.first)
  js_out("if ($(global.js_cpp_callback_info_name:no).IsConstructCall()) {", my.indent_levels.second)
  js_out("$(my.js_class_module.cpp_name:no)* $(my.js_class_module.instance_name:no) = new $(my.js_class_module.cpp_name:no)();", my.indent_levels.third)
  js_out("$(my.js_class_module.instance_name:no)->Wrap($(global.js_cpp_callback_info_name:no).This());", my.indent_levels.third)
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set($(global.js_cpp_callback_info_name:no).This());", my.indent_levels.third)
  js_out("} else {", my.indent_levels.second)
  js_out("Nan::ThrowTypeError(\"Class constructor cannot be invoked without 'new'\");", my.indent_levels.third)
  js_out("}", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_unwrap_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)* $(my.js_class_module.instance_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_class_module.cpp_name:no)>($(global.js_cpp_callback_info_name:no).Holder());", my.indent_levels.first)
endfunction

function js_cpp_create_js_size_call_argument(js_size_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("size_t $(my.js_size_call_argument.cpp_name:no) = Nan::To<uint32_t>($(global.js_cpp_callback_info_name:no)[$(my.js_size_call_argument.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_js_integer_call_argument(js_integer_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("int32_t $(my.js_integer_call_argument.cpp_name:no) = Nan::To<int32_t>($(global.js_cpp_callback_info_name:no)[$(my.js_integer_call_argument.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_js_unsigned_call_argument(js_unsigned_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("uint32_t $(my.js_unsigned_call_argument.cpp_name:no) = Nan::To<uint32_t>($(global.js_cpp_callback_info_name:no)[$(my.js_unsigned_call_argument.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_js_boolean_call_argument(js_boolean_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("bool $(my.js_boolean_call_argument.cpp_name:no) = Nan::To<bool>($(global.js_cpp_callback_info_name:no)[$(my.js_boolean_call_argument.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_js_byte_call_argument(js_byte_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("byte* $(my.js_byte_call_argument.cpp_name:no) = node::Buffer::Data($(global.js_cpp_callback_info_name:no)[$(my.js_byte_call_argument.index:no)]);", my.indent_levels.first)
endfunction

function js_cpp_create_js_char_call_argument(js_char_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("char* $(my.js_char_call_argument.cpp_name:no) = Nan::Utf8String($(global.js_cpp_callback_info_name:no)[$(my.js_char_call_argument.index:no)]);", my.indent_levels.first)
endfunction

function js_cpp_create_js_data_call_argument(js_data_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_data_t $(my.js_data_call_argument.cpp_name:no) = vsc_data_from_str(node::Buffer::Data($(global.js_cpp_callback_info_name:no)[$(my.js_data_call_argument.index:no)]), node::Buffer::Length($(global.js_cpp_callback_info_name:no)[$(my.js_data_call_argument.index:no)]));", my.indent_levels.first)
endfunction

function js_cpp_create_js_enum_call_argument(js_enum_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  /* js_out("$(my.cpp_enum_call_argument.c_type:no) $(my.js_enum_call_argument.cpp_name:no) = ($(my.cpp_enum_call_argument.c_type:no))Nan::To<int32_t>($(global.js_cpp_callback_info_name:no)[$(my.js_enum_call_argument.index:no)]).FromJust();", my.indent_levels.first) */
endfunction

function js_cpp_create_js_class_call_argument(js_class_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_call_argument.c_context_type) $(my.js_class_call_argument.cpp_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_class_call_argument.cpp_class_name:no)>($(global.js_cpp_callback_info_name:no)[$(my.js_class_call_argument.index:no)])->$(my.js_class_call_argument.c_context_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_interface_call_argument(js_interface_call_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_interface_call_argument.c_implementation_type:no) $(my.js_interface_call_argument.cpp_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_interface_call_argument.cpp_class_name:no)>($(global.js_cpp_callback_info_name:no)[$(my.js_interface_call_argument.index:no)])->$(global.js_cpp_implementation_getter:no)();", my.indent_levels.first)
endfunction

function js_cpp_create_js_call_arguments(js_method, indent_level)
  for my.js_method.js_size_call_argument
    js_cpp_create_js_size_call_argument(js_size_call_argument, my.indent_level)
  endfor
  for my.js_method.js_integer_call_argument
    js_cpp_create_js_integer_call_argument(js_integer_call_argument, my.indent_level)
  endfor
  for my.js_method.js_unsigned_call_argument
    js_cpp_create_js_unsigned_call_argument(js_unsigned_call_argument, my.indent_level)
  endfor
  for my.js_method.js_boolean_call_argument
    js_cpp_create_js_boolean_call_argument(js_boolean_call_argument, my.indent_level)
  endfor
  for my.js_method.js_byte_call_argument
    js_cpp_create_js_byte_call_argument(js_byte_call_argument, my.indent_level)
  endfor
  for my.js_method.js_char_call_argument
    js_cpp_create_js_char_call_argument(js_char_call_argument, my.indent_level)
  endfor
  for my.js_method.js_data_call_argument
    js_cpp_create_js_data_call_argument(js_data_call_argument, my.indent_level)
  endfor
  for my.js_method.js_enum_call_argument
    js_cpp_create_js_enum_call_argument(js_enum_call_argument, my.indent_level)
  endfor
  for my.js_method.js_class_call_argument
    js_cpp_create_js_class_call_argument(js_class_call_argument, my.indent_level)
  endfor
  for my.js_method.js_interface_call_argument
    js_cpp_create_js_interface_call_argument(js_interface_call_argument, my.indent_level)
  endfor
endfunction

function js_cpp_create_js_error_status_method_return(js_error_status_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_error_status_method_return.c_type:no) $(my.js_error_status_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_error_context_method_return(js_error_context_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_error_context_method_return.c_type:no) $(my.js_error_context_method_return.cpp_name:no);", my.indent_levels.first)
  js_out("$(my.js_error_context_method_return.c_reset_method_name:no)(&$(my.js_error_context_method_return.cpp_name:no));", my.indent_levels.first)
endfunction

function js_cpp_create_js_size_method_return(js_size_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("size_t $(my.js_size_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_integer_method_return(js_integer_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("int32_t $(my.js_integer_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_unsigned_method_return(js_unsigned_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("uint32_t $(my.js_unsigned_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_boolean_method_return(js_boolean_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("bool $(my.js_boolean_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_byte_method_return(js_byte_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("byte* $(my.js_byte_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_data_method_return(js_data_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_data_t $(my.js_data_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_buffer_method_return(js_buffer_method_return, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.js_buffer_method_return->js_buffer_size)
    my.js_buffer_size = my.js_buffer_method_return->js_buffer_size
    if my.js_buffer_size.type = global.js_js_buffer_size_type_constant
      js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_constant_name:no);", my.indent_levels.first)
    elsif my.js_buffer_size.type = global.js_js_buffer_size_type_method
      if my.js_class_module.has_context
        js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_method_name:no)($(js_cpp_format_js_proxies_with_context(my.js_buffer_size, my.js_class_module))));", my.indent_levels.first)
      else
        js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_method_name:no)($(js_cpp_format_js_proxies(my.js_buffer_size))));", my.indent_levels.first)
      endif
    endif
    js_out("byte* $(my.js_buffer_size.cpp_bytes_name:no) = new byte[$(my.js_buffer_size.cpp_name:no)];", my.indent_levels.first)
    js_out("vsc_buffer_t* $(my.js_buffer_method_return.cpp_name:no) = vsc_buffer_new();", my.indent_levels.first)
    js_out("vsc_buffer_use($(my.js_buffer_method_return.cpp_name:no), $(my.js_buffer_size.cpp_bytes_name:no), $(my.js_buffer_size.cpp_name:no));", my.indent_levels.first)
  else
    js_out("vsc_buffer_t* $(my.js_buffer_method_return.cpp_name:no);", my.indent_levels.first)
  endif
endfunction

function js_cpp_create_js_enum_method_return(js_enum_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_enum_method_return.c_type:no) $(my.js_enum_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_class_method_return(js_class_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_method_return.c_context_type:no) $(my.js_class_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_interface_method_return(js_interface_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_interface_method_return.c_implementation_type:no) $(my.js_interface_method_return.cpp_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_js_method_returns(js_method, js_class_module, indent_level)
  for my.js_method.js_error_status_method_return
    js_cpp_create_js_error_status_method_return(js_error_status_method_return, my.indent_level)
  endfor
  for my.js_method.js_error_context_method_return
    js_cpp_create_js_error_context_method_return(js_error_context_method_return, my.indent_level)
  endfor
  for my.js_method.js_size_method_return
    js_cpp_create_js_size_method_return(js_size_method_return, my.indent_level)
  endfor
  for my.js_method.js_integer_method_return
    js_cpp_create_js_integer_method_return(js_integer_method_return, my.indent_level)
  endfor
  for my.js_method.js_unsigned_method_return
    js_cpp_create_js_unsigned_method_return(js_unsigned_method_return, my.indent_level)
  endfor
  for my.js_method.js_boolean_method_return
    js_cpp_create_js_boolean_method_return(js_boolean_method_return, my.indent_level)
  endfor
  for my.js_method.js_byte_method_return
    js_cpp_create_js_byte_method_return(js_byte_method_return, my.indent_level)
  endfor
  for my.js_method.js_data_method_return
    js_cpp_create_js_data_method_return(js_data_method_return, my.indent_level)
  endfor
  for my.js_method.js_buffer_method_return
    js_cpp_create_js_buffer_method_return(js_buffer_method_return, my.js_class_module, my.indent_level)
  endfor
  for my.js_method.js_enum_method_return
    js_cpp_create_js_enum_method_return(js_enum_method_return, my.indent_level)
  endfor
  for my.js_method.js_class_method_return
    js_cpp_create_js_class_method_return(js_class_method_return, my.indent_level)
  endfor
  for my.js_method.js_interface_method_return
    js_cpp_create_js_interface_method_return(js_interface_method_return, my.indent_level)
  endfor
endfunction

function js_cpp_create_method_call(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.assignment = ""
  if defined(my.js_method->js_method_call_return)
    my.assignment = "$(my.js_method->js_method_call_return.cpp_name:no) = "
  endif
  my.arguments = ""
  if my.js_class_module.has_context & !my.js_method.is_static
    my.arguments = js_cpp_format_js_arguments_with_context(my.js_method, my.js_class_module)
  else
    my.arguments = js_cpp_format_js_arguments(my.js_method)
  endif
  js_out("$(my.assignment)$(my.js_method.c_name:no)($(my.arguments:no));", my.indent_levels.first)
endfunction

function js_cpp_create_method_error_handing(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.js_method.js_error_context_method_return
    js_out("$(js_error_context_method_return.c_status_type:no) $(js_error_context_method_return.cpp_status_name:no) = $(js_error_context_method_return.c_status_method_name:no)(&$(js_error_context_method_return.cpp_name:no));", my.indent_levels.first)
    js_out("$(js_error_context_method_return.cpp_class_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(js_error_context_method_return.cpp_status_name:no));", my.indent_levels.first)
  endfor
  for my.js_method.js_error_status_method_return
    js_out("$(js_error_status_method_return.cpp_class_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(js_error_status_method_return.cpp_name:no));", my.indent_levels.first)
  endfor
endfunction

function js_cpp_create_js_size_method_return_result(js_size_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::New<v8::Number>($(my.js_size_method_return.cpp_name:no))"
endfunction

function js_cpp_create_js_integer_method_return_result(js_integer_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::New<v8::Number>($(my.js_integer_method_return.cpp_name:no))"
endfunction

function js_cpp_create_js_unsigned_method_return_result(js_unsigned_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::New<v8::Number>($(my.js_unsigned_method_return.cpp_name:no))"
endfunction

function js_cpp_create_js_boolean_method_return_result(js_boolean_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::New<v8::Boolean>($(my.js_boolean_method_return.cpp_name:no))"
endfunction

function js_cpp_create_js_byte_method_return_result(js_byte_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "/* TODO: js_byte_method_return */"
endfunction

function js_cpp_create_js_data_method_return_result(js_data_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::NewBuffer((char*)$(my.js_data_method_return.cpp_name:no).bytes, $(my.js_data_method_return.cpp_name:no).len).ToLocalChecked()"
endfunction

function js_cpp_create_js_buffer_method_return_result(js_buffer_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.js_buffer_method_return->js_buffer_size)
    return "Nan::NewBuffer((char*)$(my.js_buffer_method_return->js_buffer_size.cpp_bytes_name:no), vsc_buffer_len($(my.js_buffer_method_return.cpp_name:no))).ToLocalChecked()"
  else
    return "Nan::NewBuffer((char*)vsc_buffer_bytes($(my.js_buffer_method_return.cpp_name:no)), vsc_buffer_len($(my.js_buffer_method_return.cpp_name:no))).ToLocalChecked()"
  endif
endfunction

function js_cpp_create_js_enum_method_return_result(js_enum_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "Nan::New<v8::Number>((int)$(my.js_enum_method_return.cpp_name:no))"
endfunction

function js_cpp_create_js_class_method_return_result(js_class_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.instance_name = "$(my.js_class_method_return.cpp_name:no)_instance"
  js_out("$(my.js_class_method_return.cpp_class_name:no)* $(my.instance_name:no) = new $(my.js_class_method_return.cpp_class_name:no)($(my.js_class_method_return.cpp_name:no));", my.indent_levels.first)
  return "$(my.instance_name:no)->handle()"
endfunction

function js_cpp_create_js_interface_method_return_result(js_interface_method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  return "$(my.js_interface_method_return.cpp_implementation_resolver_name:no)::$(my.js_interface_method_return.cpp_implementation_resolver_method_name:no)($(my.js_interface_method_return.cpp_name:no))"
endfunction

function js_cpp_create_method_return_multiple_item(argument, method_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("js_result_object->Set(Nan::New<v8::String>(\"$(my.argument.js_name:no)\").ToLocalChecked(), $(my.method_return:no));", my.indent_levels.first)
endfunction

function js_cpp_create_method_return_multiple(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("Nan::EscapableHandleScope scope;", my.indent_levels.first)
  js_out("v8::Local<v8::Object> js_result_object = Nan::New<v8::Object>();", my.indent_levels.first)
  for my.js_method.js_size_method_return
    my.method_return = js_cpp_create_js_size_method_return_result(js_size_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_size_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_integer_method_return
    my.method_return = js_cpp_create_js_integer_method_return_result(js_integer_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_integer_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_unsigned_method_return
    my.method_return = js_cpp_create_js_unsigned_method_return_result(js_unsigned_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_unsigned_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_boolean_method_return
    my.method_return = js_cpp_create_js_boolean_method_return_result(js_boolean_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_boolean_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_byte_method_return
    my.method_return = js_cpp_create_js_byte_method_return_result(js_byte_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_byte_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_data_method_return
    my.method_return = js_cpp_create_js_data_method_return_result(js_data_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_data_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_buffer_method_return
    my.method_return = js_cpp_create_js_buffer_method_return_result(js_buffer_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_buffer_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_enum_method_return
    my.method_return = js_cpp_create_js_enum_method_return_result(js_enum_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_enum_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_class_method_return
    my.method_return = js_cpp_create_js_class_method_return_result(js_class_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_class_method_return, my.method_return, my.indent_levels.first)
  endfor
  for my.js_method.js_interface_method_return
    my.method_return = js_cpp_create_js_interface_method_return_result(js_interface_method_return, my.indent_levels.first)
    js_cpp_create_method_return_multiple_item(js_interface_method_return, my.method_return, my.indent_levels.first)
  endfor
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set(scope.Escape(js_result_object));", my.indent_levels.first)
endfunction

function js_cpp_create_method_return_one(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.js_method->js_size_method_return)
    my.method_return = js_cpp_create_js_size_method_return_result(my.js_method->js_size_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_integer_method_return)
    my.method_return = js_cpp_create_js_integer_method_return_result(my.js_method->js_integer_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_unsigned_method_return)
    my.method_return = js_cpp_create_js_unsigned_method_return_result(my.js_method->js_unsigned_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_boolean_method_return)
    my.method_return = js_cpp_create_js_boolean_method_return_result(my.js_method->js_boolean_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_byte_method_return)
    my.method_return = js_cpp_create_js_byte_method_return_result(my.js_method->js_byte_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_data_method_return)
    my.method_return = js_cpp_create_js_data_method_return_result(my.js_method->js_data_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_buffer_method_return)
    my.method_return = js_cpp_create_js_buffer_method_return_result(my.js_method->js_buffer_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_enum_method_return)
    my.method_return = js_cpp_create_js_enum_method_return_result(my.js_method->js_enum_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_class_method_return)
    my.method_return = js_cpp_create_js_class_method_return_result(my.js_method->js_class_method_return, my.indent_levels.first)
  elsif defined(my.js_method->js_interface_method_return)
    my.method_return = js_cpp_create_js_interface_method_return_result(my.js_method->js_interface_method_return, my.indent_levels.first)
  endif
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set($(my.method_return:no));", my.indent_levels.first)
endfunction

function js_cpp_create_method_return(js_method, js_class_module, indent_level)
  if count(my.js_method.js_method_return) > 1
    js_cpp_create_method_return_multiple(my.js_method, my.js_class_module, my.indent_level)
  elsif count(my.js_method.js_method_return) = 1
    js_cpp_create_method_return_one(my.js_method, my.js_class_module, my.indent_level)
  endif
endfunction

function js_cpp_create_method(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(my.js_method.cpp_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no)) {", my.indent_levels.first)
  if !my.js_method.is_static
    js_cpp_create_unwrap_class(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_create_js_call_arguments(my.js_method, my.indent_levels.second)
  js_cpp_create_js_method_returns(my.js_method, my.js_class_module, my.indent_levels.second)
  js_cpp_create_method_call(my.js_method, my.js_class_module, my.indent_levels.second)
  js_cpp_create_method_error_handing(my.js_method, my.indent_levels.second)
  js_cpp_create_method_return(my.js_method, my.js_class_module, my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)

  js_out("$(my.js_class_module.cpp_name:no)::$(my.js_class_module.cpp_name:no)() {", my.indent_levels.first)
  js_out("$(my.js_class_module.c_context_name:no) = $(my.js_class_module.c_context_constructor:no)();", my.indent_levels.second)
  js_out("}", my.indent_levels.first)

  js_out("$(my.js_class_module.cpp_name:no)::$(my.js_class_module.cpp_name:no)($(my.js_class_module.c_context_type:no) $(my.js_class_module.c_context_name:no)) {", my.indent_levels.first)
  js_out("this->$(my.js_class_module.c_context_name:no) = $(my.js_class_module.c_context_name:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_get_implementation_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_implementation_type:no) $(my.js_class_module.cpp_name:no)::$(global.js_cpp_implementation_getter:no)() {", my.indent_levels.first)
  js_out("return $(my.js_class_module.c_implementation_method_name:no)($(my.js_class_module.c_context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_destructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)::~$(my.js_class_module.cpp_name:no)() {", my.indent_levels.first)
  js_out("$(my.js_class_module.c_context_destructor:no)(&$(my.js_class_module.c_context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_persistent_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("Nan::Persistent<v8::Function> $(my.js_class_module.cpp_name:no)::$(global.js_cpp_persistent_constructor_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_cpp_create_init(my.js_class_module, my.indent_levels.first)
  if my.js_class_module.has_context
    js_cpp_create_new(my.js_class_module, my.indent_levels.first)
    js_cpp_create_constructor(my.js_class_module, my.indent_levels.first)
    js_cpp_create_destructor(my.js_class_module, my.indent_levels.first)
  endif
  if count(my.js_class_module.js_interface_implementation) > 0
    js_cpp_create_get_implementation_method(my.js_class_module, my.indent_levels.first)
  endif
  for my.js_class_module.js_dependency
    js_cpp_create_method(js_dependency->js_method, my.js_class_module, my.indent_levels.first)
  endfor
  for my.js_class_module.js_method
    js_cpp_create_method(js_method, my.js_class_module, my.indent_levels.first)
  endfor
  js_cpp_create_persistent_constructor(my.js_class_module, my.indent_levels.firsts.first)
endfunction

function js_format_method_paraments(js_method)
  my.parameters = ""
  for my.js_method.js_argument
    my.parameters += js_argument.js_name
    if !last()
      my.parameters += ", "
    endif
  endfor
  return my.parameters
endfunction

function js_format_js_arguments(js_method)
  arguments = ""
  for my.js_method.js_argument
    if js_argument.type = "class" | js_argument.type = "interface"
      arguments += "$(js_argument.js_name:no).$(global.js_binding_property_name:no)"
    else
      arguments += js_argument.js_name
    endif
    if !last()
      arguments += ", "
    endif
  endfor
  return arguments
endfunction

function js_create_requires(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("const $(global.js_js_umbrella_module:no) = require('bindings')('./$(my.js_class_module.umbrella_js_source:no)');", my.indent_levels.first)
endfunction

function js_create_constant(js_constant, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static get $(my.js_constant.js_name:no)() {", my.indent_levels.first)
  js_out("return $(my.js_constant.value:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_create_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("constructor(binding) {", my.indent_levels.first)
  js_out("this.$(global.js_binding_property_name:no) = binding || new $(global.js_js_umbrella_module:no).$(my.js_class_module.binding_name:no)();", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_format_js_dependency_parameters(js_class_module)
  my.result = ""
  for my.js_class_module.js_dependency
    my.result += js_dependency->js_method->js_argument.js_name
    if !last()
      my.result += ", "
    endif
  endfor
  return my.result
endfunction

function js_create_static_create_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.instance_name = "instance"
  js_out("static create($(js_format_js_dependency_parameters(my.js_class_module))) {", my.indent_levels.first)
  js_out("const $(my.instance_name:no) = new $(my.js_class_module.js_name:no)();", my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_out("$(my.instance_name:no).$(js_dependency->js_method.js_name:no)($(js_dependency->js_method->js_argument.js_name:no));", my.indent_levels.second)
  endfor
  js_out("return $(my.instance_name:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_create_method_return(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.binding = my.js_method.is_static ?? "$(global.js_js_umbrella_module:no).$(my.js_class_module.binding_name:no)" ? "this.$(global.js_binding_property_name:no)"
  my.method_call = "$(my.binding:no).$(my.js_method.js_name:no)($(js_format_js_arguments(my.js_method)))"
  if defined(my.js_method->js_method_call_return) & my.js_method->js_method_call_return.type = global.js_js_method_call_return_type_class
    js_out("return new $(my.js_method->js_method_call_return.js_class_name:no)($(my.method_call:no));", my.indent_levels.first)
  else
    js_out("return $(my.method_call:no);", my.indent_levels.first)
  endif
endfunction

function js_create_method(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if my.js_method.is_static
    js_out("static $(my.js_method.js_name:no)($(js_format_method_paraments(my.js_method))) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class_module, my.indent_levels.second)
  else
    js_out("$(my.js_method.js_name:no)($(js_format_method_paraments(my.js_method))) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class_module, my.indent_levels.second)
  endif
  js_out("}", my.indent_levels.first)
endfunction

function js_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_class_module.js_name:no) {", my.indent_levels.first)
  for my.js_class_module.js_constant
    js_create_constant(js_constant, my.indent_levels.second)
  endfor
  if my.js_class_module.has_context
    js_create_constructor(my.js_class_module, my.indent_levels.second)
    js_create_static_create_method(my.js_class_module, my.indent_levels.second)
  endif
  for my.js_class_module.js_dependency
    js_create_method(js_dependency->js_method, my.js_class_module, my.indent_levels.second)
  endfor
  for my.js_class_module.js_method
    js_create_method(js_method, my.js_class_module, my.indent_levels.second)
  endfor
  js_out("}", my.indent_levels.first)
endfunction

function js_create_export_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("module.exports.$(my.js_class_module.js_name:no) = $(my.js_class_module.js_name:no);", my.indent_levels.first)
endfunction

function js_create_js_class_module_cpp_header(js_class_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_class_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_class_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_class_module, my.indent_levels.first)
    js_cpp_header_create_class(my.js_class_module, my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_class_module_cpp_source(js_class_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_cpp_source.path
    js_cpp_create_header_include(my.js_class_module, my.indent_levels.first)
    js_cpp_create_class(my.js_class_module, my.indent_levels.first)
  close
endfunction

function js_create_js_class_module_js_source(js_class_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_source.path
    js_create_requires(my.js_class_module, my.indent_levels.first)
    js_create_class(my.js_class_module, my.indent_levels.first)
    js_create_export_class(my.js_class_module, my.indent_levels.first)
  close
endfunction

function js_create_js_class_module(js_class_module, wrapper_project)
  js_create_js_class_module_cpp_header(my.js_class_module)
  js_create_js_class_module_cpp_source(my.js_class_module)
  js_create_js_class_module_js_source(my.js_class_module, my.wrapper_project)
endfunction

function js_create_js_enum_module(js_enum_module)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  output my.js_enum_module->js_source.path
    js_out("const $(my.js_enum_module.js_name:no) = {", my.indent_levels.first)
    for my.js_enum_module.js_enum_value
      my.value = "$(js_enum_value.js_name:no): $(js_enum_value.value:no)"
      if !last()
        my.value += ","
      endif
      js_out(my.value, my.indent_levels.second)
    endfor
    js_out("};", my.indent_levels.first)
    js_out("module.exports.$(my.js_enum_module.js_name:no) = $(my.js_enum_module.js_name:no);", my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module_cpp_header(js_error_status_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_error_status_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_error_status_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_error_status_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_error_status_module, my.indent_levels.first)
    js_out("class $(my.js_error_status_module.cpp_name:no) {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("static void $(global.js_cpp_handle_error_status_method_name:no)($(my.js_error_status_module.c_type:no) $(global.js_cpp_handle_error_status_method_parameter_name:no));", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module_cpp_source(js_error_status_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_error_status_module->js_cpp_source.path
    js_out("#include \"$(my.js_error_status_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    js_out("static void $(my.js_error_status_module.cpp_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(my.js_error_status_module.c_type:no) $(global.js_cpp_handle_error_status_method_parameter_name:no)) {", my.indent_levels.first)
    js_out("switch ($(global.js_cpp_handle_error_status_method_parameter_name:no)) {", my.indent_levels.second)
    for my.js_error_status_module.js_error_status
      js_out("case $(js_error_status.c_name:no):", my.indent_levels.third)
      js_out("Nan::ThrowError(\"$(js_error_status.message:no)\");", my.indent_levels.fourth)
      js_out("break;", my.indent_levels.fourth)
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module(js_error_status_module)
  js_create_js_error_status_module_cpp_header(my.js_error_status_module)
  js_create_js_error_status_module_cpp_source(my.js_error_status_module)
endfunction

function js_create_js_interface_module(js_interface_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_interface_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_interface_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_interface_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_interface_module, my.indent_levels.first)
    js_out("class $(my.js_interface_module.cpp_name:no) : public Nan::ObjectWrap {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("virtual $(my.js_interface_module.c_implementation_type) $(global.js_cpp_implementation_getter:no)() = 0;", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module_cpp_header(js_implementation_resolver_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_resolver_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_implementation_resolver_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_implementation_resolver_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_implementation_resolver_module, my.indent_levels.first)
    js_out("class $(my.js_implementation_resolver_module.cpp_name:no) {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("static v8::Local<v8::Object> $(my.js_implementation_resolver_module.cpp_method_name:no)($(my.js_implementation_resolver_module.c_implementation_type:no)* $(my.js_implementation_resolver_module.cpp_method_parameter_name:no));", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module_cpp_source(js_implementation_resolver_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_resolver_module->js_cpp_source.path
    js_out("#include \"$(my.js_implementation_resolver_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    js_out("static v8::Local<v8::Object> $(my.js_implementation_resolver_module.cpp_name:no)::$(my.js_implementation_resolver_module.cpp_method_name:no)($(my.js_implementation_resolver_module.c_implementation_type:no)* $(my.js_implementation_resolver_module.cpp_method_parameter_name:no)) {", my.indent_levels.first)
    js_out("switch ($(my.js_implementation_resolver_module.c_method_tag:no)($(my.js_implementation_resolver_module.cpp_method_parameter_name:no))) {", my.indent_levels.second)
    for my.wrapper_project.js_module where defined(js_module->js_class_module) & defined(js_module->js_class_module.c_implementation_tag)
      my.class_module = js_module->js_class_module
      my.instance_name = "instance"
      js_out("case $(my.class_module.c_implementation_tag:no):", my.indent_levels.third)
      js_out("$(my.class_module.c_context_type:no) $(my.class_module.c_context_name:no) = $(my.class_module.c_context_constructor:no)();", my.indent_levels.fourth)
      js_out("$(my.class_module.c_restore_alg_info:no)($(my.class_module.c_context_name:no), $(global.js_cpp_resolve_implementation_method_parameter_name:no));", my.indent_levels.fourth)
      js_out("$(my.class_module.cpp_name:no)* $(my.instance_name:no) = new $(my.class_module.cpp_name:no)($(my.class_module.c_context_name:no));", my.indent_levels.fourth)
      js_out("return $(my.instance_name:no)->handle();", my.indent_levels.fourth)
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module(js_implementation_resolver_module, wrapper_project)
  js_create_js_implementation_resolver_module_cpp_header(my.js_implementation_resolver_module)
  js_create_js_implementation_resolver_module_cpp_source(my.js_implementation_resolver_module, my.wrapper_project)
endfunction

function js_create_js_umbrella_module_cpp_header(js_umbrella_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_umbrella_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_umbrella_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_umbrella_module.cpp_header_guard, my.indent_levels.first)
    js_out("#include <nan.h>", my.indent_levels.first)
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_library
      js_out("#include <$(js_project_require.c_namespace_dir:no)$(js_project_require.c_umbrella_header:no)>", my.indent_levels.first)
    endfor
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_relative
      js_out("#include \"$(js_project_require.project_dir:no)/$(js_project_require.umbrella_cpp_header:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_class_module)
      js_out("#include \"$(js_module->js_class_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_interface_module)
      js_out("#include \"$(js_module->js_interface_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_error_status_module)
      js_out("#include \"$(js_module->js_error_status_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_implementation_resolver_module)
      js_out("#include \"$(js_module->js_implementation_resolver_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_umbrella_module_js_source(js_umbrella_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_umbrella_module->js_source.path
    js_out("module.exports = Object.assign(", my.indent_levels.first)
    js_out("{},", my.indent_levels.second)
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_relative
      js_out("{ $(js_project_require.js_project_name:no): require('$(js_project_require.project_dir:no)/$(js_project_require.umbrella_js_source:no)') },", my.indent_levels.second)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_class_module)
      js_out("require('./$(js_module->js_class_module->js_source.name:no)'),", my.indent_levels.second)
    endfor
    js_out(");", my.indent_levels.first)
  close
endfunction

function js_create_js_umbrella_module(js_umbrella_module, wrapper_project)
  js_create_js_umbrella_module_cpp_header(my.js_umbrella_module, my.wrapper_project)
  js_create_js_umbrella_module_js_source(my.js_umbrella_module, my.wrapper_project)
endfunction

function js_create_js_root_module_cpp_source(js_root_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_root_module->js_cpp_source.path
    js_out("#include \"$(my.wrapper_project->js_module->js_umbrella_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    js_out("void InitAll(v8::Local<v8::Object> exports) {", my.indent_levels.first)
    for my.wrapper_project.js_module where defined(js_module->js_class_module)
      js_out("$(js_module->js_class_module.cpp_name:no)::$(global.js_cpp_init_function_name:no)(exports);", my.indent_levels.second)
    endfor
    js_out("}", my.indent_levels.first)
    js_out("NODE_MODULE(addon, InitAll);", my.indent_levels.first)
  close
endfunction

function js_create_js_root_module_js_source(js_root_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_root_module->js_source.path
    js_out("module.exports = Object.assign(", my.indent_levels.first)
    js_out("{},", my.indent_levels.second)
    for my.wrapper_project.js_module where (defined(js_module->js_class_module) | defined(js_module->js_enum_module))
      if defined(js_module->js_class_module)
        my.require = "require('./$(js_module->js_class_module->js_source.name:no)')"
      else
        my.require = "require('./$(js_module->js_enum_module->js_source.name:no)')"
      endif
      if !last()
        my.require += ","
      endif
      js_out(my.require, my.indent_levels.second)
    endfor
    js_out(");", my.indent_levels.first)
  close
endfunction

function js_create_js_root_module(js_root_module, wrapper_project)
  js_create_js_root_module_cpp_source(my.js_root_module, my.wrapper_project)
  js_create_js_root_module_js_source(my.js_root_module, my.wrapper_project)
endfunction

endtemplate
