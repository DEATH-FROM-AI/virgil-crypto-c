.template 0

gsl from "common.gsl"
gsl from "js_constants.gsl"
gsl from "js_helpers.gsl"

function js_cpp_header_create_ifndef(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#ifndef $(my.name:no)", my.indent_levels.first)
endfunction

function js_cpp_header_create_define(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#define $(my.name:no)", my.indent_levels.first)
endfunction

function js_cpp_header_create_includes(parent, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.parent.cpp_umbrella_header:no)\"", my.indent_levels.first)
endfunction

function js_cpp_header_create_endif(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#endif", my.indent_levels.first)
endfunction

function js_cpp_header_create_public_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("public:", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("private:", my.indent_levels.first)
endfunction

function js_cpp_header_create_init(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(global.js_cpp_init_function_name:no)($(global.js_cpp_init_function_argument_type:no) $(global.js_cpp_init_function_argument_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_constructors(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)();", my.indent_levels.first)
  js_out("$(my.js_class_module.cpp_name:no)($(my.js_class_module.c_context_type:no)* $(my.js_class_module.c_context_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_get_implementation_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_implementation_type:no)* $(my.js_class_module.cpp_implementation_method_name:no)();", my.indent_levels.first)
endfunction

function js_cpp_header_create_context_property(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_context_type:no)* $(my.js_class_module.c_context_name:no);", my.indent_levels.first)
endfunction

function js_cpp_header_create_new(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(global.js_cpp_constructor_function_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_method(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(my.js_method.cpp_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no));", my.indent_levels.first)
endfunction

function js_cpp_header_create_destructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("~$(my.js_class_module.cpp_name:no)();", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_properties(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static Nan::Persistent<v8::Function> $(global.js_cpp_persistent_constructor_name:no);", my.indent_levels.first)
endfunction

function js_cpp_header_format_class_inheritance(js_class_module)
  my.inheritance = "public Nan::ObjectWrap"
  if count(my.js_class_module.js_interface_implementation)
    return "public $(my.js_class_module.cpp_implementation_class_name:no)"
  endif
  return my.inheritance
endfunction

function js_cpp_header_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_class_module.cpp_name:no) : $(js_cpp_header_format_class_inheritance(my.js_class_module)) {", my.indent_levels.first)
  js_cpp_header_create_public_access_specifier(my.indent_levels.first)
  js_cpp_header_create_init(my.indent_levels.second)
  if my.js_class_module.has_context
    js_cpp_header_create_constructors(my.js_class_module, my.indent_levels.second)
    js_cpp_header_create_context_property(my.js_class_module, my.indent_levels.second)
  endif
  if count(my.js_class_module.js_interface_implementation)
    js_cpp_header_create_get_implementation_method(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_header_create_private_access_specifier(my.indent_levels.first)
  js_cpp_header_create_new(my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_cpp_header_create_method(js_dependency->js_method, my.indent_levels.second)
  endfor
  for my.js_class_module.js_method
    js_cpp_header_create_method(js_method, my.indent_levels.second)
  endfor
  if my.js_class_module.has_context
    js_cpp_header_create_destructor(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_header_create_private_properties(my.indent_levels.second)
  js_out("};", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_argument(cpp_argument)
  if my.cpp_argument.type = global.js_cpp_argument_type_variable
    if defined(my.cpp_argument.cast)
      if my.cpp_argument.cast = "data_length"
        return "$(my.cpp_argument.name).len"
      else
        echo_fatal("Unknown 'cpp_argument.cast'", my)
      endif
    endif
    return my.cpp_argument.name
  elsif my.cpp_argument.type = global.js_cpp_argument_type_constant
    return my.cpp_argument.constant
  else
    echo_fatal("Unknown 'cpp_argument.type'", my)
  endif
endfunction

function js_cpp_format_js_arguments(parent)
  my.arguments = ""
  for my.parent.js_argument
    if defined(js_argument.access) & js_argument.access = global.js_argument_access_disown
      my.arguments += "&$(js_argument.cpp_name:no)"
    else
      my.arguments += js_argument.cpp_name
    endif
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_js_arguments_with_context(parent, js_class_module)
  my.arguments = "$(my.js_class_module.instance_name:no)->$(my.js_class_module.c_context_name:no)"
  if count(my.parent.js_argument) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_js_arguments(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_format_js_proxies(parent)
  my.arguments = ""
  for my.parent.js_proxy
    if defined(js_proxy.cpp_name)
      my.arguments += js_proxy.cpp_name
    elsif defined(js_proxy.constant)
      my.arguments += js_proxy.constant
    endif
    if defined(js_proxy.cast_type)
      if js_proxy.cast_type = global.js_proxy_cast_type_data_len
        my.arguments += ".$(js_proxy.c_property_name:no)"
      endif
    endif
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_js_proxies_with_context(parent, js_class_module)
  my.arguments = "$(my.js_class_module.instance_name:no)->$(my.js_class_module.c_context_name:no)"
  if count(my.parent.js_proxy) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_js_proxies(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_format_cpp_arguments(parent)
  my.arguments = ""
  for my.parent.cpp_argument
    my.arguments += js_cpp_create_cpp_argument(cpp_argument)
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_cpp_arguments_with_context(parent, cpp_class)
  my.arguments = "$(js_cpp_class_instance_name(my.cpp_class))->$(my.cpp_class.context_name)"
  if count(my.parent.cpp_argument) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_cpp_arguments(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_create_header_include(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.js_class_module->js_cpp_header.name:no)\"", my.indent_levels.first)
endfunction

function js_cpp_create_init(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(global.js_cpp_init_function_name:no)($(global.js_cpp_init_function_argument_type:no) $(global.js_cpp_init_function_argument_name:no)) {", my.indent_levels.first)
  js_out("Nan::HandleScope scope;", my.indent_levels.second)
  js_out("v8::Local<v8::FunctionTemplate> function_template = Nan::New<v8::FunctionTemplate>($(my.js_class_module.cpp_name:no)::$(global.js_cpp_constructor_function_name:no));", my.indent_levels.second)
  js_out("function_template->SetClassName(Nan::New(\"$(my.js_class_module.binding_name:no)\").ToLocalChecked());", my.indent_levels.second)
  js_out("function_template->InstanceTemplate()->SetInternalFieldCount(1);", my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_out("Nan::SetPrototypeMethod(function_template, \"$(js_dependency->js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_dependency->js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  for my.js_class_module.js_method where js_method.is_static
    js_out("Nan::SetMethod(function_template, \"$(js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  for my.js_class_module.js_method where !js_method.is_static
    js_out("Nan::SetPrototypeMethod(function_template, \"$(js_method.js_name:no)\", $(my.js_class_module.cpp_name:no)::$(js_method.cpp_name:no));", my.indent_levels.second)
  endfor
  js_out("$(my.js_class_module.cpp_name:no)::$(global.js_cpp_persistent_constructor_name:no).Reset(function_template->GetFunction());", my.indent_levels.second)
  js_out("$(global.js_cpp_init_function_argument_name:no)->Set(Nan::New<v8::String>(\"$(my.js_class_module.binding_name:no)\").ToLocalChecked(), function_template->GetFunction());", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_new(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(global.js_cpp_constructor_function_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no)) {", my.indent_levels.first)
  js_out("if ($(global.js_cpp_callback_info_name:no).IsConstructCall()) {", my.indent_levels.second)
  js_out("$(my.js_class_module.cpp_name:no)* $(my.js_class_module.instance_name:no) = new $(my.js_class_module.cpp_name:no)();", my.indent_levels.third)
  js_out("$(my.js_class_module.instance_name:no)->Wrap($(global.js_cpp_callback_info_name:no).This());", my.indent_levels.third)
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set($(global.js_cpp_callback_info_name:no).This());", my.indent_levels.third)
  js_out("} else {", my.indent_levels.second)
  js_out("Nan::ThrowTypeError(\"Class constructor cannot be invoked without 'new'\");", my.indent_levels.third)
  js_out("}", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_unwrap_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)* $(my.js_class_module.instance_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_class_module.cpp_name:no)>($(global.js_cpp_callback_info_name:no).Holder());", my.indent_levels.first)
endfunction

function js_cpp_create_size_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("size_t $(my.js_argument.cpp_name:no) = Nan::To<uint32_t>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_integer_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("int64_t $(my.js_argument.cpp_name:no) = Nan::To<int64_t>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_unsigned_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("uint32_t $(my.js_argument.cpp_name:no) = Nan::To<uint32_t>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_boolean_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("bool $(my.js_argument.cpp_name:no) = Nan::To<bool>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_byte_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("byte $(my.js_argument.cpp_name:no) = *node::Buffer::Data($(global.js_cpp_callback_info_name:no)[$(my.index:no)]);", my.indent_levels.first)
endfunction

function js_cpp_create_char_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("char* $(my.js_argument.cpp_name:no) = *Nan::Utf8String($(global.js_cpp_callback_info_name:no)[$(my.index:no)]);", my.indent_levels.first)
endfunction

function js_cpp_create_data_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_data_t $(my.js_argument.cpp_name:no) = vsc_data_from_str(node::Buffer::Data($(global.js_cpp_callback_info_name:no)[$(my.index:no)]), node::Buffer::Length($(global.js_cpp_callback_info_name:no)[$(my.index:no)]));", my.indent_levels.first)
endfunction

function js_cpp_create_buffer_js_argument(js_argument, js_class_module, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.js_buffer_size = my.js_argument->js_buffer_size
  if my.js_buffer_size.type = global.js_buffer_size_type_constant
    js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_constant_name:no);", my.indent_levels.first)
  elsif my.js_buffer_size.type = global.js_buffer_size_type_method
    if my.js_class_module.has_context
      js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_method_name:no)($(js_cpp_format_js_proxies_with_context(my.js_buffer_size, my.js_class_module)));", my.indent_levels.first)
    else
      js_out("size_t $(my.js_buffer_size.cpp_name:no) = $(my.js_buffer_size.c_method_name:no)($(js_cpp_format_js_proxies(my.js_buffer_size)));", my.indent_levels.first)
    endif
  endif
  js_out("byte* $(my.js_buffer_size.cpp_bytes_name:no) = new byte[$(my.js_buffer_size.cpp_name:no)];", my.indent_levels.first)
  js_out("vsc_buffer_t* $(my.js_argument.cpp_name:no) = vsc_buffer_new();", my.indent_levels.first)
  js_out("vsc_buffer_use($(my.js_argument.cpp_name:no), $(my.js_buffer_size.cpp_bytes_name:no), $(my.js_buffer_size.cpp_name:no));", my.indent_levels.first)
endfunction

function js_cpp_create_error_context_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.struct_name = "$(my.js_argument.cpp_name:no)_struct"
  js_out("$(my.js_argument.c_type:no) $(my.struct_name:no);", my.indent_levels.first)
  js_out("$(my.js_argument.c_type:no)* $(my.js_argument.cpp_name:no) = &$(my.struct_name:no);", my.indent_levels.first)
  js_out("$(my.js_argument.c_reset_method_name:no)($(my.js_argument.cpp_name:no));", my.indent_levels.first)
endfunction

function js_cpp_create_enum_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_argument.c_type:no) $(my.js_argument.cpp_name:no) = ($(my.js_argument.c_type:no))Nan::To<int64_t>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_class_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_argument.c_context_type:no)* $(my.js_argument.cpp_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_argument.cpp_class_name:no)>(Nan::To<v8::Object>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).ToLocalChecked())->$(my.js_argument.c_context_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_interface_js_argument(js_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_argument.c_implementation_type:no)* $(my.js_argument.cpp_name:no) = Nan::ObjectWrap::Unwrap<$(my.js_argument.cpp_implementation_class_name:no)>(Nan::To<v8::Object>($(global.js_cpp_callback_info_name:no)[$(my.index:no)]).ToLocalChecked())->$(my.js_argument.cpp_implementation_method_name:no)();", my.indent_levels.first)
endfunction

function js_cpp_create_js_arguments(js_method, js_class_module, indent_level)
  for my.js_method.js_argument
    my.index = index(js_argument) - 1
    if js_argument.type = global.js_argument_type_size
      js_cpp_create_size_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_integer
      js_cpp_create_integer_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_unsigned
      js_cpp_create_unsigned_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_boolean
      js_cpp_create_boolean_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_byte
      js_cpp_create_byte_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_char
      js_cpp_create_char_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_data
      js_cpp_create_data_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_buffer
      js_cpp_create_buffer_js_argument(js_argument, my.js_class_module, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_error_context
      js_cpp_create_error_context_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_enum
      js_cpp_create_enum_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_class
      js_cpp_create_class_js_argument(js_argument, my.index, my.indent_level)
    elsif js_argument.type = global.js_argument_type_interface
      js_cpp_create_interface_js_argument(js_argument, my.index, my.indent_level)
    endif
  endfor
endfunction

function js_cpp_format_size_js_return_variable(js_return)
  return "size_t $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_integer_js_return_variable(js_return)
  return "int64_t $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_unsigned_js_return_variable(js_return)
  return "uint32_t $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_boolean_js_return_variable(js_return)
  return "bool $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_byte_js_return_variable(js_return)
  return "byte* $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_data_js_return_variable(js_return)
  return "vsc_data_t $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_buffer_js_return_variable(js_return)
  return "vsc_buffer_t* $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_error_status_js_return_variable(js_return)
  return "$(my.js_return.c_type:no) $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_enum_js_return_variable(js_return)
  return "$(my.js_return.c_type:no) $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_class_js_return_variable(js_return)
  return "$(my.js_return.c_context_type:no)* $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_interface_js_return_variable(js_return)
  return "$(my.js_return.c_implementation_type:no)* $(my.js_return.cpp_name:no)"
endfunction

function js_cpp_format_js_return_variable(js_method)
  my.result = ""
  if defined(my.js_method->js_return)
    my.js_return = my.js_method->js_return
    if my.js_return.is_const
      my.result = "const "
    endif
    if my.js_return.type = global.js_return_type_size
      my.result += js_cpp_format_size_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_integer
      my.result += js_cpp_format_integer_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_unsigned
      my.result += js_cpp_format_unsigned_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_boolean
      my.result += js_cpp_format_boolean_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_byte
      my.result += js_cpp_format_byte_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_data
      my.result += js_cpp_format_data_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_buffer
      my.result += js_cpp_format_buffer_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_error_status
      my.result += js_cpp_format_error_status_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_enum
      my.result += js_cpp_format_enum_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_class
      my.result += js_cpp_format_class_js_return_variable(my.js_return)
    elsif my.js_return.type = global.js_return_type_interface
      my.result += js_cpp_format_interface_js_return_variable(my.js_return)
    endif
  endif
  return my.result
endfunction

function js_cpp_create_method_call(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.js_return_variable = js_cpp_format_js_return_variable(my.js_method)
  if my.js_return_variable <> ""
    my.js_return_variable += " = "
  endif
  my.arguments = ""
  if my.js_class_module.has_context & !my.js_method.is_static
    my.arguments = js_cpp_format_js_arguments_with_context(my.js_method, my.js_class_module)
  else
    my.arguments = js_cpp_format_js_arguments(my.js_method)
  endif
  js_out("$(my.js_return_variable:no)$(my.js_method.c_name:no)($(my.arguments:no));", my.indent_levels.first)
endfunction

function js_cpp_create_method_error_handling(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.js_method.js_argument where js_argument.type = global.js_argument_type_error_context
    js_out("$(js_argument.c_status_type:no) $(js_argument.cpp_status_name:no) = $(js_argument.c_status_method_name:no)($(js_argument.cpp_name:no));", my.indent_levels.first)
    js_out("$(js_argument.cpp_class_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(js_argument.cpp_status_name:no));", my.indent_levels.first)
  endfor
  if defined(my.js_method->js_return) & my.js_method->js_return.type = global.js_return_type_error_status
    js_out("$(my.js_method->js_return.cpp_class_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(my.js_method->js_return.cpp_name:no));", my.indent_levels.first)
  endif
endfunction

function js_cpp_format_size_method_result(js_return)
  return "Nan::New<v8::Number>($(my.js_return.cpp_name:no))"
endfunction

function js_cpp_format_integer_method_result(js_return)
  return "Nan::New<v8::Number>($(my.js_return.cpp_name:no))"
endfunction

function js_cpp_format_unsigned_method_result(js_return)
  return "Nan::New<v8::Number>($(my.js_return.cpp_name:no))"
endfunction

function js_cpp_format_boolean_method_result(js_return)
  return "Nan::New<v8::Boolean>($(my.js_return.cpp_name:no))"
endfunction

function js_cpp_format_byte_method_result(js_return)
  return "Nan::New<v8::Number>(*reinterpret_cast<uint32_t*>($(my.js_return.cpp_name:no)))"
endfunction

function js_cpp_format_data_method_result(js_return)
  return "Nan::NewBuffer((char*)$(my.js_return.cpp_name:no).bytes, $(my.js_return.cpp_name:no).len).ToLocalChecked()"
endfunction

function js_cpp_format_argument_buffer_method_result(js_argument)
  return "Nan::NewBuffer((char*)$(my.js_argument->js_buffer_size.cpp_bytes_name:no), vsc_buffer_len($(my.js_argument.cpp_name:no))).ToLocalChecked()"
endfunction

function js_cpp_format_buffer_method_result(js_return)
  return "Nan::NewBuffer((char*)vsc_buffer_bytes($(my.js_return.cpp_name:no)), vsc_buffer_len($(my.js_return.cpp_name:no))).ToLocalChecked()"
endfunction

function js_cpp_format_enum_method_result(js_return)
  return "Nan::New<v8::Number>((int)$(my.js_return.cpp_name:no))"
endfunction

function js_cpp_format_class_method_result(js_return, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.instance_name = "$(my.js_return.cpp_name:no)_instance"
  my.value = my.js_return.cpp_name
  if my.js_return.is_const
    my.value = "const_cast<$(my.js_return.c_context_type:no)*>($(my.js_return.cpp_name:no))"
  endif
  js_out("$(my.js_return.cpp_class_name:no)* $(my.instance_name:no) = new $(my.js_return.cpp_class_name:no)($(my.value:no));", my.indent_levels.first)
  return "$(my.instance_name:no)->handle()"
endfunction

function js_cpp_format_interface_method_result(js_return)
  my.value = my.js_return.cpp_name
  if my.js_return.is_const
    my.value = "const_cast<$(my.js_return.c_implementation_type:no)*>($(my.js_return.cpp_name:no))"
  endif
  return "$(my.js_return.cpp_implementation_resolver_name:no)::$(my.js_return.cpp_implementation_resolver_method_name:no)($(my.value:no))"
endfunction

function js_cpp_create_method_result_multiple(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.js_cpp_result_object_name = "js_result_object"
  js_out("Nan::EscapableHandleScope scope;", my.indent_levels.first)
  js_out("v8::Local<v8::Object> $(my.js_cpp_result_object_name:no) = Nan::New<v8::Object>();", my.indent_levels.first)
  for my.js_method.js_argument where js_argument.type = global.js_argument_type_buffer
    my.method_return = js_cpp_format_argument_buffer_method_result(js_argument)
    js_out("$(my.js_cpp_result_object_name:no)->Set(Nan::New<v8::String>(\"$(js_argument.js_name:no)\").ToLocalChecked(), $(my.method_return:no));", my.indent_levels.first)
  endfor
  if defined(my.js_method->js_return) & my.js_method->js_return.type <> global.js_return_type_error_status
    my.js_return = my.js_method->js_return
    if my.js_return.type = global.js_return_type_size
      my.method_return = js_cpp_format_size_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_integer
      my.method_return = js_cpp_format_integer_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_unsigned
      my.method_return = js_cpp_format_unsigned_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_boolean
      my.method_return = js_cpp_format_boolean_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_byte
      my.method_return = js_cpp_format_byte_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_data
      my.method_return = js_cpp_format_data_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_buffer
      my.method_return = js_cpp_format_buffer_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_enum
      my.method_return = js_cpp_format_enum_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_class
      my.method_return = js_cpp_format_class_method_result(my.js_return, my.indent_levels.first)
    elsif my.js_return.type = global.js_return_type_interface
      my.method_return = js_cpp_format_interface_method_result(my.js_return)
    endif
    js_out("$(my.js_cpp_result_object_name:no)->Set(Nan::New<v8::String>(\"$(my.js_return.js_name:no)\").ToLocalChecked(), $(my.method_return:no));", my.indent_levels.first)
  endif
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set(scope.Escape($(my.js_cpp_result_object_name:no)));", my.indent_levels.first)
endfunction

function js_cpp_create_method_result_single(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.js_method.js_argument where js_argument.type = global.js_argument_type_buffer
    my.method_return = js_cpp_format_argument_buffer_method_result(js_argument)
  endfor
  if defined(my.js_method->js_return)
    my.js_return = my.js_method->js_return
    if my.js_return.type = global.js_return_type_error_status
      return
    elsif my.js_return.type = global.js_return_type_size
      my.method_return = js_cpp_format_size_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_integer
      my.method_return = js_cpp_format_integer_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_unsigned
      my.method_return = js_cpp_format_unsigned_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_boolean
      my.method_return = js_cpp_format_boolean_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_byte
      my.method_return = js_cpp_format_byte_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_data
      my.method_return = js_cpp_format_data_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_buffer
      my.method_return = js_cpp_format_buffer_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_enum
      my.method_return = js_cpp_format_enum_method_result(my.js_return)
    elsif my.js_return.type = global.js_return_type_class
      my.method_return = js_cpp_format_class_method_result(my.js_return, my.indent_levels.first)
    elsif my.js_return.type = global.js_return_type_interface
      my.method_return = js_cpp_format_interface_method_result(my.js_return)
    endif
  endif
  js_out("$(global.js_cpp_callback_info_name:no).GetReturnValue().Set($(my.method_return:no));", my.indent_levels.first)
endfunction

function js_cpp_create_method_result(js_method, indent_level)
  my.results_count = count_js_method_results(my.js_method)
  if my.results_count > 1
    js_cpp_create_method_result_multiple(my.js_method, my.indent_level)
  elsif my.results_count = 1
    js_cpp_create_method_result_single(my.js_method, my.indent_level)
  endif
endfunction

function js_cpp_create_method(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.js_class_module.cpp_name:no)::$(my.js_method.cpp_name:no)($(global.js_cpp_callback_info_type:no) $(global.js_cpp_callback_info_name:no)) {", my.indent_levels.first)
  if !my.js_method.is_static
    js_cpp_create_unwrap_class(my.js_class_module, my.indent_levels.second)
  endif
  js_cpp_create_js_arguments(my.js_method, my.js_class_module, my.indent_levels.second)
  js_cpp_create_method_call(my.js_method, my.js_class_module, my.indent_levels.second)
  js_cpp_create_method_error_handling(my.js_method, my.indent_levels.second)
  js_cpp_create_method_result(my.js_method, my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)::$(my.js_class_module.cpp_name:no)() {", my.indent_levels.first)
  js_out("$(my.js_class_module.c_context_name:no) = $(my.js_class_module.c_context_constructor:no)();", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
  js_out("$(my.js_class_module.cpp_name:no)::$(my.js_class_module.cpp_name:no)($(my.js_class_module.c_context_type:no)* $(my.js_class_module.c_context_name:no)) {", my.indent_levels.first)
  js_out("this->$(my.js_class_module.c_context_name:no) = $(my.js_class_module.c_shallow_copy:no)($(my.js_class_module.c_context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_get_implementation_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.c_implementation_type:no)* $(my.js_class_module.cpp_name:no)::$(my.js_class_module.cpp_implementation_method_name:no)() {", my.indent_levels.first)
  js_out("return $(my.js_class_module.c_implementation_method_name:no)($(my.js_class_module.c_context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_destructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.js_class_module.cpp_name:no)::~$(my.js_class_module.cpp_name:no)() {", my.indent_levels.first)
  js_out("$(my.js_class_module.c_context_destructor:no)(&$(my.js_class_module.c_context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_persistent_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("Nan::Persistent<v8::Function> $(my.js_class_module.cpp_name:no)::$(global.js_cpp_persistent_constructor_name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_cpp_create_init(my.js_class_module, my.indent_levels.first)
  if my.js_class_module.has_context
    js_cpp_create_new(my.js_class_module, my.indent_levels.first)
    js_cpp_create_constructor(my.js_class_module, my.indent_levels.first)
    js_cpp_create_destructor(my.js_class_module, my.indent_levels.first)
  endif
  if count(my.js_class_module.js_interface_implementation)
    js_cpp_create_get_implementation_method(my.js_class_module, my.indent_levels.first)
  endif
  for my.js_class_module.js_dependency
    js_cpp_create_method(js_dependency->js_method, my.js_class_module, my.indent_levels.first)
  endfor
  for my.js_class_module.js_method
    js_cpp_create_method(js_method, my.js_class_module, my.indent_levels.first)
  endfor
  js_cpp_create_persistent_constructor(my.js_class_module, my.indent_levels.firsts.first)
endfunction

function js_format_method_paraments(js_method)
  my.parameters = ""
  for my.js_method.js_argument
    my.parameters += js_argument.js_name
    if !last()
      my.parameters += ", "
    endif
  endfor
  return my.parameters
endfunction

function js_format_js_arguments(js_method)
  arguments = ""
  for my.js_method.js_argument
    if js_argument.type = "class" | js_argument.type = "interface"
      arguments += "$(js_argument.js_name:no).$(global.js_binding_property_name:no)"
    else
      arguments += js_argument.js_name
    endif
    if !last()
      arguments += ", "
    endif
  endfor
  return arguments
endfunction

function js_create_requires(js_class_module, wrapper_project, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("const $(global.js_js_umbrella_module:no) = require('./$(my.js_class_module.umbrella_js_source:no)');", my.indent_levels.first)
  js_out("const $(global.js_bindings_module:no) = require('bindings')('$(my.wrapper_project.js_name:no)');", my.indent_levels.first)
endfunction

function js_create_constant(js_constant, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static get $(my.js_constant.js_name:no)() {", my.indent_levels.first)
  js_out("return $(my.js_constant.value:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_create_constructor(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("constructor(binding) {", my.indent_levels.first)
  js_out("this.$(global.js_binding_property_name:no) = binding || new $(global.js_bindings_module:no).$(my.js_class_module.binding_name:no)();", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_format_js_dependency_parameters(js_class_module)
  my.result = ""
  for my.js_class_module.js_dependency
    my.result += js_dependency->js_method->js_argument.js_name
    if !last()
      my.result += ", "
    endif
  endfor
  return my.result
endfunction

function js_create_static_create_method(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.instance_name = "instance"
  js_out("static create($(js_format_js_dependency_parameters(my.js_class_module))) {", my.indent_levels.first)
  js_out("const $(my.instance_name:no) = new $(my.js_class_module.js_name:no)();", my.indent_levels.second)
  for my.js_class_module.js_dependency
    js_out("$(my.instance_name:no).$(js_dependency->js_method.js_name:no)($(js_dependency->js_method->js_argument.js_name:no));", my.indent_levels.second)
  endfor
  js_out("return $(my.instance_name:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_create_method_multiple_return(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.js_method->js_return)
    my.js_return = my.js_method->js_return
    my.project = ""
    if defined(my.js_return.js_project_name)
      my.project = "$(my.js_return.js_project_name:no)."
    endif
    if my.js_return.type = global.js_return_type_class
      js_out("$(global.js_method_return_variable_name:no).$(my.js_return.js_name:no) = new $(global.js_js_umbrella_module:no).$(my.js_return.js_class_name:no)($(global.js_method_return_variable_name:no).result);", my.indent_levels.first)
    elsif my.js_return.type = global.js_return_type_interface
      js_out("$(global.js_method_return_variable_name:no).$(my.js_return.js_name:no) = $(global.js_js_umbrella_module:no).$(my.js_return.js_implementation_resolver_class_name:no).$(my.js_return.js_implementation_resolver_method_name:no)($(global.js_method_return_variable_name:no).result);", my.indent_levels.first)
    endif
  endif
endfunction

function js_create_method_single_return(js_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.js_method->js_return)
    my.js_return = my.js_method->js_return
    my.project = ""
    if defined(my.js_return.js_project_name)
      my.project = "$(my.js_return.js_project_name:no)."
    endif
    if my.js_return.type = global.js_return_type_class
      js_out("$(global.js_method_return_variable_name:no) = new $(global.js_js_umbrella_module:no).$(my.project:no)$(my.js_return.js_class_name:no)($(global.js_method_return_variable_name:no));", my.indent_levels.first)
    elsif my.js_return.type = global.js_return_type_interface
      js_out("$(global.js_method_return_variable_name:no) = $(global.js_js_umbrella_module:no).$(my.project:no)$(my.js_return.js_implementation_resolver_class_name:no).$(my.js_return.js_implementation_resolver_method_name:no)($(global.js_method_return_variable_name:no));", my.indent_levels.first)
    endif
  endif
endfunction

function js_create_method_return(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.binding = my.js_method.is_static ?? "$(global.js_bindings_module:no).$(my.js_class_module.binding_name:no)" ? "this.$(global.js_binding_property_name:no)"
  js_out("let $(global.js_method_return_variable_name:no) = $(my.binding:no).$(my.js_method.js_name:no)($(js_format_js_arguments(my.js_method)));", my.indent_levels.first)
  my.results_count = count_js_method_results(my.js_method)
  if my.results_count > 1
    js_create_method_multiple_return(my.js_method, my.indent_levels.first)
  elsif my.results_count = 1
    js_create_method_single_return(my.js_method, my.indent_levels.first)
  endif
  js_out("return $(global.js_method_return_variable_name:no);", my.indent_levels.first)
endfunction

function js_create_method(js_method, js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if my.js_method.is_static
    js_out("static $(my.js_method.js_name:no)($(js_format_method_paraments(my.js_method))) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class_module, my.indent_levels.second)
  else
    js_out("$(my.js_method.js_name:no)($(js_format_method_paraments(my.js_method))) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class_module, my.indent_levels.second)
  endif
  js_out("}", my.indent_levels.first)
endfunction

function js_create_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_class_module.js_name:no) {", my.indent_levels.first)
  for my.js_class_module.js_constant
    js_create_constant(js_constant, my.indent_levels.second)
  endfor
  if my.js_class_module.has_context
    js_create_constructor(my.js_class_module, my.indent_levels.second)
    js_create_static_create_method(my.js_class_module, my.indent_levels.second)
  endif
  for my.js_class_module.js_dependency
    js_create_method(js_dependency->js_method, my.js_class_module, my.indent_levels.second)
  endfor
  for my.js_class_module.js_method
    js_create_method(js_method, my.js_class_module, my.indent_levels.second)
  endfor
  js_out("}", my.indent_levels.first)
endfunction

function js_create_export_class(js_class_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("module.exports.$(my.js_class_module.js_name:no) = $(my.js_class_module.js_name:no);", my.indent_levels.first)
endfunction

function js_create_js_class_module_cpp_header(js_class_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_class_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_class_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_class_module, my.indent_levels.first)
    js_cpp_header_create_class(my.js_class_module, my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_class_module_cpp_source(js_class_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_cpp_source.path
    js_cpp_create_header_include(my.js_class_module, my.indent_levels.first)
    js_cpp_create_class(my.js_class_module, my.indent_levels.first)
  close
endfunction

function js_create_js_class_module_js_source(js_class_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_class_module->js_source.path
    js_create_requires(my.js_class_module, my.wrapper_project, my.indent_levels.first)
    js_create_class(my.js_class_module, my.indent_levels.first)
    js_create_export_class(my.js_class_module, my.indent_levels.first)
  close
endfunction

function js_create_js_class_module(js_class_module, wrapper_project)
  js_create_js_class_module_cpp_header(my.js_class_module)
  js_create_js_class_module_cpp_source(my.js_class_module)
  js_create_js_class_module_js_source(my.js_class_module, my.wrapper_project)
endfunction

function js_create_js_enum_module(js_enum_module)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  output my.js_enum_module->js_source.path
    js_out("const $(my.js_enum_module.js_name:no) = {", my.indent_levels.first)
    for my.js_enum_module.js_enum_value
      my.value = "$(js_enum_value.js_name:no): $(js_enum_value.value:no)"
      if !last()
        my.value += ","
      endif
      js_out(my.value, my.indent_levels.second)
    endfor
    js_out("};", my.indent_levels.first)
    js_out("module.exports.$(my.js_enum_module.js_name:no) = $(my.js_enum_module.js_name:no);", my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module_cpp_header(js_error_status_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_error_status_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_error_status_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_error_status_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_error_status_module, my.indent_levels.first)
    js_out("class $(my.js_error_status_module.cpp_name:no) {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("static void $(global.js_cpp_handle_error_status_method_name:no)($(my.js_error_status_module.c_type:no) $(global.js_cpp_handle_error_status_method_parameter_name:no));", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module_cpp_source(js_error_status_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_error_status_module->js_cpp_source.path
    js_out("#include \"$(my.js_error_status_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    js_out("void $(my.js_error_status_module.cpp_name:no)::$(global.js_cpp_handle_error_status_method_name:no)($(my.js_error_status_module.c_type:no) $(global.js_cpp_handle_error_status_method_parameter_name:no)) {", my.indent_levels.first)
    js_out("switch ($(global.js_cpp_handle_error_status_method_parameter_name:no)) {", my.indent_levels.second)
    for my.js_error_status_module.js_error_status
      js_out("case $(js_error_status.c_name:no):", my.indent_levels.third)
      js_out("Nan::ThrowError(\"$(js_error_status.message:no)\");", my.indent_levels.fourth)
      js_out("break;", my.indent_levels.fourth)
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_js_error_status_module(js_error_status_module)
  js_create_js_error_status_module_cpp_header(my.js_error_status_module)
  js_create_js_error_status_module_cpp_source(my.js_error_status_module)
endfunction

function js_create_js_implementation_module(js_implementation_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_implementation_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_implementation_module.cpp_header_guard, my.indent_levels.first)
    js_out("class $(my.js_implementation_module.cpp_name:no) : public Nan::ObjectWrap {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("virtual $(my.js_implementation_module.c_implementation_type)* $(my.js_implementation_module.cpp_method_name:no)() = 0;", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module_cpp_header(js_implementation_resolver_module)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_resolver_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_implementation_resolver_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_implementation_resolver_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_includes(my.js_implementation_resolver_module, my.indent_levels.first)
    js_out("class $(my.js_implementation_resolver_module.cpp_name:no) {", my.indent_levels.first)
    js_cpp_header_create_public_access_specifier(my.indent_levels.first)
    js_out("static v8::Local<v8::Object> $(my.js_implementation_resolver_module.cpp_method_name:no)($(my.js_implementation_resolver_module.c_implementation_type:no)* $(my.js_implementation_resolver_module.cpp_method_parameter_name:no));", my.indent_levels.second)
    js_out("};", my.indent_levels.first)
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module_cpp_source(js_implementation_resolver_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_resolver_module->js_cpp_source.path
    js_out("#include \"$(my.js_implementation_resolver_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    js_out("v8::Local<v8::Object> $(my.js_implementation_resolver_module.cpp_name:no)::$(my.js_implementation_resolver_module.cpp_method_name:no)($(my.js_implementation_resolver_module.c_implementation_type:no)* $(my.js_implementation_resolver_module.cpp_method_parameter_name:no)) {", my.indent_levels.first)
    js_out("switch ($(my.js_implementation_resolver_module.c_method_tag:no)($(my.js_implementation_resolver_module.cpp_method_parameter_name:no))) {", my.indent_levels.second)
    for my.wrapper_project.js_module where defined(js_module->js_class_module) & defined(js_module->js_class_module.c_implementation_tag)
      my.class_module = js_module->js_class_module
      my.instance_name = "instance"
      js_out("case $(my.class_module.c_implementation_tag:no): {", my.indent_levels.third)
      js_out("$(my.class_module.c_context_type:no)* $(my.class_module.c_context_name:no) = $(my.class_module.c_context_constructor:no)();", my.indent_levels.fourth)
      js_out("$(my.class_module.c_restore_alg_info:no)($(my.class_module.c_context_name:no), $(my.js_implementation_resolver_module.cpp_method_parameter_name:no));", my.indent_levels.fourth)
      js_out("$(my.class_module.cpp_name:no)* $(my.instance_name:no) = new $(my.class_module.cpp_name:no)($(my.class_module.c_context_name:no));", my.indent_levels.fourth)
      js_out("return $(my.instance_name:no)->handle();", my.indent_levels.fourth)
      js_out("}", my.indent_levels.third)
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module_js_source(js_implementation_resolver_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_implementation_resolver_module->js_source.path
    js_out("const $(global.js_bindings_module:no) = require('bindings')('$(my.wrapper_project.js_name:no)');", my.indent_levels.first)
    js_out("const $(global.js_js_umbrella_module:no) = require('./$(my.js_implementation_resolver_module.umbrella_js_source:no)');", my.indent_levels.first)
    js_out("class $(my.js_implementation_resolver_module.js_name:no) {", my.indent_levels.first)
    js_out("static $(my.js_implementation_resolver_module.js_method_name:no)($(my.js_implementation_resolver_module.js_method_parameter_name:no)) {", my.indent_levels.second)
    for my.wrapper_project.js_module where defined(js_module->js_class_module) & defined(js_module->js_class_module.c_implementation_tag)
      my.class_module = js_module->js_class_module
      my.condition = "$(my.js_implementation_resolver_module.js_method_parameter_name:no) instanceof $(global.js_bindings_module:no).$(my.class_module.binding_name:no)"
      if first()
        js_out("if ($(my.condition:no)) {", my.indent_levels.third)
      else
        js_out("} else if ($(my.condition:no)) {", my.indent_levels.third)
      endif
      js_out("return new $(global.js_js_umbrella_module:no).$(my.class_module.js_name:no)($(my.js_implementation_resolver_module.js_method_parameter_name:no));", my.indent_levels.fourth)
      if last()
        js_out("}", my.indent_levels.third)
      endif
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
    js_out("module.exports.$(my.js_implementation_resolver_module.js_name:no) = $(my.js_implementation_resolver_module.js_name:no);", my.indent_levels.first)
  close
endfunction

function js_create_js_implementation_resolver_module(js_implementation_resolver_module, wrapper_project)
  js_create_js_implementation_resolver_module_cpp_header(my.js_implementation_resolver_module)
  js_create_js_implementation_resolver_module_cpp_source(my.js_implementation_resolver_module, my.wrapper_project)
  js_create_js_implementation_resolver_module_js_source(my.js_implementation_resolver_module, my.wrapper_project)
endfunction

function js_create_js_umbrella_module_cpp_header(js_umbrella_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_umbrella_module->js_cpp_header.path
    js_cpp_header_create_ifndef(my.js_umbrella_module.cpp_header_guard, my.indent_levels.first)
    js_cpp_header_create_define(my.js_umbrella_module.cpp_header_guard, my.indent_levels.first)
    js_out("#include <nan.h>", my.indent_levels.first)
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_library
      js_out("#include <$(js_project_require.c_namespace_dir:no)$(js_project_require.c_umbrella_header:no)>", my.indent_levels.first)
    endfor
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_relative
      js_out("#include \"$(js_project_require.project_dir:no)/$(js_project_require.umbrella_cpp_header:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_implementation_module)
      js_out("#include \"$(js_module->js_implementation_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_class_module)
      js_out("#include \"$(js_module->js_class_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_error_status_module)
      js_out("#include \"$(js_module->js_error_status_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_implementation_resolver_module)
      js_out("#include \"$(js_module->js_implementation_resolver_module->js_cpp_header.name:no)\"", my.indent_levels.first)
    endfor
    js_cpp_header_create_endif(my.indent_levels.first)
  close
endfunction

function js_create_js_umbrella_module_js_source(js_umbrella_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_umbrella_module->js_source.path
    js_out("module.exports = Object.assign(", my.indent_levels.first)
    js_out("{},", my.indent_levels.second)
    for my.js_umbrella_module.js_project_require where js_project_require.type = global.js_project_require_type_relative
      js_out("{ $(js_project_require.js_project_name:no): require('$(js_project_require.project_dir:no)/$(js_project_require.umbrella_js_source:no)') },", my.indent_levels.second)
    endfor
    for my.wrapper_project.js_module where defined(js_module->js_class_module)
      js_out("require('./$(js_module->js_class_module->js_source.name:no)'),", my.indent_levels.second)
    endfor
    js_out(");", my.indent_levels.first)
  close
endfunction

function js_create_js_umbrella_module(js_umbrella_module, wrapper_project)
  js_create_js_umbrella_module_cpp_header(my.js_umbrella_module, my.wrapper_project)
  js_create_js_umbrella_module_js_source(my.js_umbrella_module, my.wrapper_project)
endfunction

function js_create_js_root_module(js_root_module, wrapper_project)
  my.indent_levels = js_create_indent_levels()
  output my.js_root_module->js_source.path
    js_out("module.exports = Object.assign(", my.indent_levels.first)
    js_out("{},", my.indent_levels.second)
    for my.wrapper_project.js_module where (defined(js_module->js_class_module) | defined(js_module->js_enum_module))
      if defined(js_module->js_class_module)
        my.require = "require('./$(js_module->js_class_module->js_source.name:no)')"
      else
        my.require = "require('./$(js_module->js_enum_module->js_source.name:no)')"
      endif
      if !last()
        my.require += ","
      endif
      js_out(my.require, my.indent_levels.second)
    endfor
    js_out(");", my.indent_levels.first)
  close
endfunction

function js_create_wrapper_top_level_js_entry_module(wrapper)
  my.indent_levels = js_create_indent_levels()
  output my.wrapper->js_entry_module->js_source.path
    js_out("module.exports = Object.assign(", my.indent_levels.first)
    js_out("{},", my.indent_levels.second)
    for my.wrapper.js_project
      js_out("require('./$(js_project.name:no)/$(js_project.name:no).js'),", my.indent_levels.second)
    endfor
    js_out(");", my.indent_levels.first)
  close
  output my.wrapper->js_entry_module->js_cpp_source.path
    for my.wrapper.js_project
      for js_project.js_module where defined(js_module->js_umbrella_module)
        js_out("#include \"$(js_project.name:no)/$(js_module->js_umbrella_module->js_cpp_header.name:no)\"", my.indent_levels.first)
      endfor
    endfor
    js_out("void InitAll(v8::Local<v8::Object> exports) {", my.indent_levels.first)
    for my.wrapper.js_project
      for js_project.js_module where defined(js_module->js_class_module)
        js_out("$(js_module->js_class_module.cpp_name:no)::$(global.js_cpp_init_function_name:no)(exports);", my.indent_levels.second)
      endfor
    endfor
    js_out("}", my.indent_levels.first)
    js_out("NODE_MODULE(addon, InitAll);", my.indent_levels.first)
  close
endfunction

function js_create_binding_gyp_sources(wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("\"sources\": [", my.indent_levels.first)
  js_out("\"$(global.js_source_folder_name:no)/$(my.wrapper->js_entry_module->js_cpp_source.name:no)\",", my.indent_levels.second)
  for my.wrapper.js_project
    for js_project.js_module
      if defined(js_module->js_error_status_module)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_error_status_module->js_cpp_header.name:no)\",", my.indent_levels.second)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_error_status_module->js_cpp_source.name:no)\",", my.indent_levels.second)
      elsif defined(js_module->js_class_module)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_class_module->js_cpp_header.name:no)\",", my.indent_levels.second)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_class_module->js_cpp_source.name:no)\",", my.indent_levels.second)
      elsif defined(js_module->js_implementation_module)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_implementation_module->js_cpp_header.name:no)\",", my.indent_levels.second)
      elsif defined(js_module->js_implementation_resolver_module)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_implementation_resolver_module->js_cpp_header.name:no)\",", my.indent_levels.second)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_implementation_resolver_module->js_cpp_source.name:no)\",", my.indent_levels.second)
      elsif defined(js_module->js_umbrella_module)
        js_out("\"$(global.js_source_folder_name:no)/$(js_project.name:no)/$(js_module->js_umbrella_module->js_cpp_header.name:no)\",", my.indent_levels.second)
      endif
    endfor
  endfor
  js_out("],", my.indent_levels.first)
endfunction

function js_create_binding_gyp_include_dirs(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("\"include_dirs\": [", my.indent_levels.first)
  js_out("\"<!(node -e \\\"require('nan')\\\")\",", my.indent_levels.second)
  js_out("\"virgil-crypto-c/include\",", my.indent_levels.second)
  js_out("],", my.indent_levels.first)
endfunction

/* FIXME: we will probably use UIDs instead of hardcoded strings */
function js_get_library_name(js_library_require)
  if my.js_library_require.type = global.js_library_require_type_project
    return "vsc_$(my.js_library_require.name:no)"
  elsif my.js_library_require.type = global.js_library_require_type_library
    if my.js_library_require.name = "mbedtls"
      return "mbedcrypto"
    elsif my.js_library_require.name = "relic"
      return "relic_s"
    endif
  endif
  return my.js_library_require.name
endfunction

function js_create_binding_gyp_conditions(wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("\"conditions\": [", my.indent_levels.first)
  js_out("[\"OS=='mac'\", {", my.indent_levels.second)
  js_out("\"libraries\": [", my.indent_levels.third)
  for my.wrapper.js_library_require
    js_out("\"virgil-crypto-c/lib/lib$(js_get_library_name(js_library_require):no).a\",", my.indent_levels.fourth)
  endfor
  js_out("],", my.indent_levels.third)
  js_out("}],", my.indent_levels.second)
  js_out("[\"OS=='linux'\", {", my.indent_levels.second)
  js_out("\"libraries\": [", my.indent_levels.third)
  for my.wrapper.js_library_require
    js_out("\"virgil-crypto-c/lib64/lib$(js_get_library_name(js_library_require):no).a\",", my.indent_levels.fourth)
  endfor
  js_out("],", my.indent_levels.third)
  js_out("}],", my.indent_levels.second)
  js_out("[\"OS=='win'\", {", my.indent_levels.second)
  js_out("\"libraries\": [", my.indent_levels.third)
  for my.wrapper.js_library_require
    js_out("\"virgil-crypto-c/lib/$(js_get_library_name(js_library_require):no).lib\",", my.indent_levels.fourth)
  endfor
  js_out("],", my.indent_levels.third)
  js_out("}],", my.indent_levels.second)
  js_out("],", my.indent_levels.first)
endfunction

function js_create_wrapper_top_level_binding_gyp(wrapper)
  my.indent_levels = js_create_indent_levels()
  my.js_binding_gyp_module = my.wrapper->js_binding_gyp_module
  output my.js_binding_gyp_module.file_path
    js_out("{", my.indent_levels.first)
    js_out("\"targets\": [", my.indent_levels.second)
    js_out("{", my.indent_levels.third)
    js_out("\"target_name\": \"$(global.js_binding_target_name:no)\",", my.indent_levels.fourth)
    js_create_binding_gyp_sources(my.wrapper, my.indent_levels.fourth)
    js_create_binding_gyp_include_dirs(my.indent_levels.fourth)
    js_create_binding_gyp_conditions(my.wrapper, my.indent_levels.fourth)
    js_out("},", my.indent_levels.third)
    js_out("],", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_wrapper_top_level_package_json(wrapper)
  my.indent_levels = js_create_indent_levels()
  output my.wrapper->js_package_json_module.file_path
    my.package_json = my.wrapper->package_json
    js_out("{", my.indent_levels.first)
    js_out("\"name\": \"$(my.package_json.name:no)\",", my.indent_levels.second)
    js_out("\"version\": \"$(my.package_json.version:no)\",", my.indent_levels.second)
    js_out("\"description\": \"$(my.package_json.description:no)\",", my.indent_levels.second)
    js_out("\"main\": \"./src/index.js\",", my.indent_levels.second)
    js_out("\"repository\": \"$(my.package_json.repository:no)\",", my.indent_levels.second)
    js_out("\"author\": \"$(my.package_json.author:no)\",", my.indent_levels.second)
    js_out("\"license\": \"$(my.package_json.license:no)\",", my.indent_levels.second)
    js_out("\"scripts\": {", my.indent_levels.second)
    my.script = "\"preinstall\": \"node $(my.wrapper->js_download_crypto_c_module.file_name:no)\""
    if count(my.package_json.script) > 0
      my.script += ","
    endif
    js_out(my.script, my.indent_levels.third)
    for my.package_json.script
      my.script = "\"$(script.name:no)\": \"$(script:no)\""
      if !last()
        my.script += ","
      endif
      js_out(my.script, my.indent_levels.third)
    endfor
    js_out("},", my.indent_levels.second)
    js_out("\"dependencies\": {", my.indent_levels.second)
    for my.package_json.dependency where dependency.type = "dependency"
      my.dependency = "\"$(dependency.name:no)\": \"$(dependency.version:no)\""
      if !last()
        my.dependency += ","
      endif
      js_out(my.dependency, my.indent_levels.third)
    endfor
    js_out("},", my.indent_levels.second)
    js_out("\"devDependencies\": {", my.indent_levels.second)
    for my.package_json.dependency where dependency.type = "devDependency"
      my.dependency = "\"$(dependency.name:no)\": \"$(dependency.version:no)\""
      if !last()
        my.dependency += ","
      endif
      js_out(my.dependency, my.indent_levels.third)
    endfor
    js_out("}", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  close
endfunction

function js_create_wrapper_top_level_gitignore(wrapper)
  my.indent_levels = js_create_indent_levels()
  output my.wrapper->js_gitignore_module.file_path
    for my.wrapper->gitignore.ignore
      js_out("$(ignore:no)", my.indent_levels.first)
    endfor
  close
endfunction

function js_create_wrapper_top_level_download_crypto_c(wrapper)
  my.indent_levels = js_create_indent_levels()
  output my.wrapper->js_download_crypto_c_module.file_path
  close
endfunction

function js_create_wrapper_top_level(wrapper)
  js_create_wrapper_top_level_js_entry_module(my.wrapper)
  js_create_wrapper_top_level_binding_gyp(my.wrapper)
  js_create_wrapper_top_level_package_json(my.wrapper)
  js_create_wrapper_top_level_gitignore(my.wrapper)
  js_create_wrapper_top_level_download_crypto_c(my.wrapper)
endfunction

endtemplate
