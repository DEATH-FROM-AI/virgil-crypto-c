.template 0

gsl from "common.gsl"
gsl from "js_helpers.gsl"

# --------------------------------------------------------------------------------------------------
# C++ - Header
# --------------------------------------------------------------------------------------------------

function js_cpp_header_create_ifndef(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#ifndef $(js_cpp_header_guard(my.name))", my.indent_levels.first)
endfunction

function js_cpp_header_create_define(name, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#define $(js_cpp_header_guard(my.name))", my.indent_levels.first)
endfunction

function js_cpp_header_create_js_include_module(js_include_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.js_include_module.cpp_header_file:no)\"", my.indent_levels.first)
endfunction

function js_cpp_header_create_includes(js_class_module, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include <nan.h>", my.indent_levels.first)
  js_out("#include <$(string.replace(my.wrapper.namespace, " |/"))/$(my.wrapper.prefix:no)_$(my.js_class_module->cpp_class.c_name:no).h>", my.indent_levels.first)
  for my.js_class_module.js_include_module
    js_cpp_header_create_js_include_module(js_include_module, my.indent_levels.first)
  endfor
endfunction

function js_cpp_header_create_endif(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#endif", my.indent_levels.first)
endfunction

function js_cpp_header_create_public_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("public:", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_access_specifier(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("private:", my.indent_levels.first)
endfunction

function js_cpp_header_create_init(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(js_cpp_init_function_name())($(js_cpp_init_function_argument_type()) $(js_cpp_init_function_argument_name()));", my.indent_levels.first)
endfunction

function js_cpp_header_create_constructors(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.cpp_class.name:no)();", my.indent_levels.first)
  js_out("$(my.cpp_class.name:no)($(js_cpp_context_type(my.cpp_class.context_name)) $(my.cpp_class.context_name));", my.indent_levels.first)
endfunction

function js_cpp_header_create_context_property(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(js_cpp_context_type(my.cpp_class.context_name)) $(my.cpp_class.context_name);", my.indent_levels.first)
endfunction

function js_cpp_header_create_new(indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(js_cpp_constructor_function_name())($(js_cpp_callback_info_type()) $(js_cpp_callback_info_name()));", my.indent_levels.first)
endfunction

function js_cpp_header_create_method(cpp_method, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static void $(my.cpp_method.name:no)($(js_cpp_callback_info_type()) $(js_cpp_callback_info_name()));", my.indent_levels.first)
endfunction

function js_cpp_header_create_destructor(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("~$(my.cpp_class.name:no)();", my.indent_levels.first)
endfunction

function js_cpp_header_create_private_properties(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static Nan::Persistent<v8::Function> $(js_cpp_persistent_constructor_name());", my.indent_levels.first)
endfunction

function js_cpp_header_create_class(cpp_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.cpp_class.name:no) : public Nan::ObjectWrap {", my.indent_levels.first)
  js_cpp_header_create_public_access_specifier(my.indent_levels.first)
  js_cpp_header_create_init(my.indent_levels.second)
  js_cpp_header_create_constructors(my.cpp_class, my.indent_levels.second)
  js_cpp_header_create_context_property(my.cpp_class, my.indent_levels.second)
  js_cpp_header_create_private_access_specifier(my.indent_levels.first)
  js_cpp_header_create_new(my.indent_levels.second)
  for my.cpp_class.cpp_method
    js_cpp_header_create_method(cpp_method, my.indent_levels.second)
  endfor
  js_cpp_header_create_destructor(my.cpp_class, my.indent_levels.second)
  js_cpp_header_create_private_properties(my.cpp_class, my.indent_levels.second)
  js_out("};", my.indent_levels.first)
endfunction

function js_cpp_header_create_interface_includes(wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include <nan.h>", my.indent_levels.first)
  js_out("#include <$(string.replace(my.wrapper.namespace, " |/"))/$(my.wrapper.prefix:no)_impl.h>", my.indent_levels.first)
endfunction

function js_cpp_header_create_interface(js_interface_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_interface_module.class_name:no) : public Nan::ObjectWrap {", my.indent_levels.first)
  js_cpp_header_create_public_access_specifier(my.indent_levels.first)
  js_out("virtual $(my.js_interface_module.implementation_type:no)* $(my.js_interface_module.implementation_getter:no)() = 0;", my.indent_levels.second)
  js_out("};", my.indent_levels.first)
endfunction

# --------------------------------------------------------------------------------------------------
# C++ - Source
# --------------------------------------------------------------------------------------------------

function js_cpp_cast_cpp_call_argument(cpp_call_argument)
  if cpp_call_argument.cast = "data_length"
    return "$(cpp_call_argument.name:no).len"
  else
    echo_fatal("Unknown 'cpp_call_argument.cast'", my)
  endif
endfunction

function js_cpp_format_cpp_call_arguments(parent)
  my.arguments = ""
  for my.parent.cpp_call_argument
    if defined(cpp_call_argument.cast)
      my.arguments += js_cpp_cast_cpp_call_argument(cpp_call_argument)
    else
      my.arguments += cpp_call_argument.name
    endif
    if !last()
      my.arguments += ", "
    endif
  endfor
  return my.arguments
endfunction

function js_cpp_format_cpp_call_arguments_with_context(parent, cpp_class)
  my.arguments = "$(js_cpp_class_instance_name(my.cpp_class))->$(my.cpp_class.context_name)"
  if count(my.parent.cpp_call_argument) > 0
    my.arguments += ", "
    my.arguments += js_cpp_format_cpp_call_arguments(my.parent)
  endif
  return my.arguments
endfunction

function js_cpp_create_header_include(js_wrapped_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("#include \"$(my.js_wrapped_class.cpp_header_file:no)\"", my.indent_levels.first)
endfunction

function js_cpp_create_init(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.cpp_class.name:no)::$(js_cpp_init_function_name())($(js_cpp_init_function_argument_type()) $(js_cpp_init_function_argument_name())) {", my.indent_levels.first)
  js_out("Nan::HandleScope scope;", my.indent_levels.second)
  js_out("v8::Local<v8::FunctionTemplate> function_template = Nan::New<v8::FunctionTemplate>($(my.cpp_class.name:no)::$(js_cpp_constructor_function_name()));", my.indent_levels.second)
  js_out("function_template->SetClassName(Nan::New(\"$(my.cpp_class.binding_name:no)\").ToLocalChecked());", my.indent_levels.second)
  js_out("function_template->InstanceTemplate()->SetInternalFieldCount(1);", my.indent_levels.second)
  for my.cpp_class.cpp_method where js_method_is_static(cpp_method)
    js_out("Nan::SetMethod(function_template, \"$(cpp_method.binding_name:no)\", $(my.cpp_class.name:no)::$(cpp_method.name:no));", my.indent_levels.second)
  endfor
  for my.cpp_class.cpp_method where !js_method_is_static(cpp_method)
    js_out("Nan::SetPrototypeMethod(function_template, \"$(cpp_method.binding_name:no)\", $(my.cpp_class.name:no)::$(cpp_method.name:no));", my.indent_levels.second)
  endfor
  js_out("$(my.cpp_class.name:no)::$(js_cpp_persistent_constructor_name()).Reset(function_template->GetFunction());", my.indent_levels.second)
  js_out("$(js_cpp_init_function_argument_name())->Set(Nan::New<v8::String>(\"$(my.cpp_class.binding_name:no)\").ToLocalChecked(), function_template->GetFunction());", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_new(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.cpp_class.name:no)::$(js_cpp_constructor_function_name())($(js_cpp_callback_info_type()) $(js_cpp_callback_info_name())) {", my.indent_levels.first)
  js_out("if ($(js_cpp_callback_info_name()).IsConstructCall()) {", my.indent_levels.second)
  js_out("$(my.cpp_class.name:no)* $(my.cpp_class.c_name:no) = new $(my.cpp_class.name:no)();", my.indent_levels.third)
  js_out("$(my.cpp_class.c_name:no)->Wrap($(js_cpp_callback_info_name()).This());", my.indent_levels.third)
  js_out("$(js_cpp_callback_info_name()).GetReturnValue().Set($(js_cpp_callback_info_name()).This());", my.indent_levels.third)
  js_out("} else {", my.indent_levels.second)
  js_out("Nan::ThrowTypeError(\"Class constructor cannot be invoked without 'new'\");", my.indent_levels.third)
  js_out("}", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_unwrap_class(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.cpp_class.name:no)* $(js_cpp_class_instance_name(my.cpp_class)) = Nan::ObjectWrap::Unwrap<$(my.cpp_class.name:no)>($(js_cpp_callback_info_name()).Holder());", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_size_argument(cpp_size_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("size_t $(my.cpp_size_argument.name:no) = Nan::To<uint32_t>($(js_cpp_callback_info_name())[$(my.index)]).FromJust();", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_data_argument(cpp_data_argument, index, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_data_t $(my.cpp_data_argument.name:no) = vsc_data_from_str(node::Buffer::Data($(js_cpp_callback_info_name())[$(my.index)]), node::Buffer::Length($(js_cpp_callback_info_name())[$(my.index)]));", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_context_argument(cpp_context_argument, index, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.wrapper.js_wrapped_class where js_wrapped_class.name = cpp_context_argument.module_name
    js_out("$(js_cpp_context_type(js_wrapped_class.cpp_context_name)) $(my.cpp_context_argument.name:no) = Nan::ObjectWrap::Unwrap<$(js_wrapped_class.cpp_class_name:no)>($(js_cpp_callback_info_name())[$(my.index)])->$(js_wrapped_class.cpp_context_name:no);", my.indent_levels.first)
  endfor
endfunction

function js_cpp_create_cpp_buffer_size(cpp_buffer_size, cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if my.cpp_buffer_size.type = "constant"
    js_out("size_t $(my.cpp_buffer_size.name:no) = $(my.cpp_buffer_size.constant:no);", my.indent_levels.first)
  elsif my.cpp_buffer_size.type = "method"
    js_out("size_t $(my.cpp_buffer_size.name:no) = $(my.cpp_buffer_size.method:no)($(js_cpp_format_cpp_call_arguments_with_context(my.cpp_buffer_size, my.cpp_class)));", my.indent_levels.first)
  else
    echo_fatal("Unknown 'cpp_buffer_size.type'", my)
  endif
endfunction

function js_cpp_create_cpp_buffer_argument(cpp_buffer_argument, cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_cpp_create_cpp_buffer_size(my.cpp_buffer_argument->cpp_buffer_size, my.cpp_class, my.indent_levels.first)
  js_out("byte* $(js_cpp_bytes_name(my.cpp_buffer_argument.name)) = new byte[$(my.cpp_buffer_argument->cpp_buffer_size.name)];", my.indent_levels.first)
  js_out("vsc_buffer_t* $(my.cpp_buffer_argument.name:no) = vsc_buffer_new();", my.indent_levels.first)
  js_out("vsc_buffer_use($(my.cpp_buffer_argument.name:no), $(js_cpp_bytes_name(my.cpp_buffer_argument.name)), $(my.cpp_buffer_argument->cpp_buffer_size.name));", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_error_context_argument(cpp_error_context_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.cpp_error_context_argument.class:no)_t $(my.cpp_error_context_argument.name:no);", my.indent_levels.first)
  js_out("$(my.cpp_error_context_argument.class:no)_error(&$(my.cpp_error_context_argument.name:no));", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_enum_argument(cpp_enum_argument, index, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.wrapper.js_wrapped_enum where my.cpp_enum_argument.enum_name = js_wrapped_enum.name
    js_out("$(js_wrapped_enum.c_name:no) $(my.cpp_enum_argument.name:no) = ($(js_wrapped_enum.c_name:no))Nan::To<int32_t>($(js_cpp_callback_info_name())[$(my.index)]).FromJust();", my.indent_levels.first)
  endfor
endfunction

function js_cpp_create_cpp_char_argument(cpp_char_argument, index, cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if defined(my.cpp_char_argument.length)
    js_out("char $(my.cpp_char_argument.name:no)[$(my.cpp_char_argument.length:no)];", my.indent_levels.first)
  else
    js_out("char* $(my.cpp_char_argument.name:no) = Nan::Utf8String($(js_cpp_callback_info_name())[$(my.index)]);", my.indent_levels.first)
  endif
endfunction

function js_cpp_create_method_arguments(cpp_method, cpp_class, wrapper, indent_level)
  for my.cpp_method.cpp_call_argument
    my.cpp_call_argument_index = index(cpp_call_argument) - 1
    for my.cpp_method.cpp_size_argument where cpp_size_argument.name = cpp_call_argument.name
      js_cpp_create_cpp_size_argument(cpp_size_argument, my.cpp_call_argument_index, my.indent_level)
      next cpp_call_argument
    endfor
    for my.cpp_method.cpp_data_argument where cpp_data_argument.name = cpp_call_argument.name
      js_cpp_create_cpp_data_argument(cpp_data_argument, my.cpp_call_argument_index, my.indent_level)
      next cpp_call_argument
    endfor
    for my.cpp_method.cpp_context_argument where cpp_context_argument.name = cpp_call_argument.name
      js_cpp_create_cpp_context_argument(cpp_context_argument, my.cpp_call_argument_index, my.wrapper, my.indent_level)
      next cpp_call_argument
    endfor
    for my.cpp_method.cpp_enum_argument where cpp_enum_argument.name = cpp_call_argument.name
      js_cpp_create_cpp_enum_argument(cpp_enum_argument, my.cpp_call_argument_index, my.wrapper, my.indent_level)
      next cpp_call_argument
    endfor
    for my.cpp_method.cpp_char_argument where cpp_char_argument.name = cpp_call_argument.name
      js_cpp_create_cpp_char_argument(cpp_char_argument, my.cpp_call_argument_index, my.cpp_class, my.indent_level)
      next cpp_call_argument
    endfor
  endfor
  for my.cpp_method.cpp_buffer_argument
    js_cpp_create_cpp_buffer_argument(cpp_buffer_argument, my.cpp_class, my.indent_level)
  endfor
  for my.cpp_method.cpp_error_context_argument
    js_cpp_create_cpp_error_context_argument(cpp_error_context_argument, my.indent_level)
  endfor
endfunction

function js_cpp_create_cpp_method_return_size(cpp_method_return_size, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("size_t $(my.cpp_method_return_size.name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_method_return_boolean(cpp_method_return_boolean, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("boolean $(my.cpp_method_return_boolean.name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_method_return_data(cpp_method_return_data, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_data_t $(my.cpp_method_return_data.name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_method_return_buffer(cpp_method_return_buffer, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_buffer_t* $(my.cpp_method_return_buffer.name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_method_return_error(cpp_method_return_error, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.wrapper.prefix:no)_error_t $(my.cpp_method_return_error.name:no);", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_method_return_context(cpp_method_return_context, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.wrapper.js_wrapped_class where my.cpp_method_return_context.class = js_wrapped_class.name
    js_out("$(js_cpp_context_type(js_wrapped_class.cpp_context_name)) $(my.cpp_method_return_context.name:no);", my.indent_levels.first)
  endfor
endfunction

function js_cpp_create_cpp_method_return_enum(cpp_method_return_enum, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  for my.wrapper.js_wrapped_enum where my.cpp_method_return_enum.enum = js_wrapped_enum.name
    js_out("$(js_wrapped_enum.c_name:no) $(my.cpp_method_return_enum.name:no);", my.indent_levels.first)
  endfor
endfunction

function js_cpp_create_method_return_variables(cpp_method, cpp_class, wrapper, indent_level)
  for my.cpp_method.cpp_method_return_size
    js_cpp_create_cpp_method_return_size(cpp_method_return_size, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_boolean
    js_cpp_create_cpp_method_return_boolean(cpp_method_return_boolean, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_data
    js_cpp_create_cpp_method_return_data(cpp_method_return_data, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_buffer
    js_cpp_create_cpp_method_return_buffer(cpp_method_return_buffer, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_error
    js_cpp_create_cpp_method_return_error(cpp_method_return_error, my.wrapper, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_context
    js_cpp_create_cpp_method_return_context(cpp_method_return_context, my.wrapper, my.indent_level)
  endfor
  for my.cpp_method.cpp_method_return_enum
    js_cpp_create_cpp_method_return_enum(cpp_method_return_enum, my.wrapper, my.indent_level)
  endfor
endfunction

function js_cpp_create_method_call(cpp_method, cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.assignment = ""
  if defined(my.cpp_method->cpp_method_return)
    my.assignment = "$(my.cpp_method->cpp_method_return.name:no) = "
  endif
  my.arguments = ""
  if js_method_is_static(my.cpp_method)
    my.arguments = js_cpp_format_cpp_call_arguments(my.cpp_method)
  else
    my.arguments = js_cpp_format_cpp_call_arguments_with_context(my.cpp_method, my.cpp_class)
  endif
  js_out("$(my.assignment)$(my.cpp_method.c_name:no)($(my.arguments:no));", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_js_return(cpp_js_return, cpp_method, wrapper, indent_level)
  for my.cpp_method.cpp_buffer_argument where my.cpp_js_return.name = cpp_buffer_argument.name
    return "Nan::NewBuffer((char*)$(js_cpp_bytes_name(my.cpp_js_return.name)), vsc_buffer_len($(my.cpp_js_return.name:no))).ToLocalChecked()"
  endfor
  for my.cpp_method.cpp_method_return_size where my.cpp_js_return.name = cpp_method_return_size.name
    return "Nan::New<v8::Number>($(my.cpp_js_return.name:no))"
  endfor
  for my.cpp_method.cpp_method_return_boolean where my.cpp_js_return.name = cpp_method_return_boolean.name
    return "Nan::New<v8:Boolean>($(my.cpp_js_return.name:no))"
  endfor
  for my.cpp_method.cpp_method_return_enum where my.cpp_js_return.name = cpp_method_return_enum.name
    return "Nan::New<v8::Number>((int)$(my.cpp_js_return.name:no))"
  endfor
  for my.cpp_method.cpp_method_return_buffer where my.cpp_js_return.name = cpp_method_return_buffer.name
    return "Nan::NewBuffer((char*)vsc_buffer_bytes($(my.cpp_js_return.name:no)), vsc_buffer_len($(my.cpp_js_return.name:no))).ToLocalChecked()"
  endfor
  for my.cpp_method.cpp_method_return_data where my.cpp_js_return.name = cpp_method_return_data.name
    return "Nan::NewBuffer((char*)$(my.cpp_js_return.name:no).bytes, $(my.cpp_js_return.name:no).len).ToLocalChecked()"
  endfor
  for my.cpp_method.cpp_char_argument where my.cpp_js_return.name = cpp_char_argument.name
    if defined(cpp_char_argument.length)
      return "Nan::New<v8::String>(&$(my.cpp_js_return.name:no), $(cpp_char_argument.length)).ToLocalChecked()"
    else
      my.name = "$(my.cpp_js_return.name:no)_p"
      js_out("char* $(my.name:no)_p = &$(my.cpp_js_return.name:no);")
      return "Nan::New<v8::String>($(my.name:no), strlen($(my.name:no))).ToLocalChecked()"
    endif
  endfor
  for my.cpp_method.cpp_method_return_context where my.cpp_js_return.name = cpp_method_return_context.name
    for my.wrapper.js_wrapped_class where cpp_method_return_context.class = js_wrapped_class.name
      js_out("$(js_wrapped_class.cpp_class_name:no)* $(cpp_method_return_context.name:no)_instance = new $(js_wrapped_class.cpp_class_name:no)($(cpp_method_return_context.name:no));", my.indent_level)
      js_out("$(cpp_method_return_context.name:no)_instance->Wrap($(js_cpp_callback_info_name()).This());", my.indent_level)
      return "$(js_cpp_callback_info_name()).This()"
    endfor
  endfor
endfunction

function js_cpp_create_method_return_multiple(cpp_method, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("Nan::EscapableHandleScope scope;", my.indent_levels.first)
  js_out("v8::Local<v8::Object> result = Nan::New<v8::Object>();", my.indent_levels.first)
  for my.cpp_method.cpp_js_return
    js_out("result->Set(Nan::New<v8::String>(\"$(cpp_js_return.binding_name:no)\").ToLocalChecked(), $(js_cpp_create_cpp_js_return(cpp_js_return, my.cpp_method, my.wrapper, my.indent_levels.first)));", my.indent_levels.first)
  endfor
  js_out("$(js_cpp_callback_info_name()).GetReturnValue().Set(scope.Escape(result));", my.indent_levels.first)
endfunction

function js_cpp_create_method_return_one(cpp_method, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(js_cpp_callback_info_name()).GetReturnValue().Set($(js_cpp_create_cpp_js_return(my.cpp_method->cpp_js_return, my.cpp_method, my.wrapper, my.indent_levels.first)));", my.indent_levels.first)
endfunction

function js_cpp_create_method_return(cpp_method, wrapper, indent_level)
  if count(my.cpp_method.cpp_js_return) > 1
    js_cpp_create_method_return_multiple(my.cpp_method, my.wrapper, my.indent_level)
  elsif count(my.cpp_method.cpp_js_return) = 1
    js_cpp_create_method_return_one(my.cpp_method, my.wrapper, my.indent_level)
  endif
endfunction

function js_cpp_create_cpp_buffer_argument_destroy(cpp_buffer_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("vsc_buffer_destroy(&$(my.cpp_buffer_argument.name:no));", my.indent_levels.first)
endfunction

function js_cpp_create_cpp_buffer_argument_cleanup(cpp_buffer_argument, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_cpp_create_cpp_buffer_argument_destroy(my.cpp_buffer_argument, my.indent_levels.first)
  js_out("delete[] $(js_cpp_bytes_name(my.cpp_buffer_argument.name));", my.indent_levels.first)
endfunction

function js_cpp_create_method_cleanup(cpp_method, indent_level)
  for my.cpp_method.cpp_buffer_argument
    js_cpp_create_cpp_buffer_argument_destroy(cpp_buffer_argument, my.indent_level)
  endfor
endfunction

function js_cpp_create_method(cpp_method, cpp_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("void $(my.cpp_class.name:no)::$(my.cpp_method.name:no)($(js_cpp_callback_info_type()) $(js_cpp_callback_info_name())) {", my.indent_levels.first)
  if !js_method_is_static(my.cpp_method)
    js_cpp_create_unwrap_class(my.cpp_class, my.indent_levels.second)
  endif
  js_cpp_create_method_arguments(my.cpp_method, my.cpp_class, my.wrapper, my.indent_levels.second)
  js_cpp_create_method_return_variables(my.cpp_method, my.cpp_class, my.wrapper, my.indent_levels.second)
  js_cpp_create_method_call(my.cpp_method, my.cpp_class, my.indent_levels.second)
  js_cpp_create_method_return(my.cpp_method, my.wrapper, my.indent_levels.second)
  js_cpp_create_method_cleanup(my.cpp_method, my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_constructor(cpp_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)

  js_out("$(my.cpp_class.name:no)::$(my.cpp_class.name:no)() {", my.indent_levels.first)
  js_out("$(my.cpp_class.context_name:no) = $(js_cpp_context_constructor_name(my.cpp_class, my.wrapper))();", my.indent_levels.second)
  js_out("}", my.indent_levels.first)

  js_out("$(my.cpp_class.name:no)::$(my.cpp_class.name:no)($(js_cpp_context_type(my.cpp_class.context_name)) $(my.cpp_class.context_name)) {", my.indent_levels.first)
  js_out("this->$(my.cpp_class.context_name:no) = $(my.cpp_class.context_name:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_destructor(cpp_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("$(my.cpp_class.name:no)::~$(my.cpp_class.name:no)() {", my.indent_levels.first)
  js_out("$(js_cpp_context_destructor_name(my.cpp_class, my.wrapper))(&$(my.cpp_class.context_name:no));", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_cpp_create_persistent_constructor(cpp_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("Nan::Persistent<v8::Function> $(my.cpp_class.name:no)::$(js_cpp_persistent_constructor_name());", my.indent_levels.first)
endfunction

function js_cpp_create_class(cpp_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_cpp_create_init(my.cpp_class, my.indent_levels.first)
  js_cpp_create_constructor(my.cpp_class, my.wrapper, my.indent_levels.first)
  js_cpp_create_new(my.cpp_class, my.indent_levels.first)
  for my.cpp_class.cpp_method
    js_cpp_create_method(cpp_method, my.cpp_class, my.wrapper, my.indent_level)
  endfor
  js_cpp_create_destructor(my.cpp_class, my.wrapper, my.indent_levels.first)
  js_cpp_create_persistent_constructor(my.cpp_class, my.indent_levels.first)
endfunction

# --------------------------------------------------------------------------------------------------
# JavaScript - Source
# --------------------------------------------------------------------------------------------------

function js_format_method_arguments(parent)
  arguments = ""
  for my.parent.js_argument
    arguments += js_argument.name
    if !last()
      arguments += ", "
    endif
  endfor
  return arguments
endfunction

function js_format_call_arguments(parent, wrapper)
  arguments = ""
  for my.parent.js_argument
    if js_js_argument_is_js_class_module(js_argument, my.wrapper)
      arguments += "$(js_argument.name:no).$(js_binding_property_name())"
    else
      arguments += js_argument.name
    endif
    if !last()
      arguments += ", "
    endif
  endfor
  return arguments
endfunction

function js_create_requires(js_class_module, wrapper, indent_level)
  if count(my.js_class_module->js_class.js_method) > 0
    my.indent_levels = js_create_indent_levels(my.indent_level)
    js_out("const { $(my.js_class_module->js_class.binding_name:no) } = require('bindings')('$(my.wrapper.name)');", my.indent_levels.first)
    for my.js_class_module.js_include_module
      js_out("const { $(js_include_module.js_class_name:no) } = require('./$(js_include_module.js_source_file:no)');", my.indent_levels.first)
    endfor
  endif
endfunction

function js_create_constant(js_constant, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("static get $(my.js_constant.name:no)() {", my.indent_levels.first)
  js_out("return $(my.js_constant.value:no);", my.indent_levels.second)
  js_out("}", my.indent_levels.first)
endfunction

function js_create_constructor(js_class, indent_level)
  if count(my.js_class.js_method) > 0
    my.indent_levels = js_create_indent_levels(my.indent_level)
    js_out("constructor(binding) {", my.indent_levels.first)
    js_out("this.$(js_binding_property_name()) = binding || new $(my.js_class.binding_name:no)();", my.indent_levels.second)
    js_out("}", my.indent_levels.first)
  endif
endfunction

function js_create_method_return(js_method, js_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  my.binding = js_method_is_static(my.js_method) ?? "$(my.js_class.binding_name:no)" ? "this.$(js_binding_property_name())"
  if defined(my.js_method->js_return) & js_js_return_is_js_class_module(my.js_method->js_return, my.wrapper)
    for my.wrapper.js_wrapped_class where my.js_method->js_return.class = js_wrapped_class.name
      js_out("return new $(js_wrapped_class.js_class_name:no)($(my.binding:no).$(my.js_method.binding_name:no)($(js_format_call_arguments(my.js_method, my.wrapper))));", my.indent_levels.first)
    endfor
  else
    js_out("return $(my.binding:no).$(my.js_method.binding_name:no)($(js_format_call_arguments(my.js_method, my.wrapper)));", my.indent_levels.first)
  endif
endfunction

function js_create_method(js_method, js_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  if js_method_is_static(my.js_method)
    js_out("static $(my.js_method.name:no)($(js_format_method_arguments(my.js_method):no)) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class, my.wrapper, my.indent_levels.second)
  else
    js_out("$(my.js_method.name:no)($(js_format_method_arguments(my.js_method):no)) {", my.indent_levels.first)
    js_create_method_return(my.js_method, my.js_class, my.wrapper, my.indent_levels.second)
  endif
  js_out("}", my.indent_levels.first)
endfunction

function js_create_class(js_class, wrapper, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("class $(my.js_class.name:no) {", my.indent_levels.first)
  for my.js_class.js_constant
    js_create_constant(js_constant, my.indent_levels.second)
  endfor
  js_create_constructor(my.js_class, my.indent_levels.second)
  for my.js_class.js_method
    js_create_method(js_method, my.js_class, my.wrapper, my.indent_levels.second)
  endfor
  js_out("}", my.indent_levels.first)
endfunction

function js_create_export_class(js_class, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("module.exports.$(my.js_class.name:no) = $(my.js_class.name:no);", my.indent_levels.first)
endfunction

function js_create_js_enum_module(js_enum_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("const $(my.js_enum_module.variable_name:no) = {", my.indent_levels.first)
  for my.js_enum_module.js_enum_value
    my.value = "$(js_enum_value.name:no): $(js_enum_value.value:no)"
    if !last()
      my.value += ","
    endif
    js_out(my.value, my.indent_levels.second)
  endfor
  js_out("};", my.indent_levels.first)
endfunction

function js_create_export_js_enum_module(js_enum_module, indent_level)
  my.indent_levels = js_create_indent_levels(my.indent_level)
  js_out("module.exports.$(my.js_enum_module.variable_name:no) = $(my.js_enum_module.variable_name:no);", my.indent_levels.first)
endfunction

# --------------------------------------------------------------------------------------------------
# Generate files
# --------------------------------------------------------------------------------------------------

function js_create_js_class_module_file(js_class_module, wrapper)
  for my.wrapper.js_wrapped_class where my.js_class_module.name = js_wrapped_class.name
    if defined(my.js_class_module->cpp_class)
      output js_wrapped_class.cpp_header_file_path
        js_cpp_header_create_ifndef(my.js_class_module.name)
        js_cpp_header_create_define(my.js_class_module.name)
        js_cpp_header_create_includes(my.js_class_module, my.wrapper)
        js_cpp_header_create_class(my.js_class_module->cpp_class, my.wrapper)
        js_cpp_header_create_endif()
      close
      output js_wrapped_class.cpp_source_file_path
        js_cpp_create_header_include(js_wrapped_class)
        js_cpp_create_class(my.js_class_module->cpp_class, my.wrapper)
      close
    endif
    output js_wrapped_class.js_source_file_path
      js_create_requires(my.js_class_module, my.wrapper)
      js_create_class(my.js_class_module->js_class, my.wrapper)
      js_create_export_class(my.js_class_module->js_class)
    close
  endfor
endfunction

function js_create_js_enum_module_file(js_enum_module, wrapper)
  for my.wrapper.js_wrapped_enum where my.js_enum_module.name = js_wrapped_enum.name
    output js_wrapped_enum.js_source_file_path
      js_create_js_enum_module(my.js_enum_module)
      js_create_export_js_enum_module(my.js_enum_module)
    close
  endfor
endfunction

function js_create_js_interface_module_file(js_interface_module, wrapper)
  for my.wrapper.js_wrapped_interface where my.js_interface_module.name = js_wrapped_interface.name
    output js_wrapped_interface.cpp_header_file_path
      js_cpp_header_create_ifndef(my.js_interface_module.name)
      js_cpp_header_create_define(my.js_interface_module.name)
      js_cpp_header_create_interface_includes(my.wrapper)
      js_cpp_header_create_interface(my.js_interface_module)
      js_cpp_header_create_endif()
    close
  endfor
endfunction

function js_create_js_module_files(source, wrapper)
  for my.source.js_module
    if defined(js_module->js_interface_module)
      js_create_js_interface_module_file(js_module->js_interface_module, my.wrapper)
    elsif defined(js_module->js_enum_module)
      js_create_js_enum_module_file(js_module->js_enum_module, my.wrapper)
    elsif defined(js_module->js_class_module)
      js_create_js_class_module_file(js_module->js_class_module, my.wrapper)
    else
      echo_fatal("Unknown 'js_module'", my)
    endif
  endfor
endfunction

function js_create_index_js_file(wrapper)
  my.indent_levels = js_create_indent_levels()
  output my.wrapper.index_js_file_path
    if count(my.wrapper.js_wrapped_class) > 0
      js_out("module.exports = Object.assign(", my.indent_levels.first)
      js_out("{},", my.indent_levels.second)
      for my.wrapper.js_wrapped_class
        my.require = "require('./$(js_wrapped_class.js_source_file:no)')"
        if !last() | !(count(my.wrapper.js_wrapped_enum) = 0)
          my.require += ","
        endif
        js_out(my.require, my.indent_levels.second)
      endfor
      for my.wrapper.js_wrapped_enum
        my.require = "require('./$(js_wrapped_enum.js_source_file:no)')"
        if !last()
          my.require += ","
        endif
        js_out(my.require, my.indent_levels.second)
      endfor
      js_out(");", my.indent_levels.first)
    else
      js_out("module.exports = {};", my.indent_levels.first)
    endif
  close
endfunction

endtemplate
