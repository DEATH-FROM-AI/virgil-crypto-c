# ---------------------------------------------------------------------------
#   This file is fully generated by the script -
#   'codegen/validator/validator_gen.gsl'
# ---------------------------------------------------------------------------

gsl from "common.gsl"

function echo_fatal_required_attr(entity, attr_name)
    time.now(my.date, my.time)
    my.dump_dir = ".generated/dump"
    my.dump_filename = "$(make_id(name(my.entity)))_$(my.date)_$(my.time).xml"
    item_save_to_file(my.entity, my.dump_filename, my.dump_dir)
    echo_fatal("Required attribute '$(name(my.entity)).$(my.attr_name:)' is not defined. " + \
               "See dump file: $(my.dump_dir:)/$(my.dump_filename:)", my)
endfunction

function echo_fatal_resticted_attr(entity, attr_name, valid_values)
    time.now(my.date, my.time)
    my.dump_dir = ".generated/dump"
    my.dump_filename = "$(make_id(name(my.entity)))_$(my.date)_$(my.time).xml"
    item_save_to_file(my.entity, my.dump_filename, my.dump_dir)
    echo_fatal("Possible values of the attribute '$(name(my.entity)).$(my.attr_name:)' " + \
               "are '{$(my.valid_values:)}', " + \
               "but found $(my.entity.$(my.attr_name)). " + \
               "See dump file: $(my.dump_dir:)/$(my.dump_filename:)", my)
endfunction

function validate_entity_scope(scope)
    echo_trace("[L1] Validate entity $(name(my.scope))", my)

    echo_trace("    Validate attribute: scope (default: public)", my)
    if defined(my.scope.scope)
        my.scope_is_valid = "0"
        my.scope_is_valid = my.scope_is_valid | (my.scope.scope = "public")
        my.scope_is_valid = my.scope_is_valid | (my.scope.scope = "private")
        my.scope_is_valid = my.scope_is_valid | (my.scope.scope = "internal")
        if !my.scope_is_valid
            echo_fatal_resticted_attr(my.scope, "scope", "public, private, internal")
        endif
    endif
endfunction

function validate_entity_c_prefix(c_prefix)
    echo_trace("[L1] Validate entity $(name(my.c_prefix))", my)

    echo_trace("    Validate attribute: c_prefix", my)
endfunction

function validate_entity_uid(uid)
    echo_trace("[L1] Validate entity $(name(my.uid))", my)

    echo_trace("    Validate attribute: uid", my)

    echo_trace("    Validate attribute: full_uid", my)
endfunction

function validate_entity_visibility(visibility)
    echo_trace("[L1] Validate entity $(name(my.visibility))", my)

    echo_trace("    Validate attribute: visibility (default: public)", my)
    if defined(my.visibility.visibility)
        my.visibility_is_valid = "0"
        my.visibility_is_valid = my.visibility_is_valid | (my.visibility.visibility = "public")
        my.visibility_is_valid = my.visibility_is_valid | (my.visibility.visibility = "private")
        if !my.visibility_is_valid
            echo_fatal_resticted_attr(my.visibility, "visibility", "public, private")
        endif
    endif
endfunction

function validate_entity_landlord(landlord)
    echo_trace("[L1] Validate entity $(name(my.landlord))", my)

    echo_trace("    Validate attribute: project", my)

    echo_trace("    Validate attribute: library", my)
endfunction

function validate_entity_require_scope(require_scope)
    echo_trace("[L1] Validate entity $(name(my.require_scope))", my)

    echo_trace("    Validate attribute: scope (default: public)", my)
    if defined(my.require_scope.scope)
        my.scope_is_valid = "0"
        my.scope_is_valid = my.scope_is_valid | (my.require_scope.scope = "public")
        my.scope_is_valid = my.scope_is_valid | (my.require_scope.scope = "private")
        my.scope_is_valid = my.scope_is_valid | (my.require_scope.scope = "context")
        if !my.scope_is_valid
            echo_fatal_resticted_attr(my.require_scope, "scope", "public, private, context")
        endif
    endif
endfunction

function validate_entity_require_base(require_base)
    echo_trace("[L1] Validate entity $(name(my.require_base))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_landlord(my.require_base)
    validate_entity_require_scope(my.require_base)

    echo_trace("    Validate attribute: module", my)

    echo_trace("    Validate attribute: header", my)

    echo_trace("    Validate attribute: feature", my)

    echo_trace("    Validate attribute: interface", my)

    echo_trace("    Validate attribute: class", my)

    echo_trace("    Validate attribute: impl", my)

    echo_trace("    Validate attribute: enum", my)
endfunction

function validate_entity_alternative(alternative)
    echo_trace("[L1] Validate entity $(name(my.alternative))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_require_base(my.alternative)

endfunction

function validate_entity_require(require)
    echo_trace("[L1] Validate entity $(name(my.require))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_require_base(my.require)

    echo_trace("    Check allowed entities", my)
    for my.require.alternative
        validate_entity_alternative(alternative)
    endfor

endfunction

function validate_entity_dependency(dependency)
    echo_trace("[L1] Validate entity $(name(my.dependency))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_landlord(my.dependency)

    echo_trace("    Validate attribute: name", my)
    if !defined(my.dependency.name)
        echo_fatal_required_attr(my.dependency, "name")
    endif

    echo_trace("    Validate attribute: interface", my)

    echo_trace("    Validate attribute: api", my)

    echo_trace("    Validate attribute: class", my)

    echo_trace("    Validate attribute: impl", my)

    echo_trace("    Validate attribute: type_name", my)

    echo_trace("    Validate attribute: has_observers (default: 0)", my)
    if defined(my.dependency.has_observers)
        my.has_observers_is_valid = "0"
        my.has_observers_is_valid = my.has_observers_is_valid | (my.dependency.has_observers = "0")
        my.has_observers_is_valid = my.has_observers_is_valid | (my.dependency.has_observers = "1")
        if !my.has_observers_is_valid
            echo_fatal_resticted_attr(my.dependency, "has_observers", "0, 1")
        endif
    endif

    echo_trace("    Validate attribute: is_observers_return_status (default: 0)", my)
    if defined(my.dependency.is_observers_return_status)
        my.is_observers_return_status_is_valid = "0"
        my.is_observers_return_status_is_valid = my.is_observers_return_status_is_valid | (my.dependency.is_observers_return_status = "0")
        my.is_observers_return_status_is_valid = my.is_observers_return_status_is_valid | (my.dependency.is_observers_return_status = "1")
        if !my.is_observers_return_status_is_valid
            echo_fatal_resticted_attr(my.dependency, "is_observers_return_status", "0, 1")
        endif
    endif
endfunction

function validate_entity_of_class(of_class)
    echo_trace("[L1] Validate entity $(name(my.of_class))", my)

    echo_trace("    Validate attribute: of_class", my)
endfunction

function validate_entity_component(component)
    echo_trace("[L1] Validate entity $(name(my.component))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_uid(my.component)
    validate_entity_of_class(my.component)
    validate_entity_c_prefix(my.component)

    echo_trace("    Validate attribute: feature", my)
endfunction

function validate_entity_scoped_component(scoped_component)
    echo_trace("[L1] Validate entity $(name(my.scoped_component))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_component(my.scoped_component)

    echo_trace("    Validate attribute: scope (default: public)", my)
    if defined(my.scoped_component.scope)
        my.scope_is_valid = "0"
        my.scope_is_valid = my.scope_is_valid | (my.scoped_component.scope = "public")
        my.scope_is_valid = my.scope_is_valid | (my.scoped_component.scope = "private")
        my.scope_is_valid = my.scope_is_valid | (my.scoped_component.scope = "internal")
        my.scope_is_valid = my.scope_is_valid | (my.scoped_component.scope = "hidden")
        if !my.scope_is_valid
            echo_fatal_resticted_attr(my.scoped_component, "scope", "public, private, internal, hidden")
        endif
    endif
endfunction

function validate_entity_definition(definition)
    echo_trace("[L1] Validate entity $(name(my.definition))", my)

    echo_trace("    Validate attribute: definition (default: private)", my)
    if defined(my.definition.definition)
        my.definition_is_valid = "0"
        my.definition_is_valid = my.definition_is_valid | (my.definition.definition = "public")
        my.definition_is_valid = my.definition_is_valid | (my.definition.definition = "private")
        my.definition_is_valid = my.definition_is_valid | (my.definition.definition = "external")
        if !my.definition_is_valid
            echo_fatal_resticted_attr(my.definition, "definition", "public, private, external")
        endif
    endif
endfunction

function validate_entity_constant(constant)
    echo_trace("[L1] Validate entity $(name(my.constant))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.constant)
    validate_entity_definition(my.constant)

    echo_trace("    Validate attribute: name", my)
    if !defined(my.constant.name)
        echo_fatal_required_attr(my.constant, "name")
    endif

    echo_trace("    Validate attribute: value", my)
endfunction

function validate_entity_access(access)
    echo_trace("[L1] Validate entity $(name(my.access))", my)

    echo_trace("    Validate attribute: access", my)
    if defined(my.access.access)
        my.access_is_valid = "0"
        my.access_is_valid = my.access_is_valid | (my.access.access = "readonly")
        my.access_is_valid = my.access_is_valid | (my.access.access = "writeonly")
        my.access_is_valid = my.access_is_valid | (my.access.access = "readwrite")
        my.access_is_valid = my.access_is_valid | (my.access.access = "disown")
        if !my.access_is_valid
            echo_fatal_resticted_attr(my.access, "access", "readonly, writeonly, readwrite, disown")
        endif
    endif

    echo_trace("    Validate attribute: ownership", my)
endfunction

function validate_entity_string(string)
    echo_trace("[L1] Validate entity $(name(my.string))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_access(my.string)

    echo_trace("    Validate attribute: length (default: null_terminated)", my)
    if defined(my.string.length)
        my.length_is_valid = "0"
        my.length_is_valid = my.length_is_valid | (my.string.length = "null_terminated")
        my.length_is_valid = my.length_is_valid | (my.string.length = "given")
        my.length_is_valid = my.length_is_valid | (my.string.length = "fixed")
        my.length_is_valid = my.length_is_valid | (my.string.length = "derived")
        if !my.length_is_valid
            echo_fatal_resticted_attr(my.string, "length", "null_terminated, given, fixed, derived")
        endif
    endif

    echo_trace("    Validate attribute: length_constant", my)
endfunction

function validate_entity_array(array)
    echo_trace("[L1] Validate entity $(name(my.array))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_access(my.array)

    echo_trace("    Validate attribute: length", my)
    if defined(my.array.length)
        my.length_is_valid = "0"
        my.length_is_valid = my.length_is_valid | (my.array.length = "null_terminated")
        my.length_is_valid = my.length_is_valid | (my.array.length = "given")
        my.length_is_valid = my.length_is_valid | (my.array.length = "known")
        my.length_is_valid = my.length_is_valid | (my.array.length = "fixed")
        my.length_is_valid = my.length_is_valid | (my.array.length = "derived")
        if !my.length_is_valid
            echo_fatal_resticted_attr(my.array, "length", "null_terminated, given, known, fixed, derived")
        endif
    endif

    echo_trace("    Validate attribute: length_constant", my)
endfunction

function validate_entity_instance(instance)
    echo_trace("[L1] Validate entity $(name(my.instance))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_access(my.instance)
    validate_entity_landlord(my.instance)

    echo_trace("    Check allowed entities", my)
    for my.instance.string
        validate_entity_string(string)
    endfor

    for my.instance.array
        validate_entity_array(array)
    endfor

    echo_trace("    Validate attribute: type", my)
    if defined(my.instance.type)
        my.type_is_valid = "0"
        my.type_is_valid = my.type_is_valid | (my.instance.type = "nothing")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "boolean")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "integer")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "unsigned")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "size")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "byte")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "string")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "char")
        my.type_is_valid = my.type_is_valid | (my.instance.type = "varargs")
        if !my.type_is_valid
            echo_fatal_resticted_attr(my.instance, "type", "nothing, boolean, integer, unsigned, size, byte, string, char, varargs")
        endif
    endif

    echo_trace("    Validate attribute: class", my)

    echo_trace("    Validate attribute: enum", my)

    echo_trace("    Validate attribute: callback", my)

    echo_trace("    Validate attribute: interface", my)

    echo_trace("    Validate attribute: api", my)

    echo_trace("    Validate attribute: impl", my)

    echo_trace("    Validate attribute: size", my)
    if defined(my.instance.size)
        my.size_is_valid = "0"
        my.size_is_valid = my.size_is_valid | (my.instance.size = "1")
        my.size_is_valid = my.size_is_valid | (my.instance.size = "2")
        my.size_is_valid = my.size_is_valid | (my.instance.size = "4")
        my.size_is_valid = my.size_is_valid | (my.instance.size = "8")
        if !my.size_is_valid
            echo_fatal_resticted_attr(my.instance, "size", "1, 2, 4, 8")
        endif
    endif

    echo_trace("    Validate attribute: is_reference", my)
    if defined(my.instance.is_reference)
        my.is_reference_is_valid = "0"
        my.is_reference_is_valid = my.is_reference_is_valid | (my.instance.is_reference = "0")
        my.is_reference_is_valid = my.is_reference_is_valid | (my.instance.is_reference = "1")
        if !my.is_reference_is_valid
            echo_fatal_resticted_attr(my.instance, "is_reference", "0, 1")
        endif
    endif

    echo_trace("    Validate attribute: require_definition", my)
    if defined(my.instance.require_definition)
        my.require_definition_is_valid = "0"
        my.require_definition_is_valid = my.require_definition_is_valid | (my.instance.require_definition = "public")
        my.require_definition_is_valid = my.require_definition_is_valid | (my.instance.require_definition = "private")
        if !my.require_definition_is_valid
            echo_fatal_resticted_attr(my.instance, "require_definition", "public, private")
        endif
    endif
endfunction

function validate_entity_property(property)
    echo_trace("[L1] Validate entity $(name(my.property))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_instance(my.property)
    validate_entity_uid(my.property)

    echo_trace("    Validate attribute: name", my)
    if !defined(my.property.name)
        echo_fatal_required_attr(my.property, "name")
    endif

    echo_trace("    Validate attribute: bits", my)
endfunction

function validate_entity_declaration(declaration)
    echo_trace("[L1] Validate entity $(name(my.declaration))", my)

    echo_trace("    Validate attribute: declaration (default: public)", my)
    if defined(my.declaration.declaration)
        my.declaration_is_valid = "0"
        my.declaration_is_valid = my.declaration_is_valid | (my.declaration.declaration = "public")
        my.declaration_is_valid = my.declaration_is_valid | (my.declaration.declaration = "private")
        my.declaration_is_valid = my.declaration_is_valid | (my.declaration.declaration = "external")
        if !my.declaration_is_valid
            echo_fatal_resticted_attr(my.declaration, "declaration", "public, private, external")
        endif
    endif
endfunction

function validate_entity_enum(enum)
    echo_trace("[L1] Validate entity $(name(my.enum))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.enum)
    validate_entity_component(my.enum)
    validate_entity_visibility(my.enum)
    validate_entity_declaration(my.enum)
    validate_entity_definition(my.enum)

    echo_trace("    Check allowed entities", my)
    for my.enum.constant
        validate_entity_constant(constant)
    endfor

    echo_trace("    Validate attribute: name", my)
endfunction

function validate_entity_return(return)
    echo_trace("[L1] Validate entity $(name(my.return))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_instance(my.return)

endfunction

function validate_entity_argument(argument)
    echo_trace("[L1] Validate entity $(name(my.argument))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_instance(my.argument)
    validate_entity_uid(my.argument)

    echo_trace("    Validate attribute: name", my)
    if !defined(my.argument.name)
        echo_fatal_required_attr(my.argument, "name")
    endif
endfunction

function validate_entity_callback(callback)
    echo_trace("[L1] Validate entity $(name(my.callback))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.callback)
    validate_entity_declaration(my.callback)

    echo_trace("    Check allowed entities", my)
    for my.callback.return
        validate_entity_return(return)
    endfor

    for my.callback.argument
        validate_entity_argument(argument)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.callback.name)
        echo_fatal_required_attr(my.callback, "name")
    endif
endfunction

function validate_entity_cast(cast)
    echo_trace("[L1] Validate entity $(name(my.cast))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_instance(my.cast)

endfunction

function validate_entity_value(value)
    echo_trace("[L1] Validate entity $(name(my.value))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_instance(my.value)

    echo_trace("    Check allowed entities", my)
    for my.value.cast
        validate_entity_cast(cast)
    endfor

    echo_trace("    Validate attribute: value", my)
    if !defined(my.value.value)
        echo_fatal_required_attr(my.value, "value")
    endif
endfunction

function validate_entity_variable(variable)
    echo_trace("[L1] Validate entity $(name(my.variable))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.variable)
    validate_entity_visibility(my.variable)
    validate_entity_declaration(my.variable)
    validate_entity_definition(my.variable)
    validate_entity_instance(my.variable)

    echo_trace("    Check allowed entities", my)
    for my.variable.value
        validate_entity_value(value)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.variable.name)
        echo_fatal_required_attr(my.variable, "name")
    endif
endfunction

function validate_entity_lang(lang)
    echo_trace("[L1] Validate entity $(name(my.lang))", my)

    echo_trace("    Validate attribute: lang (default: c)", my)
    if defined(my.lang.lang)
        my.lang_is_valid = "0"
        my.lang_is_valid = my.lang_is_valid | (my.lang.lang = "c")
        my.lang_is_valid = my.lang_is_valid | (my.lang.lang = "java")
        my.lang_is_valid = my.lang_is_valid | (my.lang.lang = "csharp")
        if !my.lang_is_valid
            echo_fatal_resticted_attr(my.lang, "lang", "c, java, csharp")
        endif
    endif
endfunction

function validate_entity_code(code)
    echo_trace("[L1] Validate entity $(name(my.code))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_lang(my.code)

    echo_trace("    Validate attribute: type (default: generated)", my)
    if defined(my.code.type)
        my.type_is_valid = "0"
        my.type_is_valid = my.type_is_valid | (my.code.type = "stub")
        my.type_is_valid = my.type_is_valid | (my.code.type = "generated")
        my.type_is_valid = my.type_is_valid | (my.code.type = "handwritten")
        if !my.type_is_valid
            echo_fatal_resticted_attr(my.code, "type", "stub, generated, handwritten")
        endif
    endif
endfunction

function validate_entity_method(method)
    echo_trace("[L1] Validate entity $(name(my.method))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.method)
    validate_entity_visibility(my.method)
    validate_entity_declaration(my.method)
    validate_entity_definition(my.method)

    echo_trace("    Check allowed entities", my)
    for my.method.return
        validate_entity_return(return)
    endfor

    for my.method.argument
        validate_entity_argument(argument)
    endfor

    for my.method.variable
        validate_entity_variable(variable)
    endfor

    for my.method.code
        validate_entity_code(code)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.method.name)
        echo_fatal_required_attr(my.method, "name")
    endif

    echo_trace("    Validate attribute: is_static (default: 0)", my)
    if defined(my.method.is_static)
        my.is_static_is_valid = "0"
        my.is_static_is_valid = my.is_static_is_valid | (my.method.is_static = "0")
        my.is_static_is_valid = my.is_static_is_valid | (my.method.is_static = "1")
        if !my.is_static_is_valid
            echo_fatal_resticted_attr(my.method, "is_static", "0, 1")
        endif
    endif

    echo_trace("    Validate attribute: nodiscard (default: 0)", my)
    if defined(my.method.nodiscard)
        my.nodiscard_is_valid = "0"
        my.nodiscard_is_valid = my.nodiscard_is_valid | (my.method.nodiscard = "0")
        my.nodiscard_is_valid = my.nodiscard_is_valid | (my.method.nodiscard = "1")
        if !my.nodiscard_is_valid
            echo_fatal_resticted_attr(my.method, "nodiscard", "0, 1")
        endif
    endif
endfunction

function validate_entity_macros(macros)
    echo_trace("[L1] Validate entity $(name(my.macros))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_definition(my.macros)

    echo_trace("    Check allowed entities", my)
    for my.macros.code
        validate_entity_code(code)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.macros.name)
        echo_fatal_required_attr(my.macros, "name")
    endif

    echo_trace("    Validate attribute: is_method (default: 0)", my)
    if defined(my.macros.is_method)
        my.is_method_is_valid = "0"
        my.is_method_is_valid = my.is_method_is_valid | (my.macros.is_method = "0")
        my.is_method_is_valid = my.is_method_is_valid | (my.macros.is_method = "1")
        if !my.is_method_is_valid
            echo_fatal_resticted_attr(my.macros, "is_method", "0, 1")
        endif
    endif
endfunction

function validate_entity_macroses(macroses)
    echo_trace("[L1] Validate entity $(name(my.macroses))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_definition(my.macroses)

    echo_trace("    Check allowed entities", my)
    for my.macroses.macros
        validate_entity_macros(macros)
    endfor

    for my.macroses.code
        validate_entity_code(code)
    endfor

endfunction

function validate_entity_struct(struct)
    echo_trace("[L1] Validate entity $(name(my.struct))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scoped_component(my.struct)
    validate_entity_visibility(my.struct)
    validate_entity_declaration(my.struct)
    validate_entity_definition(my.struct)

    echo_trace("    Check allowed entities", my)
    for my.struct.property
        validate_entity_property(property)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.struct.name)
        echo_fatal_required_attr(my.struct, "name")
    endif
endfunction

function validate_entity_class(class)
    echo_trace("[L1] Validate entity $(name(my.class))", my)
    echo_trace("    Check inherited attributes and entities", my)
    validate_entity_scope(my.class)
    validate_entity_c_prefix(my.class)
    validate_entity_uid(my.class)
    validate_entity_visibility(my.class)

    echo_trace("    Check allowed entities", my)
    for my.class.require
        validate_entity_require(require)
    endfor

    for my.class.dependency
        validate_entity_dependency(dependency)
    endfor

    for my.class.constant
        validate_entity_constant(constant)
    endfor

    for my.class.property
        validate_entity_property(property)
    endfor

    for my.class.enum
        validate_entity_enum(enum)
    endfor

    for my.class.callback
        validate_entity_callback(callback)
    endfor

    for my.class.method
        validate_entity_method(method)
    endfor

    for my.class.macros
        validate_entity_macros(macros)
    endfor

    for my.class.macroses
        validate_entity_macroses(macroses)
    endfor

    for my.class.struct
        validate_entity_struct(struct)
    endfor

    for my.class.variable
        validate_entity_variable(variable)
    endfor

    echo_trace("    Validate attribute: name", my)
    if !defined(my.class.name)
        echo_fatal_required_attr(my.class, "name")
    endif

    echo_trace("    Validate attribute: context (default: none)", my)
    if defined(my.class.context)
        my.context_is_valid = "0"
        my.context_is_valid = my.context_is_valid | (my.class.context = "none")
        my.context_is_valid = my.context_is_valid | (my.class.context = "public")
        my.context_is_valid = my.context_is_valid | (my.class.context = "private")
        my.context_is_valid = my.context_is_valid | (my.class.context = "internal")
        if !my.context_is_valid
            echo_fatal_resticted_attr(my.class, "context", "none, public, private, internal")
        endif
    endif

    echo_trace("    Validate attribute: lifecycle (default: default)", my)
    if defined(my.class.lifecycle)
        my.lifecycle_is_valid = "0"
        my.lifecycle_is_valid = my.lifecycle_is_valid | (my.class.lifecycle = "none")
        my.lifecycle_is_valid = my.lifecycle_is_valid | (my.class.lifecycle = "default")
        if !my.lifecycle_is_valid
            echo_fatal_resticted_attr(my.class, "lifecycle", "none, default")
        endif
    endif

    echo_trace("    Validate attribute: is_value_type (default: 0)", my)
    if defined(my.class.is_value_type)
        my.is_value_type_is_valid = "0"
        my.is_value_type_is_valid = my.is_value_type_is_valid | (my.class.is_value_type = "0")
        my.is_value_type_is_valid = my.is_value_type_is_valid | (my.class.is_value_type = "1")
        if !my.is_value_type_is_valid
            echo_fatal_resticted_attr(my.class, "is_value_type", "0, 1")
        endif
    endif
endfunction

function validate_entity_ancestor(ancestor)
    echo_trace("[L1] Validate entity $(name(my.ancestor))", my)

    echo_trace("    Validate attribute: id", my)
    if !defined(my.ancestor.id)
        echo_fatal_required_attr(my.ancestor, "id")
    endif

    echo_trace("    Validate attribute: name", my)
    if !defined(my.ancestor.name)
        echo_fatal_required_attr(my.ancestor, "name")
    endif
endfunction

function validate_entity_lineage(lineage)
    echo_trace("[L1] Validate entity $(name(my.lineage))", my)

    echo_trace("    Check allowed entities", my)
    for my.lineage.ancestor
        validate_entity_ancestor(ancestor)
    endfor

endfunction

