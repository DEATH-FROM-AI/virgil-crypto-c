<class name="ratchet" context="internal" scope="internal">

    <require impl="sha512" project="foundation" scope="private"/>
    <require impl="hmac" project="foundation" scope="private"/>
    <require impl="hkdf" project="foundation" scope="private"/>
    <require module="buffer defs" scope="private" project="common"/>

    <require class="ratchet common hidden" scope="context"/>
    <require class="ratchet chain key" scope="private"/>
    <require class="ratchet receiver chain" scope="private"/>
    <require module="ratchet message defs" scope="private"/>
    <require class="ratchet keys" scope="context"/>

    <require header="RatchetSession.pb.h" scope="public"/>
    <require header="RatchetMessage.pb.h" scope="public"/>
    <require header="pb_decode.h" scope="public"/>
    <require header="pb_encode.h" scope="public"/>

    <require header="ed25519/ed25519.h" scope="private"/>

    <dependency name="rng" interface="random" project="foundation" has_observers="1"/>
    <property name="cipher" class="ratchet cipher" access="readwrite"/>
    <property name="padding" class="ratchet padding" access="readwrite"/>
    <property name="sender chain" class="ratchet sender chain" access="readwrite"/>
    <property name="prev sender chain count" type="unsigned" size="4" access="readwrite"/>
    <property name="receiver chains" class="ratchet receiver chains" access="readwrite"/>
    <property name="skipped messages" class="ratchet skipped messages" access="readwrite"/>
    <property name="root key" type="byte" access="readwrite">
        <array length="fixed" length_constant=".(class_ratchet_common_hidden_constant_ratchet_shared_key_len)"/>
    </property>

    <method name="decrypt for existing chain" declaration="private">
        <argument name="chain key" class="ratchet chain key"/>
        <argument name="message" class="RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="buffer" class="buffer"/>

        <return enum="status"/>
    </method>

    <method name="decrypt for new chain" declaration="private">
        <argument name="message" class="RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="buffer" class="buffer"/>

        <return enum="status"/>
    </method>

    <method name="respond">
        <argument name="shared secret" class="data"/>
        <argument name="message" class="RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="RegularMessageHeader" library="nanopb" access="readonly"/>

        <return enum="status"/>
    </method>

    <method name="initiate">
        <argument name="shared secret" class="data"/>

        <return enum="status"/>
    </method>

    <method name="encrypt len">
        <argument name="plain text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="encrypt">
        <argument name="plain text" class="data"/>
        <argument name="regular message" class="RegularMessage" library="nanopb" access="readwrite"/>
        <argument name="regular message header" class="RegularMessageHeader" library="nanopb" access="readwrite"/>

        <return enum="status"/>
    </method>

    <method name="decrypt len">
        <argument name="cipher text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="decrypt">
        <argument name="regular message" class="RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="plain text" class="buffer">
            <length method="decrypt len">
                <proxy argument="cipher text" to="cipher text len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="generate sender chain keypair" declaration="private">
        <argument name="sender chain" class="ratchet sender chain" access="readwrite"/>

        <return enum="status"/>
    </method>

    <method name="serialize">
        <argument name="ratchet pb" class="Ratchet" library="nanopb" access="readwrite"/>
    </method>

    <method name="deserialize" is_static="1">
        <argument name="ratchet pb" class="Ratchet" library="nanopb" access="readwrite"/>
        <argument name="ratchet" class="self" access="readwrite"/>
    </method>

</class>
