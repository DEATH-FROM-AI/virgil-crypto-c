<class name="ratchet cipher" context="internal" scope="private">

    <require impl="sha512" project="foundation" scope="private"/>
    <require impl="hkdf" project="foundation" scope="private"/>
    <require module="buffer defs" scope="private" project="common"/>

    <require class="ratchet common hidden" scope="context"/>

    <require header="RatchetMessage.pb.h" scope="public"/>
    <require header="pb_decode.h" scope="public"/>
    <require header="pb_encode.h" scope="public"/>

    <dependency name="rng" interface="random" project="foundation"/>
    <property name="aes256 gcm" impl="aes256 gcm" project="foundation"/>

    <constant name="key len" value="32"/>

    <method name="encrypt len">
        <argument name="plain text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="decrypt len">
        <argument name="cipher text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="setup cipher" declaration="private">
        <argument name="key" class="data"/>
    </method>

    <method name="padded len" declaration="private" is_static="1">
        <argument name="plain text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="add padding" declaration="private">
        <argument name="plain text" class="data"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="buffer"/>
    </method>

    <method name="encrypt">
        <argument name="key" class="data"/>
        <argument name="plain text" class="data"/>

        <argument name="buffer" class="buffer">
            <length method="encrypt len">
                <proxy argument="plain text" to="plain text len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="remove padding" declaration="private" is_static="1">
        <argument name="decrypted text" class="data"/>
        <argument name="buffer" class="buffer"/>

        <return enum="status"/>
    </method>

    <method name="decrypt">
        <argument name="key" class="data"/>
        <argument name="cipher text" class="data"/>

        <argument name="buffer" class="buffer">
            <length method="decrypt len">
                <proxy argument="cipher text" to="cipher text len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

</class>
