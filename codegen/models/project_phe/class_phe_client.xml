<class name="phe client" context="private">

    <require class="phe common" scope="public"/>
    <require class="phe utils" scope="private"/>
    <require impl="sha512" project="foundation" scope="private"/>
    <require impl="hkdf" project="foundation" scope="private"/>
    <require impl="ctr drbg" project="foundation" scope="private"/>

    <require header="PHEModels.pb.h" scope="private"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <dependency name="random" interface="random" project="foundation"/>

    <property name="utils" class="phe utils"/>
    <property name="phe hash" class="phe hash" access="readwrite"/>
    <property name="group" class="mbedtls_ecp_group" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="private key" type="byte" access="readwrite">
        <array length="fixed" length_constant=".(class_phe_common_constant_phe_private_key_length)"/>
    </property>

    <constructor name="with private key">
        <argument name="client private key" class="data"/>
    </constructor>

    <method name="enrollment record len">
        <return type="size"/>
    </method>

    <method name="enroll account">
        <argument name="enrollment response" class="data"/>
        <argument name="password" class="data"/>
        <argument name="enrollment record" class="buffer" access="writeonly">
            <length method="enrollment record len"/>
        </argument>
        <argument name="account key" class="buffer" access="writeonly">
            <length constant=".(class_phe_common_constant_phe_secret_message_length)"/>
        </argument>

        <return enum="error"/>
    </method>

    <method name="verify password request len">
        <return type="size"/>
    </method>

    <method name="create verify password request">
        <argument name="password" class="data"/>
        <argument name="enrollment record" class="data"/>
        <argument name="verify password request" class="buffer" access="writeonly">
            <length method="verify password request len"/>
        </argument>

        <return enum="error"/>
    </method>

    <method name="check response and decrypt">
        <argument name="password" class="data"/>
        <argument name="enrollment record" class="data"/>
        <argument name="verify password response" class="data"/>
        <argument name="account key" class="buffer" access="writeonly">
            <length constant=".(class_phe_common_constant_phe_secret_message_length)"/>
        </argument>

        <return enum="error"/>
    </method>

    <method name="check success proof" declaration="private">
        <argument name="success proof" class="ProofOfSuccess" library="nanopb"/>
        <argument name="nonce" class="data"/>
        <argument name="c0" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="c1" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="c0_b" class="data"/>
        <argument name="c1_b" class="data"/>

        <return enum="error"/>
    </method>

    <method name="check fail proof" declaration="private">
        <argument name="fail proof" class="ProofOfFail" library="nanopb"/>
        <argument name="c0" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="c1" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="hs0" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="hc0" class="mbedtls_ecp_point" library="mbedtls"/>
        <argument name="hc1" class="mbedtls_ecp_point" library="mbedtls"/>

        <return enum="error"/>
    </method>

    <method name="rotate server private key">
        <argument name="rotation token" class="data"/>

        <return enum="error"/>
    </method>

    <method name="update enrollment record" is_static="1">
        <argument name="enrollment record" class="data"/>
        <argument name="rotation token" class="data"/>
        <argument name="new enrollment record" class="buffer" access="writeonly">
            <length method="enrollment record len"/>
        </argument>

        <return enum="error"/>
    </method>

    <method name="rotate client private key">
        <argument name="rotation token" class="data"/>

        <return enum="error"/>
    </method>
</class>
