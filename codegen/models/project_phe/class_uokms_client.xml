<class name="uokms client" context="internal">
    <require class="phe common" scope="public"/>
    <require impl="ctr drbg" project="foundation" scope="private"/>

    <require class="phe common" scope="context"/>
    <require header="mbedtls/ecp.h" scope="context"/>
    <require header="mbedtls/bignum.h" scope="context"/>

    <require header="UOKMSModels.pb.h" scope="private"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <require impl="hkdf" project="foundation" scope="private"/>
    <require impl="sha512" project="foundation" scope="private"/>

    <require module="buffer defs" scope="private" project="common"/>
    <require module="mbedtls bridge random" scope="private" project="foundation"/>

    <dependency name="random" interface="random" project="foundation"  has_observers="1">
        Random used for key generation, proofs, etc.
    </dependency>
    <dependency name="operation random" interface="random" project="foundation"  has_observers="1">
        Random used for crypto operations to make them const-time
    </dependency>

    <property name="proof verifier" class="uokms proof verifier"/>
    <property name="group" class="mbedtls_ecp_group" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="kc private" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="ks public" class="mbedtls_ecp_point" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="k public" class="mbedtls_ecp_point" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="keys are set" type="boolean"/>

    <method name="setup defaults">
        <return enum="status"/>
    </method>

    <method name="set keys">
        Sets client private and server public key
        Call this method before any other methods except `update enrollment record` and `generate client private key`
        This function should be called only once

        <argument name="client private key" class="data">
            Client's private key
            Use `generate client private key` to generate this key, or generate NIST P-256 private key yourself
        </argument>
        <argument name="server public key" class="data">
            Server's public key. Get it from your phe service
        </argument>

        <return enum="status">
            - vsce_SUCCESS if operation succeeded
            - vsce_error_INVALID_PRIVATE_KEY if private key is invalid
            - vsce_error_INVALID_ECP if public key is invalid
        </return>
    </method>

    <method name="generate client private key">
        Generates client private key

        <argument name="client private key" class="buffer" access="writeonly">
            Client's private key phe_common_constant_phe_private_key_length
            Buffer size should be >= .(class_phe_common_constant_phe_private_key_length)

            <length constant="phe private key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_error_RNG_ERROR in case rng failed
        </return>
    </method>

    <method name="generate encrypt wrap">
        Uses fresh EnrollmentResponse from PHE server (see get enrollment func) and user's password (or its hash) to create
        a new EnrollmentRecord which is then supposed to be stored in a database for further authentication
        Also generates a random seed which then can be used to generate symmetric or private key to protect user's data

        <argument name="wrap" class="buffer" access="writeonly">
            EnrollmentRecord which should be stored in a database for further authentication.
            Buffer size should be >= enrollment record len

            <length constant="phe public key length" class="phe common"/>
        </argument>
        <argument name="encryption key len" type="size"/>

        <argument name="encryption key" class="buffer" access="writeonly">
            Random seed which can be used to generate symmetric or private key to protect user's data
            Buffer size should be >= .(class_phe_common_constant_phe_account_key_length)

            <length argument="encryption key len"/>
        </argument>

        <return enum="status">
            - vsce_error_PROTOBUF_DECODE_ERROR if input model is invalid
            - vsce_error_INVALID_ECP if input points are invalid
            - vsce_error_INVALID_SUCCESS_PROOF if provided proof is not valid
            - vsce_error_RNG_ERROR if rng failed
        </return>
    </method>

    <method name="generate decrypt request">
        Decrypts data (and verifies additional data) using account key

        <argument name="wrap" class="data">
            Encrypted data
        </argument>

        <argument name="deblind factor" class="buffer" access="writeonly">
            Encrypted data

            <length constant="phe private key length" class="phe common"/>
        </argument>

        <argument name="decrypt request" class="buffer" access="writeonly">
            Encrypted data

            <length constant="phe public key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_error_AES_ERROR in case AES returned error
        </return>
    </method>

    <method name="process decrypt response">
        Decrypts data (and verifies additional data) using account key

        <argument name="wrap" class="data">
            Encrypted data
        </argument>

        <argument name="decrypt response" class="data">
            Encrypted data
        </argument>

        <argument name="deblind factor" class="data">
            Encrypted data
        </argument>

        <argument name="encryption key len" type="size"/>

        <argument name="encryption key" class="buffer" access="writeonly">
            Random seed which can be used to generate symmetric or private key to protect user's data
            Buffer size should be >= .(class_phe_common_constant_phe_account_key_length)
            <length argument="encryption key len"/>
        </argument>

        <return enum="status">
            - vsce_error_AES_ERROR in case AES returned error
        </return>
    </method>

    <method name="rotate keys">
        Updates client's private key and server's public key using server's update token
        Use output values to instantiate new client instance with new keys

        <argument name="update token" class="data">
            Update token provided by PHE server
        </argument>
        <argument name="new client private key" class="buffer" access="writeonly">
            New client private key
            Buffer size should be >= .(class_phe_common_constant_phe_private_key_length)

            <length constant="phe private key length" class="phe common"/>
        </argument>
        <argument name="new server public key" class="buffer" access="writeonly">
            New PHE server public key
            Buffer size should be >= .(class_phe_common_constant_phe_public_key_length)

            <length constant="phe public key length" class="phe common"/>
        </argument>

        <return enum="status">

        </return>
    </method>

    <method name="get op group" declaration="private">
        <return class="mbedtls_ecp_group" library="mbedtls" access="readwrite"/>
    </method>

    <method name="free op group" declaration="private" is_static="1">
        <argument name="op group" class="mbedtls_ecp_group" library="mbedtls" access="readwrite"/>
    </method>
</class>
