<class name="group session" context="internal">

    <constant name="sender id len" value="32">
        Sender id len
    </constant>

    <constant name="max plain text len" value="30000">
        Max plain text len
    </constant>

    <require module="buffer defs" scope="private" project="common"/>

    <require module="group session typedefs" scope="context"/>

    <require impl="ctr drbg" scope="private"/>

    <require header="GroupMessage.pb.h" scope="private"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <require module="group session message defs" scope="private"/>
    <require module="group session message internal" scope="private"/>
    <require module="group session ticket internal" scope="private"/>

    <require impl="key asn1 deserializer" scope="private"/>
    <require header="ed25519/ed25519.h" scope="private"/>

    <dependency name="rng" interface="random" has_observers="1">
        Random
    </dependency>

    <property name="cipher" class="message cipher" access="readwrite"/>
    <property name="padding" class="message padding" access="readwrite"/>
    <property name="session id" class="vscf_group_session_id_t" is_reference="0" library="internal" access="readwrite"/>
    <property name="last epoch" class="group session epoch node" access="readwrite"/>
    <property name="first epoch" class="group session epoch node" access="readwrite"/>

    <method name="get current epoch" is_const="1">
        Returns current epoch.

        <return type="unsigned" size="4" access="readwrite">
            Current epoch
        </return>
    </method>

    <method name="setup defaults">
        Setups default dependencies:
        - RNG: CTR DRBG

        <return enum="status">
            Error
        </return>
    </method>

    <method name="get session id" is_const="1">
        Returns session id.

        <return class="data">
            Session id
        </return>
    </method>

    <method name="add epoch">
        <argument name="message" class="group session message">
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="encrypt">
        Encrypts data

        <argument name="plain text" class="data">
            Data to encrypt. Should be less than maximum allowed value.
        </argument>

        <argument name="private key" class="data">
            Ed25519 PKCS8 identity private key
        </argument>

        <argument name="sender id" class="data">
            Sender identifier. 32 bytes
        </argument>

        <argument name="error" class="error" access="readwrite">
            Error context to return error
        </argument>

        <return class="group session message" access="disown">
            Result message. Use serialize to send this over the wire.
        </return>
    </method>

    <method name="decrypt len">
        Calculates size of buffer sufficient to store decrypted message

        <argument name="message" class="group session message">
            Message to decrypt
        </argument>

        <return type="size">
            Size of buffer sufficient to store decrypted message
        </return>
    </method>

    <method name="decrypt">
        Decrypts message

        <argument name="message" class="group session message">
            Message to decrypt. Use deserialize to obtain message from data
        </argument>

        <argument name="public key" class="data">
            Ed25519 PKCS8 identity public key
        </argument>

        <argument name="sender id" class="data">
            Sender identifier. 32 bytes
        </argument>

        <argument name="plain text" class="buffer">
            Decrypted data

            <length method="decrypt len">
                <proxy argument="message" to="message"/>
            </length>
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="create group ticket" is_const="1">
        Creates ticket with new key for adding or removing participants.

        <argument name="error" class="error" access="readwrite">
            Error context to return error
        </argument>

        <return class="group session ticket" access="disown">
            Ticket
        </return>
    </method>

</class>
