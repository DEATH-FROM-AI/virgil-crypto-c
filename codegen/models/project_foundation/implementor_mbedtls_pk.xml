<implementor name="mbedtls pk" is_default="1">
    Asymmetric cryptography implementation with ARM mbedTLS.

    <implementation name="rsa public key">
        Handles RSA public key.

        <require header="mbedtls/rsa.h" scope="context"/>

        <property name="impl tag" enum="impl/tag"/>
        <property name="rsa ctx" class="mbedtls_rsa_context" library="mbedtls" is_reference="0"/>

        <interface name="key"/>
        <interface name="public key"/>

        <method name="key exponent" visibility="public">
            Return public key exponent.

            <return type="size"/>
        </method>
    </implementation>


    <implementation name="rsa private key">
        Handles RSA private key.

        <require header="mbedtls/rsa.h" scope="context"/>

        <property name="impl tag" enum="impl/tag"/>
        <property name="rsa ctx" class="mbedtls_rsa_context" library="mbedtls" is_reference="0"/>

        <interface name="key"/>
        <interface name="private key"/>
    </implementation>


    <implementation name="rsa">
        RSA implementation.

        <require library="mbedtls" feature="RSA C"/>
        <require library="mbedtls" feature="BIGNUM C"/>
        <require library="mbedtls" feature="PKCS1 V21"/>

        <require class="asn1rd"/>
        <require class="asn1wr"/>
        <require class="mbedtls bignum asn1 reader"/>
        <require class="mbedtls bignum asn1 writer"/>
        <require class="mbedtls md"/>
        <require class="simple alg info"/>
        <require enum="asn1 tag"/>
        <require impl="ctr drbg"/>
        <require impl="rsa public key" require_definition="private"/>
        <require impl="rsa private key" require_definition="private"/>
        <require interface="alg info"/>
        <require interface="alg"/>
        <require module="mbedtls bridge random"/>

        <dependency name="hash" interface="hash"/>
        <dependency name="random" interface="random"/>

        <method name="setup defaults" declaration="public">
            Setup predefined values to the uninitialized class dependencies.

            <return enum="status"/>
        </method>

        <interface name="alg"/>
        <interface name="key alg">
            <constant name="can import public key" value="true"/>
            <constant name="can export public key" value="true"/>
            <constant name="can import private key" value="true"/>
            <constant name="can export private key" value="true"/>
        </interface>
        <interface name="key cipher"/>
        <interface name="key signer"/>
        <interface name="compute shared key"/>

        <method name="generate key">
            Generate new private key.
            Note, this operation might be slow.

            <argument name="bitlen" type="size"/>
            <argument name="error" class="error" access="readwrite"/>

            <return interface="private key" access="disown"/>
        </method>
    </implementation>


    <implementation name="ecc public key">
        Handles ECC public key.

        <require header="mbedtls/ecp.h" scope="context"/>

        <property name="impl tag" enum="impl/tag"/>
        <property name="ecc grp" class="mbedtls_ecp_group" library="mbedtls" is_reference="0"/>
        <property name="ecc public" class="mbedtls_ecp_point" library="mbedtls" is_reference="0"/>

        <interface name="key"/>
        <interface name="public key"/>
    </implementation>


    <implementation name="ecc private key">
        Handles ECC private key.

        <require header="mbedtls/ecp.h" scope="context"/>

        <property name="impl tag" enum="impl/tag"/>
        <property name="keypair" class="mbedtls_ecp_keypair" library="mbedtls" is_reference="0"/>

        <interface name="key"/>
        <interface name="private key"/>
    </implementation>


    <implementation name="ecc">
        Elliptic curve cryptography implementation.
        Supported curves:
            - secp256r1.

        <require library="mbedtls" feature="ECP C"/>
        <require library="mbedtls" feature="ECDH C"/>
        <require library="mbedtls" feature="ECDSA C"/>
        <require library="mbedtls" feature="ECP DP SECP256R1 ENABLED"/>
        <require library="mbedtls" feature="BIGNUM C"/>

        <require header="mbedtls/ecp.h" scope="context"/>
        <require header="mbedtls/ecdh.h" scope="context"/>
        <require header="mbedtls/ecdsa.h" scope="context"/>

        <require class="asn1rd"/>
        <require class="asn1wr"/>
        <require class="mbedtls bignum asn1 reader"/>
        <require class="mbedtls bignum asn1 writer"/>
        <require class="mbedtls md"/>
        <require class="ec alg info"/>
        <require class="ec alg info"/>
        <require enum="asn1 tag"/>
        <require impl="ctr drbg"/>
        <require interface="alg info"/>
        <require interface="alg"/>
        <require module="mbedtls bridge random"/>
        <require impl="ecc public key" require_definition="private"/>
        <require impl="ecc private key" require_definition="private"/>

        <dependency name="random" interface="random"/>
        <dependency name="ecies" impl="ecies"/>

        <method name="setup defaults" declaration="public">
            Setup predefined values to the uninitialized class dependencies.

            <return enum="status"/>
        </method>

        <interface name="alg"/>
        <interface name="key alg">
            <constant name="can import public key" value="true"/>
            <constant name="can export public key" value="true"/>
            <constant name="can import private key" value="true"/>
            <constant name="can export private key" value="true"/>
        </interface>
        <interface name="key cipher"/>
        <interface name="key signer"/>
        <interface name="compute shared key"/>

        <method name="generate key" is_const="1">
            Generate new private key.
            Supported algorithm ids:
                - secp256r1.

            Note, this operation might be slow.

            <argument name="alg id" enum="alg id"/>
            <argument name="error" class="error" access="readwrite"/>

            <return interface="private key" access="disown"/>
        </method>
    </implementation>
</implementor>
