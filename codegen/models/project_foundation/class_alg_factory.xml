<class name="alg factory" context="none" scope="internal">
    Create algorithms based on the given information.

    <require interface="alg info"/>
    <require impl="sha224"/>
    <require impl="sha256"/>
    <require impl="sha384"/>
    <require impl="sha512"/>
    <require impl="kdf1"/>
    <require impl="kdf2"/>
    <require impl="hmac"/>
    <require impl="hkdf"/>
    <require impl="aes256 gcm"/>
    <require impl="aes256 cbc"/>
    <require impl="hash based alg info"/>
    <require impl="cipher alg info"/>
    <require impl="salted kdf alg info"/>
    <require impl="pbe alg info"/>
    <require impl="pkcs5 pbkdf2"/>
    <require impl="pkcs5 pbes2"/>
    <require impl="rsa public key"/>
    <require impl="rsa private key"/>
    <require impl="ed25519 public key"/>
    <require impl="ed25519 private key"/>

    <method name="create hash from info" is_static="1">
        Create algorithm that implements "hash stream" interface.

        <argument name="alg info" interface="alg info"/>

        <return interface="hash" access="disown"/>
    </method>

    <method name="create mac from info" is_static="1">
        Create algorithm that implements "mac stream" interface.

        <argument name="alg info" interface="alg info"/>

        <return interface="mac" access="disown"/>
    </method>

    <method name="create kdf from info" is_static="1">
        Create algorithm that implements "kdf" interface.

        <argument name="alg info" interface="alg info"/>

        <return interface="kdf" access="disown"/>
    </method>

    <method name="create salted kdf from info" is_static="1">
        Create algorithm that implements "salted kdf" interface.

        <argument name="alg info" interface="alg info"/>

        <return interface="salted kdf" access="disown"/>
    </method>

    <method name="create cipher from info" is_static="1">
        Create algorithm that implements "cipher" interface.

        <argument name="alg info" interface="alg info"/>

        <return interface="cipher" access="disown"/>
    </method>

    <method name="create public key from raw key" is_static="1">
        Create algorithm that implements "public key" interface.

        <argument name="raw key" class="raw key"/>

        <return interface="public key" access="disown"/>
    </method>

    <method name="create private key from raw key" is_static="1">
        Create algorithm that implements "private key" interface.

        <argument name="raw key" class="raw key"/>

        <return interface="private key" access="disown"/>
    </method>
</class>
