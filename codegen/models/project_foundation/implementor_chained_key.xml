<implementor name="chained key" is_default="1">
    Contains algorithm implementations over "chained key".

    <implementation name="chained key alg info">
        Handle information about chained key algorithm.

        <interface name="alg info"/>

        <property name="alg id" enum="alg id"/>
        <property name="l1 cipher alg info" interface="alg info"/>
        <property name="l2 cipher alg info" interface="alg info"/>

        <constructor name="with infos" visibility="private">
            Create chained algorithm information.

            Note, keys ownership is preserved.

            <argument name="alg id" enum="alg id"/>
            <argument name="l1 cipher alg info" interface="alg info"/>
            <argument name="l2 cipher alg info" interface="alg info"/>
        </constructor>

        <constructor name="with infos disown" visibility="private">
            Create chained algorithm information.

            Note, keys ownership is transferred.

            <argument name="alg id" enum="alg id"/>
            <argument name="l1 cipher alg info" interface="alg info" access="disown"/>
            <argument name="l2 cipher alg info" interface="alg info" access="disown"/>
        </constructor>

        <method name="l1 cipher alg info" is_const="1" declaration="public">
            Return information about encrypt/decrypt algorithm.

            <return interface="alg info"/>
        </method>

        <method name="l2 cipher alg info" is_const="1" declaration="public">
            Return information about l2 cipher encrypt/decrypt algorithm,
            or NULL if absent.

            <return interface="alg info" is_optional="1"/>
        </method>
    </implementation>

    <implementation name="chained public key">
        Handles chained public key.

        Chained public key contains 2 public keys:
            - l1 cipher key - is used for plain text encryption;
            - l2 cipher key - is used for l1 output encryption.

        <require interface="alg info"/>
        <require interface="public key"/>

        <property name="alg info" interface="alg info"/>
        <property name="l1 cipher key" interface="public key"/>
        <property name="l2 cipher key" interface="public key"/>

        <interface name="key"/>
        <interface name="public key"/>

        <constructor name="with keys" visibility="private">
            Create a chained public key with 2 public keys suitable for
            encryption.

            Note, keys ownership is kept.

            <argument name="alg info" interface="alg info" access="disown"/>
            <argument name="l1 cipher key" interface="public key"/>
            <argument name="l2 cipher key" interface="public key"/>
        </constructor>

        <constructor name="with imported keys" visibility="private">
            Create a chained public key with 2 public keys suitable for
            encryption.

            Note, keys ownership is transferred.

            <argument name="alg info" interface="alg info"/>
            <argument name="l1 cipher key" interface="public key" access="disown"/>
            <argument name="l2 cipher key" interface="public key" access="disown"/>
        </constructor>

        <method name="l1 cipher key" declaration="public" is_const="1">
            Return l1 cipher public key.

            <return interface="public key"/>
        </method>

        <method name="l2 cipher key" declaration="public" is_const="1">
            Return l2 cipher public key.

            <return interface="public key" is_optional="1"/>
        </method>
    </implementation>

    <implementation name="chained private key">
        Handles chained private key.

        Chained private key contains 2 private keys:
            - l1 cipher key - is used for decryption data decrypted by the l2;
            - l2 cipher key - is used for decryption given data.

        <require interface="alg info"/>
        <require interface="private key"/>
        <require impl="chained public key"/>

        <property name="alg info" interface="alg info"/>
        <property name="l1 cipher key" interface="private key"/>
        <property name="l2 cipher key" interface="private key"/>

        <interface name="key"/>
        <interface name="private key"/>

        <constructor name="with keys" visibility="private">
            Create a chained private key with 2 keys suitable for
            decryption.

            Note, keys ownership is kept.

            <argument name="alg info" interface="alg info" access="disown"/>
            <argument name="l1 cipher key" interface="public key"/>
            <argument name="l2 cipher key" interface="public key"/>
        </constructor>

        <constructor name="with imported keys" visibility="private">
            Create a chained private key with 2 keys suitable for
            decryption.

            Note, keys ownership is transferred.

            <argument name="alg info" interface="alg info"/>
            <argument name="l1 cipher key" interface="public key" access="disown"/>
            <argument name="l2 cipher key" interface="public key" access="disown"/>
        </constructor>

        <method name="l1 cipher key" declaration="public" is_const="1">
            Return l1 cipher private key.

            <return interface="private key"/>
        </method>

        <method name="l2 cipher key" declaration="public" is_const="1">
            Return l2 cipher private key.

            <return interface="private key" is_optional="1"/>
        </method>
    </implementation>

    <implementation name="chained key alg">
        Implements public key cryptography over chained keys.
        Chained encryption pseudo-code: encrypt(l2_key, encrypt(l1_key, data))
        Chained decryption pseudo-code: decrypt(l1_key, decrypt(l2_key, data))

        <require class="simple alg info"/>
        <require class="alg factory"/>
        <require class="key alg factory"/>
        <require interface="alg"/>
        <require interface="alg info"/>
        <require interface="public key"/>
        <require interface="private key"/>
        <require interface="key cipher"/>
        <require interface="key signer"/>
        <require impl="ctr drbg"/>
        <require impl="sha512"/>
        <require impl="chained public key"/>
        <require impl="chained private key"/>
        <require impl="chained key alg info"/>
        <require impl="asn1rd"/>
        <require impl="asn1wr"/>
        <require module="asn1rd defs"/>
        <require module="asn1wr defs"/>

        <interface name="alg"/>
        <interface name="key alg">
            <constant name="can import public key" value="true"/>
            <constant name="can export public key" value="true"/>
            <constant name="can import private key" value="true"/>
            <constant name="can export private key" value="true"/>
        </interface>
        <interface name="key cipher"/>

        <dependency name="random" interface="random"/>

        <method name="setup defaults" declaration="public">
            Setup predefined values to the uninitialized class dependencies.

            <return enum="status"/>
        </method>

        <method name="make key" declaration="public" is_const="1">
            Make chained private key from given.

            Note, l2 cipher should be able to encrypt data produced by the l1 cipher.

            <argument name="l1 cipher key" interface="private key"/>
            <argument name="l2 cipher key" interface="private key"/>
            <argument name="error" class="error" access="readwrite"/>

            <return interface="private key" access="disown"/>
        </method>
    </implementation>
</implementor>
