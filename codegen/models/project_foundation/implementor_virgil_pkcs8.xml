<implementor name="virgil pkcs8" is_default="1">
    Virgil Security implementation of the PKCS#8 key serialization format.


    <implementation name="pkcs8 der serializer">
        Implements PKCS#8 key serialization to DER format.

        <interface name="defaults"/>
        <interface name="key serializer"/>

        <require interface="public key"/>
        <require interface="private key"/>
        <require class="oid"/>
        <require class="asn1wr"/>
        <require enum="asn1 tag"/>
        <require interface="alg"/>

        <dependency name="asn1 writer" interface="asn1 writer"/>

        <method name="serialize public key inplace" declaration="public">
            Serialize Public Key by using internal ASN.1 writer.
            Note, that caller code is responsible to reset ASN.1 writer with
            an output buffer.

            <argument name="public key" interface="public key"/>
            <argument name="error" class="error" access="readwrite"/>

            <return type="size"/>
        </method>

        <method name="serialize private key inplace" declaration="public">
            Serialize Private Key by using internal ASN.1 writer.
            Note, that caller code is responsible to reset ASN.1 writer with
            an output buffer.

            <argument name="private key" interface="private key"/>
            <argument name="error" class="error" access="readwrite"/>

            <return type="size"/>
        </method>
    </implementation>


    <implementation name="pkcs8 der deserializer">
        Implements PKCS#8 key deserialization from DER format.

        <interface name="defaults"/>
        <interface name="key deserializer"/>

        <require interface="public key"/>
        <require interface="private key"/>
        <require class="oid"/>
        <require class="asn1rd"/>
        <require enum="asn1 tag"/>
        <require interface="alg"/>

        <dependency name="asn1 reader" interface="asn1 reader"/>

        <method name="deserialize public key inplace" declaration="public">
            Deserialize Public Key by using internal ASN.1 reader.
            Note, that caller code is responsible to reset ASN.1 reader with
            an input buffer.

            <argument name="error" class="error" access="readwrite"/>

            <return class="raw key" access="disown"/>
        </method>

        <method name="deserialize private key inplace" declaration="public">
            Deserialize Public Key by using internal ASN.1 reader.
            Note, that caller code is responsible to reset ASN.1 reader with
            an input buffer.

            <argument name="error" class="error" access="readwrite"/>

            <return class="raw key" access="disown"/>
        </method>
    </implementation>


    <implementation name="pkcs8 serializer">
        Implements PKCS#8 key serialization to PEM format.

        <interface name="defaults"/>
        <interface name="key serializer"/>

        <require interface="public key"/>
        <require interface="private key"/>
        <require class="base64"/>
        <require class="asn1wr"/>
        <require class="pem"/>
        <require class="pem title"/>
        <require impl="pkcs8 der serializer"/>
        <require header="mbedtls/pem.h"/>

        <dependency name="asn1 writer" interface="asn1 writer"/>
        <dependency name="der serializer" interface="key serializer"/>
    </implementation>


    <implementation name="pkcs8 deserializer">
        Implements PKCS#8 key deserialization from PEM format.

        <interface name="defaults"/>
        <interface name="key deserializer"/>

        <require interface="public key"/>
        <require interface="private key"/>
        <require class="base64"/>
        <require class="asn1rd"/>
        <require class="pem"/>
        <require class="pem title"/>
        <require impl="pkcs8 der deserializer"/>

        <dependency name="asn1 reader" interface="asn1 reader"/>
        <dependency name="der deserializer" interface="key deserializer"/>
    </implementation>
</implementor>
