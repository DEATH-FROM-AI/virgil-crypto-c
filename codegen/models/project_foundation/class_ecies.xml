<class name="ecies">
    Virgil implementation of the ECIES algorithm.

    <require class="ecies envelope"/>
    <require interface="compute shared key"/>
    <require interface="public key"/>
    <require interface="private key"/>
    <require impl="kdf2"/>
    <require impl="sha384"/>
    <require impl="hmac"/>
    <require impl="aes256 cbc"/>
    <require impl="ctr drbg"/>
    <require module="ecies envelope defs"/>

    <dependency name="random" interface="random"/>
    <dependency name="cipher" interface="cipher"/>
    <dependency name="mac" interface="mac"/>
    <dependency name="kdf" interface="kdf"/>


    <dependency name="ephemeral key" interface="private key">
        Set ephemeral key that used for data encryption.
        Public and ephemeral keys should belong to the same curve.
    </dependency>


    <method name="setup defaults" declaration="public">
        Setup predefined values to the uninitialized class dependencies.

        <return enum="status"/>
    </method>


    <method name="configure defaults">
        Configure ECIES with default algorithms.
    </method>


    <method name="encrypted len" is_const="1">
        Calculate required buffer length to hold the encrypted data.

        <argument name="public key" interface="public key"/>
        <argument name="compute shared key ctx" interface="compute shared key"/>
        <argument name="data len" type="size"/>

        <return type="size"/>
    </method>


    <method name="encrypt" is_const="1">
        Encrypt data with a given public key.

        <argument name="public key" interface="public key"/>
        <argument name="compute shared key ctx" interface="compute shared key"/>
        <argument name="data" class="data"/>
        <argument name="out" class="buffer">
            <length method="encrypted len">
                <proxy argument="public key" to="public key"/>
                <proxy argument="compute shared key ctx" to="compute shared key ctx"/>
                <proxy argument="data" to="data len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="decrypted len" is_const="1">
        Calculate required buffer length to hold the decrypted data.

        <argument name="private key" interface="private key"/>
        <argument name="compute shared key ctx" interface="compute shared key"/>
        <argument name="data len" type="size"/>

        <return type="size"/>
    </method>


    <method name="decrypt" is_const="1">
        Decrypt given data.

        <argument name="private key" interface="private key"/>
        <argument name="compute shared key ctx" interface="compute shared key"/>
        <argument name="data" class="data"/>
        <argument name="out" class="buffer">
            <length method="decrypted len">
                <proxy argument="private key" to="private key"/>
                <proxy argument="compute shared key ctx" to="compute shared key ctx"/>
                <proxy argument="data" to="data len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>
</class>
