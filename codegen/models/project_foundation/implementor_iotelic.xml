<implementor name="iotelic" is_default="0">
    Provide implementation based on the Iotelic.

    <implementation name="sha256">
        This is Iotelic implementation of SHA256.

        <require library="iotelic" feature="library"/>
        <require header="io_lib/iot_io_api.h" library="iotelic"/>

        <interface name="alg"/>
        <interface name="hash">
            <constant name="digest len" value="32"/>
            <constant name="block len" value="64"/>
        </interface>

        <!--<require interface="alg info"/>-->
        <!--<require impl="simple alg info"/>-->

        <!--<property name="hash ctx" class="iotelic_sha256_context" is_reference="0"/>-->
    </implementation>

    <implementation name="sha384">
        This is Iotelic implementation of SHA384.

        <require library="iotelic" feature="library"/>
        <require header="io_lib/iot_io_api.h" library="iotelic"/>

        <interface name="alg"/>
        <interface name="hash">
            <constant name="digest len" value="48"/>
            <constant name="block len" value="128"/>
        </interface>

        <!--<require interface="alg info"/>-->
        <!--<require impl="simple alg info"/>-->

        <!--<property name="hash ctx" class="iotelic_sha256_context" is_reference="0"/>-->

    </implementation>

    <implementation name="sha512">
        This is Iotelic implementation of SHA512.

        <require library="iotelic" feature="library"/>
        <require header="io_lib/iot_io_api.h" library="iotelic"/>

        <interface name="alg"/>
        <interface name="hash">
            <constant name="digest len" value="64"/>
            <constant name="block len" value="128"/>
        </interface>

        <!--<require interface="alg info"/>-->
        <!--<require impl="simple alg info"/>-->

        <!--<property name="hash ctx" class="iotelic_sha256_context" is_reference="0"/>-->

    </implementation>

    <implementation name="hmac">
        Virgil Security implementation of HMAC algorithm (RFC 2104) (FIPS PUB 198-1).

        <interface name="alg"/>
        <interface name="mac"/>

        <require interface="alg"/>
        <!--        <require interface="alg info"/> -->
        <!--        <require class="alg factory"/> -->
        <!--        <require impl="hash based alg info"/> -->
        <dependency name="hash" interface="hash"/>

        <property name="ipad" class="buffer" access="readwrite"/>
    </implementation>

    <implementation name="kdf2">
        Virgil Security implementation of the KDF2 (ISO-18033-2) algorithm.

        <interface name="alg"/>
        <interface name="kdf"/>

        <require interface="alg"/>
        <!--        <require interface="alg info"/>  -->
        <!--        <require class="alg factory"/>  -->
        <!--        <require impl="hash based alg info"/> -->

        <dependency name="hash" interface="hash"/>
    </implementation>


    <implementation name="public key">
        This is implementation of the public key

        <require library="iotelic" feature="library"/>
        <require header="iotelic_sp_interface.h" library="iotelic"/>

        <property name="slot_no" type="size"/>

        <interface name="alg"/>
        <interface name="key"/>
        <interface name="verify"/>
        <interface name="public key">
            <constant name="can import public key" value="false"/>
            <constant name="can export public key" value="false"/>
        </interface>
    </implementation>


    <implementation name="private key">
        This is implementation of ED25519 private key

        <require library="iotelic" feature="library"/>
        <require header="iotelic_sp_interface.h" library="iotelic"/>

        <require impl="iotelic public key"/>

        <property name="slot no" type="size"/>

        <interface name="alg"/>
        <interface name="key"/>
        <interface name="sign"/>
        <interface name="private key">
            <constant name="can import private key" value="false"/>
            <constant name="can export private key" value="false"/>
        </interface>

        <method name="generate key" declaration="public">
            Generate new private.

            <argument name="slot no" type="size"/>
            <argument name="alg id" enum="alg id"/>

            <return enum="error"/>
        </method>
    </implementation>
</implementor>
