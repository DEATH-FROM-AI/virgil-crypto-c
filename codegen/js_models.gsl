.template 0

gsl from "common.gsl"
gsl from "js_helpers.gsl"

# --------------------------------------------------------------------------------------------------
# General
# --------------------------------------------------------------------------------------------------

function js_append_js_module_model(parent, source)
  new js_module to my.parent
    js_module.name = my.source.name
    return js_module
  endnew
endfunction

function js_append_js_interface_module_model(parent, source, wrapper)
  new js_interface_module to my.parent
    js_interface_module.name = my.source.name
    js_interface_module.class_name = "$(my.source.name:Pascal)"
    return js_interface_module
  endnew
endfunction

function js_append_js_wrapped_interface_model(parent, js_interface_module, wrapper)
  new js_wrapped_interface to my.parent
    js_wrapped_interface.name = my.js_interface_module.name
    js_wrapped_interface.class_name = my.js_interface_module.class_name
    js_wrapped_interface.cpp_header_file = "$(my.js_interface_module.name:c).h"
    js_wrapped_interface.cpp_header_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_interface.cpp_header_file)
    return js_wrapped_interface
  endnew
endfunction

function js_append_js_wrapped_implementation_model(parent, source, wrapper)
  new js_wrapped_implementation to my.parent
    js_wrapped_implementation.name = my.source.name
    js_wrapped_implementation.js_class_name = "$(my.source.name:Pascal)"
    js_wrapped_implementation.js_source_file = "$(my.source.name:cobol).js"
    js_wrapped_implementation.js_source_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_implementation.js_source_file)
    js_wrapped_implementation.cpp_class_name = "$(my.source.name:Pascal)"
    js_wrapped_implementation.cpp_context_name = "$(my.wrapper.prefix:no)_$(my.source.name:c)"
    js_wrapped_implementation.cpp_header_file = "$(my.source.name:c).h"
    js_wrapped_implementation.cpp_header_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_implementation.cpp_header_file)
    js_wrapped_implementation.cpp_source_file = "$(my.source.name:c).cc"
    js_wrapped_implementation.cpp_source_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_implementation.cpp_source_file)
    return js_wrapped_implementation
  endnew
endfunction

function js_append_js_implementation_module_model(parent, source, js_wrapped_implementation, wrapper)
  new js_implementation_module to my.parent
    js_implementation_module.name = my.js_wrapped_implementation.name
    for my.source.interface
      new js_interface_implementation to js_implementation_module
        js_interface_implementation.interface_name = interface.name
      endnew
      for interface.constant
        copy constant to js_implementation_module
      endfor
      for interface.method
        copy method to js_implementation_module
      endfor
    endfor
    for my.source.dependency
      copy dependency to js_implementation_module
    endfor
    for my.source.constant
      copy constant to js_implementation_module
    endfor
    for my.source.method
      copy method to js_implementation_module
    endfor
    return js_implementation_module
  endnew
endfunction

function js_append_js_enum_module_model(parent, source)
  new js_enum_module to my.parent
    js_enum_module.name = my.source.name
    js_enum_module.variable_name = "$(my.source.name:Pascal)"
    for my.source.constant
      js_append_js_enum_value_model(js_enum_module, constant, index(constant) - 1)
    endfor
    return js_enum_module
  endnew
endfunction

function js_append_js_wrapped_enum_model(parent, js_enum_module, wrapper)
  new js_wrapped_enum to my.parent
    js_wrapped_enum.name = my.js_enum_module.name
    js_wrapped_enum.c_name = "$(my.wrapper.prefix)_$(my.js_enum_module.name:c)_t"
    js_wrapped_enum.js_source_file = "$(my.js_enum_module.name:cobol).js"
    js_wrapped_enum.js_source_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_enum.js_source_file)
    return js_wrapped_enum
  endnew
endfunction

function js_append_js_wrapped_class_model(parent, source, wrapper)
  new js_wrapped_class to my.parent
    js_wrapped_class.name = my.source.name
    js_wrapped_class.js_class_name = "$(my.source.name:Pascal)"
    js_wrapped_class.js_source_file = "$(my.source.name:cobol).js"
    js_wrapped_class.js_source_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_class.js_source_file)
    if count(my.source.method) > 0
      js_wrapped_class.cpp_class_name = "$(my.source.name:Pascal)"
      js_wrapped_class.cpp_context_name = "$(my.wrapper.prefix:no)_$(my.source.name:c)"
      js_wrapped_class.cpp_header_file = "$(my.source.name:c).h"
      js_wrapped_class.cpp_header_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_class.cpp_header_file)
      js_wrapped_class.cpp_source_file = "$(my.source.name:c).cc"
      js_wrapped_class.cpp_source_file_path = cat_path(my.wrapper.project_source_dir, js_wrapped_class.cpp_source_file)
    endif
    return js_wrapped_class
  endnew
endfunction

function js_append_js_class_module_model(parent, source, js_wrapped_class, wrapper)
  new js_class_module to my.parent
    js_class_module.name = my.js_wrapped_class.name
    js_append_js_class_model(js_class_module, my.source, my.js_wrapped_class)
    if defined(my.js_wrapped_class.cpp_class_name)
      js_append_cpp_class_model(js_class_module, my.source, my.js_wrapped_class, my.wrapper)
    endif
    return js_class_module
  endnew
endfunction

function js_append_js_include_module_model(parent, js_wrapped_class)
  new js_include_module to my.parent
    js_include_module.name = my.js_wrapped_class.name
    js_include_module.js_class_name = my.js_wrapped_class.js_class_name
    js_include_module.js_source_file = my.js_wrapped_class.js_source_file
    js_include_module.cpp_class_name = my.js_wrapped_class.cpp_class_name
    js_include_module.cpp_header_file = my.js_wrapped_class.cpp_header_file
    return js_include_module
  endnew
endfunction

function js_append_interfaces_to_js_class_module(js_class_module, js_implementation_module, wrapper)
  my.cpp_class = my.js_class_module->cpp_class
  if defined(my.cpp_class)
    for my.js_implementation_module.js_interface_implementation
      for my.wrapper.js_wrapped_interface where js_interface_implementation.interface_name = js_wrapped_interface.name
        new cpp_interface_implementation to my.cpp_class
          cpp_interface_implementation.interface_name = js_wrapped_interface.name
          cpp_interface_implementation.class_name = js_wrapped_interface.class_name
        endnew
        next js_interface_implementation
      endfor
    endfor
  endif
endfunction

# --------------------------------------------------------------------------------------------------
# JavaScript
# --------------------------------------------------------------------------------------------------

function js_append_js_enum_value_model(parent, source_enum_constant, index)
  new js_enum_value to my.parent
    js_enum_value.name = "$(my.source_enum_constant.name:c,upper)"
    if defined(my.source_enum_constant.value)
      js_enum_value.value = my.source_enum_constant.value
    else
      js_enum_value.value = my.index
    endif
  endnew
endfunction

function js_append_js_dependency_model(parent, source_dependency)
  new js_dependency to my.parent
    js_dependency.name = "$(my.source_dependency.name:Camel)"
    js_dependency.binding_method_name = "set$(my.source_dependency.name:Pascal)"
    return js_dependency
  endnew
endfunction

function js_append_js_constant_model(parent, source_constant)
  new js_constant to my.parent
    js_constant.name = "$(my.source_constant.name:c,upper)"
    js_constant.value = my.source_constant.value
    return js_constant
  endnew
endfunction

function js_append_js_argument_model(parent, source_argument)
  new js_argument to my.parent
    js_argument.name = "$(my.source_argument.name:Camel)"
    if defined(my.source_argument.type)
      js_argument.type = my.source_argument.type
    endif
    if defined(my.source_argument.enum)
      js_argument.enum = my.source_argument.enum
    endif
    if defined(my.source_argument.class)
      js_argument.class = my.source_argument.class
    endif
    if defined(my.source_argument.interface)
      js_argument.interface = my.source_argument.interface
    endif
    return js_argument
  endnew
endfunction

function js_append_js_return_model(parent, source_return)
  new js_return to my.parent
    if defined(my.source_return.type)
      js_return.type = my.source_return.type
    endif
    if defined(my.source_return.enum)
      js_return.enum = my.source_return.enum
    endif
    if defined(my.source_return.class)
      js_return.class = my.source_return.class
    endif
    return js_return
  endnew
endfunction

function js_append_method_model(parent, source_method)
  new js_method to my.parent
    js_method.name = "$(my.source_method.name:Camel)"
    js_method.binding_name = js_binding_method_name(my.source_method)
    if defined(my.source_method.is_static)
      js_method.is_static = my.source_method.is_static
    endif
    for my.source_method.argument where !js_value_is_return_argument(argument)
      js_append_js_argument_model(js_method, argument)
    endfor
    if defined(my.source_method->return)
      js_append_js_return_model(js_method, my.source_method->return)
    endif
    return js_method
  endnew
endfunction

function js_append_js_class_model(parent, source, js_wrapped_class)
  new js_class to my.parent
    js_class.name = my.js_wrapped_class.js_class_name
    js_class.binding_name = js_binding_class_name(js_class)
    for my.source.dependency
      js_append_js_dependency_model(js_class, dependency)
    endfor
    for my.source.constant where !js_constant_is_private(constant)
      js_append_js_constant_model(js_class, constant)
    endfor
    for my.source.method where !js_method_is_private(method)
      js_append_method_model(js_class, method)
    endfor
    return js_class
  endnew
endfunction

# --------------------------------------------------------------------------------------------------
# C++
# --------------------------------------------------------------------------------------------------

function js_append_cpp_argument_model(parent, source_argument)
  new cpp_argument to my.parent
    if defined(my.source_argument.name)
      cpp_argument.type = global.js_cpp_argument_type_variable
      cpp_argument.name = js_cpp_variable_name(my.source_argument.name)
    endif
    if defined(my.source_argument.argument)
      cpp_argument.type = global.js_cpp_argument_type_variable
      cpp_argument.name = js_cpp_variable_name(my.source_argument.argument)
    endif
    if defined(my.source_argument.constant)
      cpp_argument.type = global.js_cpp_argument_type_constant
      cpp_argument.constant = my.source_argument.constant
    endif
    if defined(my.source_argument.cast)
      cpp_argument.cast = my.source_argument.cast
    endif
    return cpp_argument
  endnew
endfunction

function js_append_cpp_js_return_model(parent, value)
  new cpp_js_return to my.parent
    cpp_js_return.name = js_cpp_variable_name(my.value)
    cpp_js_return.binding_name = "$(my.value:Camel)"
    return cpp_js_return
  endnew
endfunction

function js_append_cpp_size_call_argument_model(parent, source_argument)
  new cpp_size_call_argument to my.parent
    cpp_size_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_size_call_argument
  endnew
endfunction

function js_append_cpp_integer_call_argument_model(parent, source_argument)
  new cpp_integer_call_argument to my.parent
    cpp_integer_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_integer_call_argument
  endnew
endfunction

function js_append_cpp_unsigned_call_argument_model(parent, source_argument)
  new cpp_unsigned_call_argument to my.parent
    cpp_unsigned_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_unsigned_call_argument
  endnew
endfunction

function js_append_cpp_boolean_call_argument_model(parent, source_argument)
  new cpp_boolean_call_argument to my.parent
    cpp_boolean_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_boolean_call_argument
  endnew
endfunction

function js_append_cpp_byte_call_argument_model(parent, source_argument)
  new cpp_byte_call_argument to my.parent
    cpp_byte_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_byte_call_argument
  endnew
endfunction

function js_append_cpp_char_call_argument_model(parent, source_argument)
  new cpp_char_call_argument to my.parent
    cpp_char_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_char_call_argument
  endnew
endfunction

function js_append_cpp_data_call_argument_model(parent, source_argument)
  new cpp_data_call_argument to my.parent
    cpp_data_call_argument.name = js_cpp_variable_name(my.source_argument.name)
    return cpp_data_call_argument
  endnew
endfunction

function js_append_cpp_enum_call_argument_model(parent, source_argument, wrapper)
  for my.wrapper.js_wrapped_enum where my.source_argument.enum = js_wrapped_enum.name
    new cpp_enum_call_argument to my.parent
      cpp_enum_call_argument.name = js_cpp_variable_name(my.source_argument.name)
      cpp_enum_call_argument.enum_name = my.source_argument.enum
      cpp_enum_call_argument.c_type = js_wrapped_enum.c_name
      return cpp_enum_call_argument
    endnew
  endfor
endfunction

function js_append_cpp_class_call_argument_model(parent, source_argument, wrapper)
  for my.wrapper.js_wrapped_class where my.source_argument.class = js_wrapped_class.name
    new cpp_class_call_argument to my.parent
      cpp_class_call_argument.name = js_cpp_variable_name(my.source_argument.name)
      cpp_class_call_argument.class_name = js_wrapped_class.name
      cpp_class_call_argument.cpp_class_name = js_wrapped_class.cpp_class_name
      cpp_class_call_argument.cpp_context_name = js_wrapped_class.cpp_context_name
      return cpp_class_call_argument
    endnew
  endfor
endfunction

function js_append_cpp_implementation_call_argument_model(parent, source_argument, wrapper)
  if defined(my.source_argument.class)
    my.implementation_name = my.source_argument.class
  elsif defined(my.source_argument.impl)
    my.implementation_name = my.source_argument.impl
  endif
  for my.wrapper.js_wrapped_implementation where my.implementation_name = js_wrapped_implementation.name
    new cpp_implementation_call_argument to my.parent
      cpp_implementation_call_argument.name = js_cpp_variable_name(my.source_argument.name)
      cpp_implementation_call_argument.implementation_name = js_wrapped_implementation.name
      cpp_implementation_call_argument.cpp_class_name = js_wrapped_implementation.cpp_class_name
      cpp_implementation_call_argument.cpp_context_name = js_wrapped_implementation.cpp_context_name
      return cpp_implementation_call_argument
    endnew
  endfor
endfunction

function js_append_cpp_interface_call_argument_model(parent, source_argument, wrapper)
  for my.wrapper.js_wrapped_interface where my.source_argument.interface = js_wrapped_interface.name
    new cpp_interface_call_argument to my.parent
      cpp_interface_call_argument.name = js_cpp_variable_name(my.source_argument.name)
      cpp_interface_call_argument.interface_name = js_wrapped_interface.name
      cpp_interface_call_argument.cpp_class_name = js_wrapped_interface.class_name
      cpp_interface_call_argument.implementation_type = js_cpp_implementation_type(my.wrapper)
      return cpp_interface_call_argument
    endnew
  endfor
endfunction

function js_append_resolved_call_argument_model(parent, source_argument, wrapper)
  if js_value_is_size(my.source_argument)
    return js_append_cpp_size_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_integer(my.source_argument)
    return js_append_cpp_integer_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_unsigned(my.source_argument)
    return js_append_cpp_unsigned_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_boolean(my.source_argument)
    return js_append_cpp_boolean_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_byte(my.source_argument)
    return js_append_cpp_byte_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_char(my.source_argument)
    return js_append_cpp_char_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_data(my.source_argument)
    return js_append_cpp_data_call_argument_model(my.parent, my.source_argument)
  elsif js_value_is_enum_module(my.source_argument, my.wrapper)
    return js_append_cpp_enum_call_argument_model(my.parent, my.source_argument, my.wrapper)
  elsif js_value_is_class_module(my.source_argument, my.wrapper)
    return js_append_cpp_class_call_argument_model(my.parent, my.source_argument, my.wrapper)
  elsif js_value_is_implementation_module(my.source_argument, my.wrapper)
    return js_append_cpp_implementation_call_argument_model(my.parent, my.source_argument, my.wrapper)
  elsif js_value_is_interface_module(my.source_argument, my.wrapper)
    return js_append_cpp_interface_call_argument_model(my.parent, my.source_argument, my.wrapper)
  endif
endfunction

function js_append_cpp_buffer_size_model(parent, name, source_length, cpp_class, wrapper)
  new cpp_buffer_size to my.parent
    if defined(my.source_length.argument)
      cpp_buffer_size.type = global.js_cpp_buffer_size_type_argument
      cpp_buffer_size.name = my.source_length.argument
    else
      cpp_buffer_size.name = js_cpp_size_name(my.name)
      if defined(my.source_length.constant)
        cpp_buffer_size.type = global.js_cpp_buffer_size_type_constant
        cpp_buffer_size.constant = "$(my.wrapper.prefix:no)_$(my.cpp_class.c_name:no)_$(my.source_length.constant:c,upper)"
      elsif defined(my.source_length.method)
        cpp_buffer_size.type = global.js_cpp_buffer_size_type_method
        cpp_buffer_size.method = "$(my.wrapper.prefix:no)_$(my.cpp_class.c_name:no)_$(my.source_length.method:c)"
        for my.source_length.proxy
          js_append_cpp_argument_model(cpp_buffer_size, proxy)
        endfor
      else
        echo_fatal("'source_length.constant' or 'source_length.method' should be defined", my)
      endif
    endif
    return cpp_buffer_size
  endnew
endfunction

function js_append_cpp_buffer_result_argument_model(parent, source_argument, cpp_class, wrapper)
  new cpp_buffer_result_argument to my.parent
    cpp_buffer_result_argument.name = js_cpp_variable_name(my.source_argument.name)
    js_append_cpp_buffer_size_model(cpp_buffer_result_argument, cpp_buffer_result_argument.name, my.source_argument->length, my.cpp_class, my.wrapper)
    return cpp_buffer_result_argument
  endnew
endfunction

function js_append_cpp_byte_result_argument_model(parent, source_argument)
  new cpp_byte_result_argument to my.parent
    cpp_byte_result_argument.name = js_cpp_variable_name(my.source_argument.name)
    cpp_byte_result_argument.length = js_cpp_variable_name(my.source_argument->length.argument)
    return cpp_byte_result_argument
  endnew
endfunction

function js_append_cpp_char_result_argument_model(parent, source_argument)
  new cpp_char_result_argument to my.parent
    cpp_char_result_argument.name = js_cpp_variable_name(my.source_argument.name)
    cpp_char_result_argument.length = my.source_argument->string.length_constant
    return cpp_char_result_argument
  endnew
endfunction

function js_append_cpp_error_context_result_argument_model(parent, source_argument, wrapper)
  new cpp_error_context_result_argument to my.parent
    cpp_error_context_result_argument.name = js_cpp_variable_name(my.source_argument.name)
    cpp_error_context_result_argument.c_class = "$(my.wrapper.prefix:no)_$(my.source_argument.class:c)"
    return cpp_error_context_result_argument
  endnew
endfunction

function js_append_resolved_result_argument_model(parent, source_argument, cpp_class, wrapper)
  if js_value_is_return_argument(my.source_argument)
    if js_value_is_error_context(my.source_argument)
      return js_append_cpp_error_context_result_argument_model(my.parent, my.source_argument, my.wrapper)
    endif
    js_append_cpp_js_return_model(my.parent, my.source_argument.name)
    if js_value_is_buffer(my.source_argument)
      return js_append_cpp_buffer_result_argument_model(my.parent, my.source_argument, my.cpp_class, my.wrapper)
    elsif js_value_is_byte(my.source_argument)
      return js_append_cpp_byte_result_argument_model(my.parent, my.source_argument)
    elsif js_value_is_char(my.source_argument)
      return js_append_cpp_char_result_argument_model(my.parent, my.source_argument)
    endif
  endif
endfunction

function js_append_resolved_argument(parent, source_argument, cpp_class, wrapper)
  if defined(js_append_resolved_result_argument_model(my.parent, my.source_argument, my.cpp_class, my.wrapper))
    return
  endif
  if defined(js_append_resolved_call_argument_model(my.parent, my.source_argument, my.wrapper))
    return
  endif
  echo my.source_argument.string()
  echo_fatal("Unable to resolve argument", my)
endfunction

function js_append_cpp_method_return_model(parent)
  new cpp_method_return to my.parent
    cpp_method_return.name = global.js_cpp_method_return_name
    return cpp_method_return
  endnew
endfunction

function js_append_cpp_size_method_return_model(parent, name)
  new cpp_size_method_return to my.parent
    cpp_size_method_return.name = my.name
    return cpp_size_method_return
  endnew
endfunction

function js_append_cpp_integer_method_return_model(parent, name)
  new cpp_integer_method_return to my.parent
    cpp_integer_method_return.name = my.name
    return cpp_integer_method_return
  endnew
endfunction

function js_append_cpp_unsigned_method_return_model(parent, name)
  new cpp_unsigned_method_return to my.parent
    cpp_unsigned_method_return.name = my.name
    return cpp_unsigned_method_return
  endnew
endfunction

function js_append_cpp_boolean_method_return_model(parent, name)
  new cpp_boolean_method_return to my.parent
    cpp_boolean_method_return.name = my.name
    return cpp_boolean_method_return
  endnew
endfunction

function js_append_cpp_byte_method_return_model(parent, name)
  new cpp_byte_method_return to my.parent
    cpp_byte_method_return.name = my.name
    return cpp_byte_method_return
  endnew
endfunction

function js_append_cpp_data_method_return_model(parent, name)
  new cpp_data_method_return to my.parent
    cpp_data_method_return.name = my.name
    return cpp_data_method_return
  endnew
endfunction

function js_append_cpp_buffer_method_return_model(parent, name)
  new cpp_buffer_method_return to my.parent
    cpp_buffer_method_return.name = my.name
    return cpp_buffer_method_return
  endnew
endfunction

function js_append_cpp_error_method_return_model(parent, name, wrapper)
  new cpp_error_method_return to my.parent
    cpp_error_method_return.name = my.name
    cpp_error_method_return.c_type = "$(my.wrapper.prefix:no)_error_t"
    return cpp_error_method_return
  endnew
endfunction

function js_append_cpp_enum_method_return_model(parent, name, enum_name, wrapper)
  for my.wrapper.js_wrapped_enum where my.enum_name = js_wrapped_enum.name
    new cpp_enum_method_return to my.parent
      cpp_enum_method_return.name = my.name
      cpp_enum_method_return.enum_name = js_wrapped_enum.name
      cpp_enum_method_return.c_type = js_wrapped_enum.c_name
      return cpp_enum_method_return
    endnew
  endfor
endfunction

function js_append_cpp_class_method_return_model(parent, name, class_name, wrapper)
  for my.wrapper.js_wrapped_class where my.class_name = js_wrapped_class.name
    new cpp_class_method_return to my.parent
      cpp_class_method_return.name = my.name
      cpp_class_method_return.cpp_class_name = js_wrapped_class.cpp_class_name
      cpp_class_method_return.cpp_context_name = js_wrapped_class.cpp_context_name
      return cpp_class_method_return
    endnew
  endfor
endfunction

function js_append_cpp_implementation_method_return_model(parent, name, implementation_name, wrapper)
  for my.wrapper.js_wrapped_implementation where my.implementation_name = js_wrapped_implementation.name
    new cpp_implementation_method_return to my.parent
      cpp_implementation_method_return.name = my.name
      cpp_implementation_method_return.cpp_class_name = js_wrapped_implementation.cpp_class_name
      cpp_implementation_method_return.cpp_context_name = js_wrapped_implementation.cpp_context_name
    endnew
  endfor
endfunction

function js_append_cpp_interface_method_return_model(parent, name, interface_name)
  new cpp_interface_method_return to my.parent
    cpp_interface_method_return.name = my.name
    cpp_interface_method_return.interface_name = my.interface_name
  endnew
endfunction

function js_append_resolved_return(parent, source_return, wrapper)
  my.cpp_method_return = js_append_cpp_method_return_model(my.parent)
  if js_value_is_error(my.source_return)
    return js_append_cpp_error_method_return_model(my.parent, my.cpp_method_return.name, my.wrapper)
  endif
  js_append_cpp_js_return_model(my.parent, my.cpp_method_return.name)
  if js_value_is_size(my.source_return)
    return js_append_cpp_size_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_integer(my.source_return)
    return js_append_cpp_integer_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_unsigned(my.source_return)
    return js_append_cpp_unsigned_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_boolean(my.source_return)
    return js_append_cpp_boolean_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_byte(my.source_return)
    return js_append_cpp_byte_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_data(my.source_return)
    return js_append_cpp_data_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_buffer(my.source_return)
    return js_append_cpp_buffer_method_return_model(my.parent, my.cpp_method_return.name)
  elsif js_value_is_enum_module(my.source_return, my.wrapper)
    return js_append_cpp_enum_method_return_model(my.parent, my.cpp_method_return.name, my.source_return.enum, my.wrapper)
  elsif js_value_is_class_module(my.source_return, my.wrapper)
    return js_append_cpp_class_method_return_model(my.parent, my.cpp_method_return.name, my.source_return.class, my.wrapper)
  elsif js_value_is_implementation_module(my.source_return, my.wrapper)
    return js_append_cpp_implementation_method_return_model(my.parent, my.cpp_method_return.name, my.source_return.impl, my.wrapper)
  elsif js_value_is_interface_module(my.source_return, my.wrapper)
    return js_append_cpp_interface_method_return_model(my.parent, my.cpp_method_return.name, my.source_return.interface)
  endif
  echo_fatal("Unable to resolve return", my)
endfunction

function js_append_cpp_method_model(parent, source_method, cpp_class, wrapper)
  new cpp_method to my.parent
    cpp_method.name = "$(my.source_method.name:Pascal)"
    cpp_method.binding_name = js_binding_method_name(my.source_method)
    cpp_method.c_name = "$(my.wrapper.prefix:no)_$(my.cpp_class.c_name:no)_$(my.source_method.name:c)"
    if defined(my.source_method.is_static)
      cpp_method.is_static = my.source_method.is_static
    endif
    for my.source_method.argument
      js_append_cpp_argument_model(cpp_method, argument)
      copy argument to cpp_method
    endfor
    if defined(my.source_method->return)
      copy my.source_method->return to cpp_method
    endif
    return cpp_method
  endnew
endfunction

function js_append_cpp_dependency_model(parent, source_dependency, cpp_class, wrapper)
  new cpp_method to my.parent
    cpp_method.name = "set $(my.source_dependency.name:no)"
    cpp_method.binding_name = js_binding_method_name(cpp_method)
    cpp_method.name = "$(cpp_method.name:Pascal)"
    cpp_method.c_name = "$(my.wrapper.prefix:no)_$(my.cpp_class.c_name:no)_use_$(my.source_dependency.name:c)"
    js_append_cpp_argument_model(cpp_method, my.source_dependency)
    copy my.source_dependency to cpp_method as argument
    return cpp_method
  endnew
endfunction

function js_append_cpp_class_model(parent, source, js_wrapped_class, wrapper)
  new cpp_class to my.parent
    cpp_class.name = my.js_wrapped_class.cpp_class_name
    cpp_class.binding_name = js_binding_class_name(cpp_class)
    cpp_class.c_name = "$(my.source.name:c)"
    cpp_class.context_name = my.js_wrapped_class.cpp_context_name
    for my.source.dependency
      js_append_cpp_dependency_model(cpp_class, dependency, cpp_class, my.wrapper)
    endfor
    for my.source.method where !js_method_is_private(method)
      js_append_cpp_method_model(cpp_class, method, cpp_class, my.wrapper)
    endfor
    return cpp_class
  endnew
endfunction

endtemplate
