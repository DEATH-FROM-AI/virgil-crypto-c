.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Transform abstract 'interface' declaration to the C language components.
#
#   Interfaces in C is has custom implementation, because of C does not have
#   native support for it. In two words, interface in C is represented with
#   three APIs: 'Shared API', 'Usage API' and 'Implementation API'.
#   'Shared API' is fully generated module that contains enumeration of all
#   possibly available interfaces in the crypto library and related helpers.
#   'Usage API' is fully generated module which contains functions that
#   make proxy calls to the actual implementation thru callbacks, which in
#   turn, are defined in the 'Implementation API' within C struct.
#
#   Also all interfaces has common / shared component that enumerates them
#   and possibly contains some helper functions.
#
#   Private function prefix is: L23.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"

gsl from "c_resolver.gsl"
gsl from "c_names_config.gsl"
gsl from "c_formatter.gsl"

# ---------------------------------------------------------------------------
#   Format method parameters.
#   Precondition: 'method' must be resolved.
# ---------------------------------------------------------------------------
function _L23_format_parameters (method, beginning, ending, tab_count, line_limit)
    check_argument (my, "method")
    check_argument (my, "beginning")

    my.ending ?= ""
    my.ending = ")" + my.ending
    my.tab_count ?= 0
    my.line_limit ?= 100
    my.line = "("
    my.result = ""
    my.indent = tabs (my.tab_count)
    for my.method.argument
        my.adding_line = ""
        my.adding_line += argument.c_name
        if ! last ()
            my.adding_line += ","
        else
            my.adding_line += my.ending
        endif
        my.new_line_length = string.length (my.beginning + my.line + my.adding_line)
        if (my.new_line_length < my.line_limit)
            my.line += (first() ?? "" ? " ") + my.adding_line
        else
            my.result += my.line
            my.line = terminator + tabs (2 + my.tab_count) + my.adding_line
            my.beginning = my.indent
        endif
    else
        my.line += my.ending
    endfor
    if ! string_empty (my.line)
        my.result += my.line
    endif
    return my.result
endfunction


function _L23_resolve_method_preconditions (method, meta)
    check_argument (my, "method")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.method.precondition
        for precondition.constant
            new uid before constant
                .name = "$(my.names.class_interface:c)->" + my.refs.constant_interface_tag
            endnew
            delete constant
        endfor
    endfor
endfunction


function _L23_add_self_tag (interface, enum, meta)
    check_argument (my, "interface")
    check_argument (my, "enum")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    my.end = my.enum->value (name = my.names.enum_value_end)
    if ! defined (my.end)
        echo_fatal ("Enum '$(my.enum.name:)' does not contain value '$(enum_value_end:)'.", my)
    endif

    new value before my.end
        .name = my.interface.name
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add interface stateFUL methods to the destination.
#   Stateful method always accept object that implements this interface and
#   handles state as first argument.
# ---------------------------------------------------------------------------
function _L23_add_stateful_methods (interface, destination, meta)
    check_argument (my, "interface")
    check_argument (my, "destination")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.method where is_false (is_stateless)
        my.proxy_method = item_copy_to (method, my.destination)

        c_method_add_argument_impl (my.proxy_method)

        _L23_resolve_method_preconditions (my.proxy_method, my.meta)

        #   Add C implementation.
        new c_implementation to my.proxy_method
            . = "\
            const $(my.refs.c_interface_struct_api) *$(my.names.class_interface:c) = \
                    $(my.refs.c_interface_method_api) ($(my.refs.c_argument_impl));
            $(c_ref ("class_assert_macros")) ($(my.names.class_interface:c));
            "

            my.has_return = count (method.[return], defined (type) & type <> "nothing")

            my.callback = "$(my.names.class_interface:c)-> \
                    $(c_format_callback_name (method.name))"

            my.callback_parameters = \
                    _L23_format_parameters (my.proxy_method, string_indent (my.callback, 1), ";")

            . += "
            $(c_ref ("class_assert_macros")) ($(my.callback));
            $(my.has_return ?? "return " ?)$(my.callback) $(my.callback_parameters)
            "
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   TODO: Remove if not used!!! Now it is deprecated.
#   TODO: When remove, also remove all occurences of 'is_stateless'.
#   Add interface sateLESS methods to the destination.
#   Stateless method always accept constant object that handles interface
#   implementation callbacks.
# ---------------------------------------------------------------------------
function _L23_add_stateless_methods (interface, destination, meta)
    check_argument (my, "interface")
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.method where is_true (is_stateless)
        my.proxy_method = item_copy_to (method, my.destination)

        #   Add stateLESS argument.
        my.argument = item_prepend_new ("argument", my.proxy_method)
        my.argument.name = my.names.argument_interface_api
        my.argument.type = my.refs.interface_struct_api
        my.argument.is_object = 1

        _L23_resolve_method_preconditions (my.proxy_method, my.meta)

        #   Add C implementation.
        new c_implementation to my.proxy_method
            my.has_return = count (method.[return], defined (type) & type <> "nothing")

            my.callback = "$(my.refs.c_argument_interface_api)->\
                    $(c_format_callback_name (method.name))"

            my.callback_parameters = \
                    _L23_format_parameters (method, string_indent (my.callback, 1), ";")

            . = "
            $(c_ref ("class_assert_macros")) ($(my.callback));
            $(my.has_return ?? "return " ?)$(my.callback) $(my.callback_parameters)
            "
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   For each 'constant' add 'get' accessors to the destination.
# ---------------------------------------------------------------------------
function _L23_add_stateful_getters (interface, module, meta)
    check_argument (my, "interface")
    check_argument (my, "module")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.constant
        new method to my.module
            . = constant. ?

            .name = constant.name
            .class = my.names.class_interface

            c_method_add_argument_impl (method)

            new return
                .type = constant.type
            endnew

            new c_implementation
                . = "\
                const $(my.refs.c_interface_struct_api) *$(my.refs.c_argument_interface_api) = \
                        $(my.refs.c_interface_method_api) ($(my.refs.c_argument_impl));
                $(c_ref ("class_assert_macros")) ($(my.refs.c_argument_interface_api));

                return $(my.refs.c_argument_interface_api)->$(c_format_name (constant.name));
                "
            endnew
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   For each 'constant' add 'get' accessors to the destination.
# ---------------------------------------------------------------------------
function _L23_add_stateless_getters (interface, destination, meta)
    check_argument (my, "interface")
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.constant
        new method to my.destination
            . = constant. ?

            .name = constant.name
            .class = my.names.class_interface_api

            new argument
                .name = my.names.argument_interface_api
                .type = my.refs.interface_struct_api
                .is_object = 1
            endnew

            new return
                .type = constant.type
            endnew

            new c_implementation
                . = "\
                return $(my.refs.c_argument_interface_api)->$(c_format_name (constant.name));
                "
            endnew
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Add method that returns 'API' object.
# ---------------------------------------------------------------------------
function _L23_add_method_get_api (interface, destination, meta)
    check_argument (my, "interface")
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "Return $(my.interface.name:) API, or NULL if it is not implemented."

        .name = my.names.method_api

        c_method_add_argument_impl (method)

        new return
            .type = my.refs.interface_struct_api
            .is_object = 1
        endnew

        new c_implementation
            . = "\
            return ($(my.refs.c_interface_struct_api) *) \
                    $(my.refs.c_class_impl_method_api) ($(my.refs.c_argument_impl), \
                    $(my.refs.c_interface_constant_tag));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add method that check if 'API' is implemented.
# ---------------------------------------------------------------------------
function _L23_add_method_check_api (interface, destination, meta)
    check_argument (my, "interface")
    check_argument (my, "destination")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "Check if given object implements interface '$(my.interface.name:)'."

        .name = "is implemented"

        new return
            .type = "boolean"
        endnew

        c_method_add_argument_impl (method)

        new c_implementation
            . = "\
            return $(my.refs.c_class_impl_method_api) ($(my.refs.c_argument_impl),  \
                    $(my.refs.c_interface_constant_tag)) != NULL;
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Entrypoint. Create module with 'Interface Public API'.
# ---------------------------------------------------------------------------
function c_module_interface_create (source, destination, meta)
    check_argument (my, "source")
    check_argument (my, "destination")
    check_argument (my, "meta")

    for my.source.interface
        meta_reset_active_entity (my.meta, interface.name)

        my.names = meta_names (my.meta)

        new module to my.destination
            . = interface. ?
            .name = my.names.module_interface
            .class = my.names.class_interface
            .interface = interface.name

            new require
                .module = my.names.module_library
            endnew

            new require
                .module = my.names.module_api
            endnew

            my.enum_tag = c_module_api_find_enum_tag (my.destination, my.meta)
            _L23_add_self_tag (interface, my.enum_tag, my.meta)
            _L23_add_stateful_methods (interface, module, my.meta)
            _L23_add_stateful_getters (interface, module, my.meta)
            _L23_add_stateless_getters (interface, module, my.meta)
            _L23_add_method_get_api (interface, module, my.meta)
            _L23_add_method_check_api (interface, module, my.meta)

            for module.method
                c_method_add_preconditions (method)
            endfor
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Return 'module' that contains 'Interface Private API'.
# ---------------------------------------------------------------------------
function c_module_interface_find (name, source)
    check_argument (my, "name")
    check_argument (my, "source")

    my.interface = my.source->interface (name = my.name)

    if defined (my.interface)
        return my.interface
    endif

    echo_fatal ("Interface '$(my.name:)' is not found within given source.", my)
endfunction

.endtemplate
