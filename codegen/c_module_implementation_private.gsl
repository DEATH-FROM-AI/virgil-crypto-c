.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Implementation Private API', which includes:
#       - type (struct) that handles all implementation details.
#
#   Private function prefix is: C23.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"

gsl from "c_resolver.gsl"


function _C23_add_includes (implementation, module, meta)
    check_argument (my, "implementation")
    check_argument (my, "module")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    new require
        .module = my.names.module_library
    endnew

    new require
        .module = my.names.module_implementation
    endnew

    for my.implementation.c_include
        my.copy = item_copy_to (c_include, my.module)
        my.copy.scope = "public"
    endfor
endfunction

function _C23_add_self_type (implementation, module, meta)
    check_argument (my, "implementation")
    check_argument (my, "module")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)

    new struct to my.module
        . = "\
        This type handles context that is required for implementation.
        Note, this type SHUOLD be used within interface implementations ONLY.
        "

        .name = my.names.struct_context

        for my.implementation.interface
            for interface.context
                new property to struct
                    .name = context.name
                    .type = context.type ?
                    .c_type = context.c_type ?
                endnew
            endfor
        endfor
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Create 'Implementation Private API' module for each 'implementation'
#   within given source and put it to the destination.
# ---------------------------------------------------------------------------
function c_module_implementation_private_create (source, destination, meta)
    check_argument (my, "source")
    check_argument (my, "destination")
    check_argument (my, "meta")

    for my.source.implementation
        meta_reset_active_entity (my.meta, implementation.full_name)

        my.names = meta_names (my.meta)

        new module to my.destination
            . = "Implementation Private API."

            .name = my.names.module_implementation_private
            .class = my.names.class_implementation_private
            .scope = "private"

            _C23_add_includes (implementation, module, my.meta)
            _C23_add_self_type (implementation, module, my.meta)
        endnew
    endfor
endfunction

.endtemplate
