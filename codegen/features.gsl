.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Perform resolution for item 'features' and all children.
#
#   Resolution includes several steps:
#       1. Validate - check that required attributes and items are defined.
#       2. Define default values to the optional component attributes.
#       3. Append optional items.
#
#    Private function prefix is: D25.
#
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "component.gsl"


# ---------------------------------------------------------------------------
#   Check required attribute: path.
# ---------------------------------------------------------------------------
function _D25_require_attr_path (item, caller)
    check_arguments (my, "item", my)

    assert_attribute (my.item, "path", my.caller ? my)
endfunction


# ---------------------------------------------------------------------------
#   Resolve attribute: uid.
# ---------------------------------------------------------------------------
function _D25_resolve_attr_uid (feature, parent)
    check_arguments (my, "feature, parent", my)

    component_require_landlord (my.feature, my)

    my.feature.uid = make_id (component_derive_landlord_uid (my.feature), name (my.feature), my.feature.name)
endfunction


# ---------------------------------------------------------------------------
#   Resolve attribute: features.prefix.
# ---------------------------------------------------------------------------
function _D25_resolve_attr_prefix (item, parent)
    check_arguments (my, "item", my)

    my.item.prefix ?= my.parent.prefix ? my.item->source.name
endfunction

# ---------------------------------------------------------------------------
#   Resolve component: feature.
# ---------------------------------------------------------------------------
function _D25_resolve_feature (feature, parent)
    check_arguments (my, "feature, parent", my)

    component_require_attr_name (my.feature, my)
    component_resolve_landlord (my.feature, my.parent)

    _D25_resolve_attr_prefix (my.feature, my.parent)
    _D25_resolve_attr_uid (my.feature, my.parent)

    for my.feature.require
        component_resolve_require (require, my.feature)
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Resolve component: features.
# ---------------------------------------------------------------------------
function features_resolve (features, parent)
    check_arguments (my, "features, parent", my)

    assert_attribute_one_of (my.features, "project, library", my)

    _D25_require_attr_path (my.features, my)
    _D25_resolve_attr_prefix (my.features)

    component_resolve_landlord (my.features, my.parent)

    for my.features.feature
        _D25_resolve_feature (feature, my.features)
    endfor

endfunction

# ---------------------------------------------------------------------------
#   Resolve all 'features' entries within 'source'
# ---------------------------------------------------------------------------
function foreach_features_resolve (source)
    check_arguments (my, "source", my)

    for my.source.features
        features_resolve (features, my.source)
    endfor
endfunction


.endtemplate
