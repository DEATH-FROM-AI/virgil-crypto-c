.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This is root GSL file which sequentially run all necessary operations to
#   generate code from the module files.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "project.gsl"
gsl from "library.gsl"
gsl from "module.gsl"
gsl from "interface.gsl"
gsl from "implementor.gsl"
gsl from "implementation.gsl"
gsl from "class.gsl"
gsl from "context.gsl"
gsl from "meta.gsl"
gsl from "features.gsl"
gsl from "projects_api.gsl"

gsl from "c_features.gsl"
gsl from "c_module.gsl"
gsl from "c_module_codegen.gsl"

gsl from "c_module_api.gsl"
gsl from "c_module_api_private.gsl"
gsl from "c_module_impl.gsl"
gsl from "c_module_impl_private.gsl"

gsl from "c_module_interface.gsl"
gsl from "c_module_implementation.gsl"

gsl from "c_module_class.gsl"

gsl from "cmake_files_codegen.gsl"


# ###########################################################################
#   Main data processing.
# ###########################################################################


function process_project (project, features_list, projects_api, echo_level)
    check_arguments (my, "project, features_list, projects_api, echo_level", my)

    #   Create my.root eleement where all models will be created.
    my.root = XML.new ("my.root")

    #   Load project's components.
    for my.project.interface
        item_load_from_file ("interface/$(make_id ("interface", interface.name)).xml", my.root)
    endfor

    for my.project.module
        item_load_from_file ("module/$(make_id ("module", module.name)).xml", my.root)
    endfor

    for my.project.implementor
        item_load_from_file ("implementation/$(make_id ("implementor", implementor.name)).xml", my.root)
    endfor

    for my.project.class
        item_load_from_file ("class/$(make_id ("class", class.name)).xml", my.root)
    endfor

    #   Process project.
    project_resolve (my.project)
    project_generate_structure (my.project)

    #   Process Interface / Implementation.
    foreach_interface_resolve (my.root, my.project)
    foreach_implementor_resolve (my.root, my.project)
    foreach_implementation_resolve (my.root, my.project)

    #   Process classes.
    foreach_class_resolve (my.root, my.project)

    #   Process libraries.
    foreach_library_resolve (my.root, my.project)


    #   Create feature per high level component.
    foreach_interface_create_feature (my.root, my.project)
    foreach_implementation_create_feature (my.root, my.project)
    foreach_module_create_feature (my.root, my.project)
    foreach_class_create_feature (my.root, my.project)

    #   Group features within one component.
    features_list_update_from_project (my.features_list, my.project)

    #   Create meta information about high level entities.
    my.meta = meta_create ()
    foreach_interface_update_meta (my.root, my.meta)
    foreach_implementation_update_meta (my.root, my.meta)
    foreach_class_update_meta (my.root, my.meta)


    if my.echo_level = "debug"
        item_save_to_file (my.meta, "meta.xml", my.project.work_path)
    endif


    #   Create Interface / Implementation related modules.
    if count (my.root.interface)
        c_module_api_create (my.meta, my.root)
        c_module_api_private_create (my.meta, my.root)

        c_module_impl_create (my.meta, my.root)
        c_module_impl_private_create (my.meta, my.root)

        c_module_interface_create (my.root, my.root, my.meta)
        c_module_implementation_create (my.root, my.root, my.meta)
    endif

    #   Create modules from the clsses.
    c_module_class_create (my.root, my.root, my.meta)

    #   Process modules.
    foreach_module_resolve (my.root, my.project)
    foreach_dump ("module", my.root, my.project.work_path)

    #   Create lang_modules.
    c_module_create (my.root, my.root, my.project)

    #   Process lang_modules.
    c_module_resolve (my.root)

    #   Resolve shortcuts for all modules.
    foreach_component_resolve_shortcut_refs (my.root)

    #   At this point all elements are created and resolved.
    if my.echo_level = "debug"
        item_save_to_file (my.root, "root.xml", my.project.work_path)
    endif

    if my.echo_level = "debug"
        item_save_to_file (my.project, "project.xml", my.project.work_path)
    endif

    #   Perform cross projects name resolution.
    projects_api_reset_project (my.projects_api, my.project)
    projects_api_collect_info (my.projects_api, my.root)
    projects_api_save (my.projects_api, main.work_path)

    #   Resolve modules.
    my.type_resolution_map = projects_api_build_type_resolution_map (my.projects_api)

    for my.root.c_module
        my.c_module_resolved = \
                resolution_map_apply_to_lang_module (my.type_resolution_map, c_module, my.project.work_path)
        move my.c_module_resolved before c_module
        delete c_module
    endfor

    my.header_resolution_map = projects_api_build_header_resolution_map (my.projects_api)
    for my.root.c_module
        c_module_add_headers (c_module, my.header_resolution_map)
    endfor

    if my.echo_level = "debug"
        item_save_to_file (my.type_resolution_map, "type_resolution_map.xml", my.project.work_path)
        item_save_to_file (my.header_resolution_map, "header_resolution_map.xml", my.project.work_path)
    endif

    #   Generate code.
    c_module_generate_sources (my.root)

    #   Generate CMake files.
    cmake_generate_sources (my.root, my.project)
endfunction


function process_library (library, features_list, echo_level)
    check_arguments (my, "library, features_list, echo_level", my)

    library_resolve (my.library)
    features_list_update_from_library (my.features_list, my.library)
endfunction


# ---------------------------------------------------------------------------
#   Entry point.
# ---------------------------------------------------------------------------
function run_main ()
    main.echo_level ?= "fatal"
    main.work_path ?= "generated"

    #   Create container where all features will be located.
    my.features_list = features_list_load (main.work_path)

    #   Create container where projects API will be located.
    my.projects_api = projects_api_load (main.work_path)

    #   Process code generation.
    for main.project
        my.loaded_project = item_load_from_file ("project/$(make_id ("project", project.name)).xml")
        process_project (my.loaded_project, my.features_list, my.projects_api, main.echo_level)
    endfor

    for main.external where defined (library)
        my.loaded_library = item_load_from_file ("external/$(make_id ("library", external.library)).xml")
        process_library (my.loaded_library, my.features_list, main.echo_level)
    endfor

    #   Create context and populate it with features.
    foreach_features_resolve (my.features_list)

    c_features_create (my.features_list, my.features_list)

    projects_api_save (my.projects_api, main.work_path)
    features_list_save (my.features_list, main.work_path)

    projects_api_collect_info (my.projects_api, my.features_list)
    my.resolution_map = projects_api_build_type_resolution_map (my.projects_api)

    my.features_list_resolved = resolution_map_apply_to (my.resolution_map, my.features_list, main.work_path)

    #   Generate cmake files for features.
    cmake_generate_features (my.features_list_resolved, main->license)
    cmake_generate_definitions (my.features_list_resolved, main->license)

endfunction

# ---------------------------------------------------------------------------
#   Generate bloat code. Make life easier.
# ---------------------------------------------------------------------------
run_main ()

.endtemplate
