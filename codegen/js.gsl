.template 0

gsl from "common.gsl"
gsl from "js_codegen.gsl"
gsl from "js_models.gsl"

function js_create_project_module(project, destination, wrapper)
  echo_info("js_create_project_module", my)
endfunction

function js_create_c_context_module(source, destination, wrapper, meta)
  echo_info("js_create_c_context_module", my)
endfunction

function js_create_interface_module(source, destination, wrapper, meta)
  echo_info("js_create_interface_module", my)
  my.js_module = js_append_js_module_model(my.destination, my.source)
  my.js_interface_module = js_append_js_interface_module_model(my.js_module, my.source, my.wrapper)
  js_append_js_wrapped_interface_model(my.wrapper, my.js_interface_module, my.wrapper)
endfunction

function js_create_implementation_module(source, destination, wrapper, meta)
  echo_info("js_create_implementation_module", my)
  my.js_module = js_append_js_module_model(my.destination, my.source)
  my.js_implementation_module = js_append_js_implementation_module_model(my.js_module, my.source, my.wrapper)
  js_append_js_wrapped_implementation_model(my.wrapper, my.js_implementation_module, my.wrapper)
endfunction

function js_create_class_module(source, destination, wrapper, meta)
  echo_info("js_create_class_module", my)
  if my.source.scope = "public" & !(my.source.name = "error ctx")
    my.js_module = js_append_js_module_model(my.destination, my.source)
    my.js_class_module = js_append_js_class_module_model(my.js_module, my.source, my.wrapper)
    js_append_js_wrapped_class_model(my.wrapper, my.js_class_module, my.wrapper)
  endif
endfunction

function js_create_enum_module(source, destination, wrapper, meta)
  echo_info("js_create_enum_module", my)
  if !(my.source.name = "error")
    my.js_module = js_append_js_module_model(my.destination, my.source)
    my.js_enum_module = js_append_js_enum_module_model(my.js_module, my.source)
    js_append_js_wrapped_enum_model(my.wrapper, my.js_enum_module, my.wrapper)
  endif
endfunction

function js_resolve_js_class_module(js_class_module, wrapper)
  if defined(my.js_class_module->cpp_class)
    my.cpp_class = my.js_class_module->cpp_class
    for my.cpp_class.cpp_method
      for cpp_method.argument
        js_append_resolved_argument(cpp_method, argument, my.cpp_class, my.wrapper)
        delete argument
      endfor
      if defined(cpp_method->return)
        js_append_resolved_return(cpp_method, cpp_method->return, my.wrapper)
        delete cpp_method->return
      endif
    endfor
    my.class_names = XML.new()
    for my.cpp_class.cpp_method
      for cpp_method.cpp_context_argument
        new class_name to my.class_names
          class_name.name = cpp_context_argument.module_name
        endnew
      endfor
    endfor
    my.cpp_js_includes = XML.new()
    for my.wrapper.js_wrapped_class
      for my.class_names.class_name where class_name.name = js_wrapped_class.name
        js_append_js_include_module_model(my.js_class_module, js_wrapped_class)
        next js_wrapped_class
      endfor
    endfor
  endif
endfunction

function js_resolve_js_implementation_module(parent, js_implementation_module, wrapper)
  my.js_class_module = js_append_js_class_module_model(my.parent, my.js_implementation_module, my.wrapper)
  js_append_js_wrapped_class_model(my.wrapper, my.js_class_module, my.wrapper)
  js_resolve_js_class_module(my.js_class_module, my.wrapper)
endfunction

function js_module_resolve(source, wrapper)
  echo_info("js_module_resolve", my)
  if defined(my.source->js_implementation_module)
    js_resolve_js_implementation_module(my.source, my.source->js_implementation_module, my.wrapper)
    delete my.source->js_implementation_module
  endif
  if defined(my.source->js_class_module)
    js_resolve_js_class_module(my.source->js_class_module, my.wrapper)
  endif
endfunction

function js_resolve(project, wrapper)
  echo_info("js_resolve", my)
  my.wrapper.name = my.project.name
  my.wrapper.prefix = my.project.prefix
  my.wrapper.namespace = my.project.namespace
  my.wrapper.root_dir = cat_path("../wrappers/$(my.wrapper.lang:no)", "crypto")
  my.wrapper.source_dir = cat_path(my.wrapper.root_dir, "src")
  my.wrapper.project_source_dir = cat_path(my.wrapper.source_dir, my.wrapper.name)
  my.wrapper.index_js_file = "index.js"
  my.wrapper.index_js_file_path = cat_path(my.wrapper.project_source_dir, my.wrapper.index_js_file)
endfunction

function js_generate_project(source, wrapper)
  echo_info("js_generate_project", my)
  if -1 = directory.create(my.wrapper.project_source_dir)
    echo_fatal("Can't create directory '$(my.wrapper.project_source_dir)'", my)
  endif
endfunction

function js_generate_sources(source, wrapper)
  echo_info("js_generate_sources", my)
  /* js_create_js_module_files(my.source, my.wrapper) */
  js_create_index_js_file(my.wrapper)
endfunction

endtemplate
