.template 0

gsl from "common.gsl"
gsl from "js_codegen.gsl"
gsl from "js_models.gsl"

function js_create_project_module(project, wrapper)
  echo_info("Create project module: $(my.project.name:no)", my)
  return js_append_js_project_model(my.wrapper, my.project, my.wrapper)
endfunction

function js_create_interface_module(source, wrapper_project, meta)
  echo_info("Create interface module: $(my.source.name:no)", my)
  my.js_module = js_append_js_module_model(my.wrapper_project, my.source)
  js_append_js_interface_module_model(my.js_module, my.source, my.wrapper_project)
endfunction

function js_create_implementation_module(source, wrapper_project, meta)
  echo_info("Create implementation module: $(my.source.name)", my)
  my.js_module = js_append_js_module_model(my.wrapper_project, my.source)
  js_append_js_class_module_model(my.js_module, my.source, my.wrapper_project)
endfunction

function js_create_class_module(source, wrapper_project, meta)
  echo_info("Create class module: $(my.source.name:no)", my)
  if my.source.scope = "public" & my.source.name <> "error"
    my.js_module = js_append_js_module_model(my.wrapper_project, my.source)
    js_append_js_class_module_model(my.js_module, my.source, my.wrapper_project)
  endif
endfunction

function js_create_enum_module(source, wrapper_project, meta)
  echo_info("Create enum module: $(my.source.name:no)", my)
  my.js_module = js_append_js_module_model(my.wrapper_project, my.source)
  if !(my.source.name = "status")
    js_append_js_enum_module_model(my.js_module, my.source, my.wrapper_project)
  else
    js_append_js_error_status_module_model(my.js_module, my.source, my.wrapper_project)
  endif
endfunction

function js_module_resolve_uids(js_component, parent_uid)
  if defined(my.parent_uid) & string.prefixed(my.parent_uid, "js_module")
    my.parent_uid = # Undefined
  endif
  my.component_name = name(my.js_component)
  if defined(my.parent_uid) & string.prefixed(my.component_name, "js_")
    regexp.match("js_(.+)", my.component_name, my.component_name)
  endif
  my.js_component.uid = make_id(my.parent_uid, my.component_name, my.js_component.name)
  for my.js_component. as inner_component where is_item(inner_component) & defined(inner_component.name)
    js_module_resolve_uids(inner_component, my.js_component.uid)
  endfor
endfunction

function js_module_resolve(source, wrapper_project)
  echo_info("Resolve module: $(my.source.name:no)", my)
  js_module_resolve_uids(my.source)
endfunction

function js_generate_project(wrapper_project)
  echo_info("Generate project: $(my.wrapper_project.name:no)", my)
  if -1 = directory.create(my.wrapper_project.project_source_dir)
    echo_fatal("Can't create directory '$(my.wrapper_project.project_source_dir)'", my)
  endif
endfunction

function js_generate_sources(wrapper_project)
  echo_info("Generate sources for project: $(my.wrapper_project.name:no)", my)
  if defined(my.wrapper_project->js_module)
    js_create_umbrella_header_file(my.wrapper_project)
    js_create_index_js_file(my.wrapper_project)
    js_create_index_cpp_file(my.wrapper_project)
    js_create_js_module_files(my.wrapper_project)
  endif
endfunction

endtemplate
