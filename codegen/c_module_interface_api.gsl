.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Interface Private API'.
#   Private function prefix is: B25.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "c_resolver.gsl"
gsl from "c_names_config.gsl"


function _B25_add_interface_api_type (interface, module, meta)
    check_argument (my, "interface")
    check_argument (my, "module")
    check_argument (my, "meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new struct to my.module
        . = my.module.
        .name = ""
        .class = my.names.class_interface_api
        .interface = my.interface.name
        .is_interface_api = 1

        new property to struct
            . = "\
                API's unique identifier, MUST be first in the structure.
                For interface '$(my.interface.name:c)' MUST be equal to the \
                '$(my.refs.interface_constant_tag)'."

            .name = my.names.property_api_tag
            .type = my.refs.class_api_enum_tag
            .value = my.refs.interface_constant_tag
            .is_api_tag = 1
        endnew

        for my.interface.inherit
            assert_attribute (inherit, "interface", my)

            c_names_update_with_inherited_interface (my.names, inherit)

            my.inherited_refs = c_refs_create (my.names)

            new property to struct
                . = "Link to the inherited interface API '$(inherit.interface:)'."
                .name = my.names.property_inherited_interface
                .type = my.inherited_refs.type_inherited_interface
                .is_object = 1
            endnew
        endfor

        for my.interface.method
            my.property = item_copy_to (method, struct, "property")
            my.property.is_callback = 1

            c_method_add_argument_impl (my.property)
        endfor

        for my.interface.constant
            my.property = item_copy_to (constant, struct, "property")
            my.property.is_constant = 1
        endfor
    endnew

endfunction

# ---------------------------------------------------------------------------
#   Entrypoint. Create module with 'Interface API'.
# ---------------------------------------------------------------------------
function c_module_interface_api_create (source, destination, meta)
    check_argument (my, "source")
    check_argument (my, "destination")
    check_argument (my, "meta")


    for my.source.interface
        meta_reset_active_entity (my.meta, interface.name)

        my.names = meta_names (my.meta)

        new module to my.destination
            . = "Interface '$(interface.name:)' API."

            new require
                .module = my.names.module_library
            endnew

            new require
                .module = my.names.module_api
            endnew

            new require
                .module = my.names.module_impl
            endnew

            .name = my.names.module_interface_api
            .class = my.names.class_interface_api
            .scope = "private"

            _B25_add_interface_api_type (interface, module, my.meta)

            for module.method
                c_method_add_preconditions (method)
            endfor
        endnew
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Return 'module' that contains 'Interface Private API'.
# ---------------------------------------------------------------------------
function c_module_interface_api_find (name, source)
    check_argument (my, "name")
    check_argument (my, "source")

    for my.source.module
        my.api_type = module->struct ( \
                is_true (struct.is_interface_api) & (struct.interface = my.name)) ?

        if defined (my.api_type)
            return module
        endif
    endfor

    echo_fatal ("API type of the interface '$(my.name)'" + \
            " is not found within given scope.", my)
endfunction

# ---------------------------------------------------------------------------
#   Return 'struct' that describes 'Interface Private API'.
# ---------------------------------------------------------------------------
function c_module_interface_api_find_type (name, source)
    check_argument (my, "name")
    check_argument (my, "source")

    my.interface_api_module = c_module_interface_api_find (my.name, my.source)
    assert_attribute (my, "interface_api_module", my)

    my.api_type = my.interface_api_module->struct ( \
            is_true (is_interface_api) & (interface = my.name)) ?

    assert_attribute (my, "api_type", my)

    return my.api_type
endfunction

.endtemplate
