.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This module contains functions processing component 'implementation'.
#   Private function prefix is: P14.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"
gsl from "interface.gsl"
gsl from "component.gsl"
gsl from "c_component.gsl"

# ---------------------------------------------------------------------------
#   Check that all interfaces are implemented explicitly.
# ---------------------------------------------------------------------------
function implementation_check_interface_hierarchy (interface, implementation, source)
    check_arguments (my, "interface, implementation, source", my)

    my.interface_definition = interface_find (my.interface.name, my.source)

    for my.interface_definition.inherit
        if count (my.implementation.interface, name = inherit.interface) = 0
            echo_fatal ("Implementation of the '$(inherit.interface:)' interface \
                    required by interface '$(my.interface.name)' \
                    within <$(name (my.implementation)) name=\"$(my.implementation.name)\"/>")
        endif

        my.inherited_interface = interface_find (inherit.interface, my.source)
        implementation_check_interface_hierarchy (my.inherited_interface, my.implementation, my.source)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Copy interface methods to the implemented interface.
# ---------------------------------------------------------------------------
function implementation_copy_interface_methods (interface, implementation, source)
    check_arguments (my, "interface, implementation, source", my)

    my.interface_definition = interface_find (my.interface.name, my.source)

    for my.interface_definition.method
        copy method to my.interface
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.c_include.
# ---------------------------------------------------------------------------
function implementation_resolve_c_include (c_include, parent)
    check_arguments (my, "c_include, parent", my)

    c_component_require_attr_file (my.c_include, my)
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.interface.context.
# ---------------------------------------------------------------------------
function implementation_resolve_interface_context (context, parent)
    check_arguments (my, "context, parent", my)

    component_require_attr_name (my.context, my)
    assert_attribute (my.context, "c_type", my)
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.interface.constant.
# ---------------------------------------------------------------------------
function implementation_resolve_interface_constant (constant, parent)
    check_arguments (my, "constant, parent", my)

    component_require_attr_name (my.constant)
    component_require_attr_value (my.constant)
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.interface.
# ---------------------------------------------------------------------------
function implementation_resolve_interface (interface, parent)
    check_arguments (my, "interface, parent", my)

    component_require_attr_name (my.interface, my)

    for my.interface.context
        implementation_resolve_interface_context (context, my.interface)
    endfor

    for my.interface.constant
        implementation_resolve_interface_constant (constant, my.interface)
    endfor
endfunction

function implementation_resolve_attr_require_type (require, parent)
    check_arguments (my, "require", my)

    my.require.type ?= "api"

    my.valid_types = "api, interface"

    if ! string_in (my.require.type, my.valid_types)
        my.require_dump = "<$(name (my.require)) name=\"$(my.require.name:)\" type=\"$(my.require.type)\")"

        echo_fatal ("Invalid attribute require.type '$(my.require_dump:)'. Expected {$(my.valid_types)}", my)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.require.
# ---------------------------------------------------------------------------
function implementation_resolve_require (require, parent)
    check_arguments (my, "require, parent", my)

    component_require_attr_name (my.require)
    implementation_resolve_attr_require_type (my.require)
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.
# ---------------------------------------------------------------------------
function implementation_resolve (implementation, parent, project)
    check_arguments (my, "implementation, parent, project", my)

    component_require_attr_name (my.implementation, my)

    echo_trace ("Resolving implementation: $(my.implementation.name:)", my)

    for my.implementation.c_include
        implementation_resolve_c_include (c_include, my.implementation)
    endfor

    for my.implementation.interface as implemented_interface
        implementation_resolve_interface (implemented_interface, my.implementation)
        implementation_check_interface_hierarchy (implemented_interface, my.implementation, my.parent)
        implementation_copy_interface_methods (implemented_interface, my.implementation, my.parent)
    else
        echo_fatal ("Implementation '$(my.implementation.name)' does not implement any interface.", my)
    endfor

    for my.implementation.require
        implementation_resolve_require (require, my.implementation)
    endfor

endfunction

# ---------------------------------------------------------------------------
#   Traverse implementations within source and perform complete resolution.
# ---------------------------------------------------------------------------
function foreach_implementation_resolve (source, project)
    check_arguments (my, "source, project", my)

    for my.source.implementation
        implementation_resolve (implementation, my.source, my.project)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create 'meta entity' for each implementation within source.
# ---------------------------------------------------------------------------
function foreach_implementation_update_meta (source, meta)
    check_arguments (my, "source, meta", my)

    for my.source.implementation
        meta_add_implementation (my.meta, implementation)
    endfor
endfunction

.endtemplate
