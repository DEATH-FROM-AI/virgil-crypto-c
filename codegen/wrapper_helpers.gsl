.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for Python wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

# ===========================================================================
#   C types derivation. TODO: extract this functions to separate GSL module.
# ===========================================================================

# ---------------------------------------------------------------------------
#   If attribute 'project' is defined within <instance/> then return project
#   prefix, otherwise return empty string.
# ---------------------------------------------------------------------------
function component_derive_project_uid (instance)
    check_arguments (my, "instance", my)

    return defined (my.instance.project) ?? make_id ("project", my.instance.project) ? ""
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C type:
#       - enum
#       - class
#       - interface
#       - implementation
# ---------------------------------------------------------------------------
function class_derive_c_type (type)
    check_arguments (my, "type", my)

    my.item_name = name (my.type)

    if my.item_name = "enum"
        return make_ref_c (make_id ("enum", my.type.name))

    elsif my.item_name = "interface"
        return make_ref_c (make_id ("class impl struct impl"))
    else
        return make_ref_c (make_id ("class", my.type.name, "struct", my.type.name))
    endif
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the instance C type.
# ---------------------------------------------------------------------------
function class_derive_c_instance_type (instance)
    check_arguments (my, "instance", my)

    my.temp_c_instance = XML.new("c_instance")

    c_component_map_instance_attr_type (my.temp_c_instance, my.instance)

    return my.temp_c_instance.type
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class constructor.
# ---------------------------------------------------------------------------
function class_derive_c_defalut_constructor (class)
    check_arguments (my, "class", my)

    return make_ref_c (make_id ("class", my.class.name, "method new"))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class destructor.
# ---------------------------------------------------------------------------
function class_derive_c_destructor (class)
    check_arguments (my, "class", my)

    return make_ref_c (make_id ("class", my.class.name, "method delete"))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class method.
# ---------------------------------------------------------------------------
function class_derive_c_method (class, method)
    check_arguments (my, "class, method", my)

    if string_equal (my.method.of_class, "global") | string_equal (my.class.of_class, "global")
        return make_ref_c (make_id ("global method", my.method.name))

    else
        my.of_class = my.method.of_class ? my.class.of_class ? my.class.name
        return make_ref_c (make_id ("class", my.of_class, "method", my.method.name))
    endif
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class constructor.
# ---------------------------------------------------------------------------
function class_derive_c_constructor (class, constructor)
    check_arguments (my, "class, constructor", my)

    my.of_class = my.class.of_class ? my.class.name
    return make_ref_c (make_id ("class", my.of_class, "method", "new", my.constructor.name ?))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class retain method.
# ---------------------------------------------------------------------------
function class_derive_c_method_shallow_copy (class)
    check_arguments (my, "class", my)

    my.of_class = my.class.of_class ? my.class.name
    return make_ref_c (make_id ("class", my.of_class, "method", "shallow copy"))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class method that returns
#   context size.
# ---------------------------------------------------------------------------
function class_derive_class_c_method_ctx_size (class)
    check_arguments (my, "class", my)

    my.of_class = my.class.of_class ? my.class.name

    if item_in (my.class, "class")
        return make_ref_c (make_id ("class", my.of_class, "method", "ctx size"))

    elsif item_in (my.class, "implementation")
        return make_ref_c (make_id ("class", my.of_class, "method", "impl size"))

    else
        return make_ref_c (make_id ("class", my.of_class, "method", "size"))
    endif
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function interface_derive_c_api_method_from_name (interface_name)
    check_arguments (my, "interface_name", my)

    return make_ref_c (make_id ("class", my.interface_name, "method", "api"))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function interface_derive_c_api_method (interface)
    check_arguments (my, "interface", my)

    assert_attribute (my.interface, "name", my)

    return interface_derive_c_api_method_from_name (my.interface.name)
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns
#   requested constant.
# ---------------------------------------------------------------------------
function interface_derive_c_constant_method (interface, constant)
    check_arguments (my, "interface, constant", my)

    assert_attribute (my.interface, "name", my)
    assert_attribute (my.constant, "name", my)

    return make_ref_c (make_id ("class", my.interface.name, "method", my.constant.name))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function class_derive_c_method_use_dependency (class, dependency)
    check_arguments (my, "class, dependency", my)

    return make_ref_c (make_id("class", my.class.name, "method", "use", my.dependency.name))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function class_derive_c_method_release_dependency (class, dependency)
    check_arguments (my, "class, dependency", my)

    return make_ref_c (make_id("class", my.class.name, "method", "release", my.dependency.name))
endfunction

.endtemplate