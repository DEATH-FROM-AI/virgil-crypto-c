.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>


gsl from "common.gsl"

# ===========================================================================
#   Generic helpers.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Return true, if given class constant should be wrapped.
# ---------------------------------------------------------------------------
function wrapper_should_wrap_class_constant(constant)
    check_arguments(my, "constant", my)

    return my.constant.scope = "public" & my.constant.definition = "public"
endfunction

# ---------------------------------------------------------------------------
#   Return true, if given method should be wrapped.
# ---------------------------------------------------------------------------
function wrapper_should_wrap_method(method)
    check_arguments(my, "method", my)

    return my.method.scope = "public" & my.method.declaration = "public" & my.method.visibility = "public"
endfunction


# ===========================================================================
#   Derive C names.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class constructor.
# ---------------------------------------------------------------------------
function class_derive_c_constructor(class, name)
    check_arguments(my, "class", my)

    return make_ref_c(make_id("class", my.class.name, "method new", my.name))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class destructor.
# ---------------------------------------------------------------------------
function class_derive_c_destructor(class)
    check_arguments(my, "class", my)

    return make_ref_c(make_id("class", my.class.name, "method delete"))
endfunction


# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C class shallow copy method.
# ---------------------------------------------------------------------------
function class_derive_c_method_shallow_copy(class)
    check_arguments(my, "class", my)

    my.of_class = my.class.of_class ? my.class.name
    return make_ref_c(make_id("class", my.of_class, "method", "shallow copy"))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function class_derive_c_method_use_dependency(class, dependency)
    check_arguments(my, "class, dependency", my)

    return make_ref_c(make_id("class", my.class.name, "method", "use", my.dependency.name))
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) that refers to the C interface method that returns API.
# ---------------------------------------------------------------------------
function class_derive_c_method_release_dependency(class, dependency)
    check_arguments(my, "class, dependency", my)

    return make_ref_c(make_id("class", my.class.name, "method", "release", my.dependency.name))
endfunction

# ===========================================================================
#   Formatters.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Return error message that is extarcted from the constant description.
# ---------------------------------------------------------------------------
function enum_constant_format_oneline_description(constant)
    check_arguments(my, "constant", my)

    my.message = my.constant. ? ""

    return string_trim(string_collapse_spaces(string.replace(my.message, "$(terminator)| ")))
endfunction

.endtemplate
